// <auto-generated>
/*
 * Beam self custody API
 *
 * The Beam self custody API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamSelfCustody.Client.ClientUtils;
using BeamSelfCustody.Client;

namespace BeamSelfCustody.Model
{
    /// <summary>
    /// OperationResponseGame
    /// </summary>
    public partial class OperationResponseGame : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OperationResponseGame" /> class.
        /// </summary>
        /// <param name="chainIds">chainIds</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="pegiContent">pegiContent</param>
        /// <param name="backgroundImageUrl">backgroundImageUrl</param>
        /// <param name="coverImageUrl">coverImageUrl</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="logoImageUrl">logoImageUrl</param>
        /// <param name="pegiRating">pegiRating</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public OperationResponseGame(List<int> chainIds, string id, string name, List<OperationResponseGame.PegiContentEnum> pegiContent, string? backgroundImageUrl = default, string? coverImageUrl = default, Object? createdAt = default, string? description = default, string? logoImageUrl = default, PegiRatingEnum? pegiRating = default, Object? updatedAt = default)
        {
            ChainIds = chainIds;
            Id = id;
            Name = name;
            PegiContent = pegiContent;
            BackgroundImageUrl = backgroundImageUrl;
            CoverImageUrl = coverImageUrl;
            CreatedAt = createdAt;
            Description = description;
            LogoImageUrl = logoImageUrl;
            PegiRating = pegiRating;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines PegiContent
        /// </summary>
        public enum PegiContentEnum
        {
            /// <summary>
            /// Enum BadLanguage for value: BadLanguage
            /// </summary>
            BadLanguage = 1,

            /// <summary>
            /// Enum Discrimination for value: Discrimination
            /// </summary>
            Discrimination = 2,

            /// <summary>
            /// Enum Drugs for value: Drugs
            /// </summary>
            Drugs = 3,

            /// <summary>
            /// Enum Fear for value: Fear
            /// </summary>
            Fear = 4,

            /// <summary>
            /// Enum Gambling for value: Gambling
            /// </summary>
            Gambling = 5,

            /// <summary>
            /// Enum Sex for value: Sex
            /// </summary>
            Sex = 6,

            /// <summary>
            /// Enum Violence for value: Violence
            /// </summary>
            Violence = 7,

            /// <summary>
            /// Enum InGamePurchases for value: InGamePurchases
            /// </summary>
            InGamePurchases = 8
        }

        /// <summary>
        /// Returns a <see cref="PegiContentEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PegiContentEnum PegiContentEnumFromString(string value)
        {
            if (value.Equals("BadLanguage"))
                return PegiContentEnum.BadLanguage;

            if (value.Equals("Discrimination"))
                return PegiContentEnum.Discrimination;

            if (value.Equals("Drugs"))
                return PegiContentEnum.Drugs;

            if (value.Equals("Fear"))
                return PegiContentEnum.Fear;

            if (value.Equals("Gambling"))
                return PegiContentEnum.Gambling;

            if (value.Equals("Sex"))
                return PegiContentEnum.Sex;

            if (value.Equals("Violence"))
                return PegiContentEnum.Violence;

            if (value.Equals("InGamePurchases"))
                return PegiContentEnum.InGamePurchases;

            throw new NotImplementedException($"Could not convert value to type PegiContentEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PegiContentEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PegiContentEnum? PegiContentEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BadLanguage"))
                return PegiContentEnum.BadLanguage;

            if (value.Equals("Discrimination"))
                return PegiContentEnum.Discrimination;

            if (value.Equals("Drugs"))
                return PegiContentEnum.Drugs;

            if (value.Equals("Fear"))
                return PegiContentEnum.Fear;

            if (value.Equals("Gambling"))
                return PegiContentEnum.Gambling;

            if (value.Equals("Sex"))
                return PegiContentEnum.Sex;

            if (value.Equals("Violence"))
                return PegiContentEnum.Violence;

            if (value.Equals("InGamePurchases"))
                return PegiContentEnum.InGamePurchases;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PegiContentEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PegiContentEnumToJsonValue(PegiContentEnum? value)
        {
            if (value == PegiContentEnum.BadLanguage)
                return "BadLanguage";

            if (value == PegiContentEnum.Discrimination)
                return "Discrimination";

            if (value == PegiContentEnum.Drugs)
                return "Drugs";

            if (value == PegiContentEnum.Fear)
                return "Fear";

            if (value == PegiContentEnum.Gambling)
                return "Gambling";

            if (value == PegiContentEnum.Sex)
                return "Sex";

            if (value == PegiContentEnum.Violence)
                return "Violence";

            if (value == PegiContentEnum.InGamePurchases)
                return "InGamePurchases";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Defines PegiRating
        /// </summary>
        public enum PegiRatingEnum
        {
            /// <summary>
            /// Enum Three for value: Three
            /// </summary>
            Three = 1,

            /// <summary>
            /// Enum Seven for value: Seven
            /// </summary>
            Seven = 2,

            /// <summary>
            /// Enum Twelve for value: Twelve
            /// </summary>
            Twelve = 3,

            /// <summary>
            /// Enum Sixteen for value: Sixteen
            /// </summary>
            Sixteen = 4,

            /// <summary>
            /// Enum Eighteen for value: Eighteen
            /// </summary>
            Eighteen = 5
        }

        /// <summary>
        /// Returns a <see cref="PegiRatingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PegiRatingEnum PegiRatingEnumFromString(string value)
        {
            if (value.Equals("Three"))
                return PegiRatingEnum.Three;

            if (value.Equals("Seven"))
                return PegiRatingEnum.Seven;

            if (value.Equals("Twelve"))
                return PegiRatingEnum.Twelve;

            if (value.Equals("Sixteen"))
                return PegiRatingEnum.Sixteen;

            if (value.Equals("Eighteen"))
                return PegiRatingEnum.Eighteen;

            throw new NotImplementedException($"Could not convert value to type PegiRatingEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PegiRatingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PegiRatingEnum? PegiRatingEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Three"))
                return PegiRatingEnum.Three;

            if (value.Equals("Seven"))
                return PegiRatingEnum.Seven;

            if (value.Equals("Twelve"))
                return PegiRatingEnum.Twelve;

            if (value.Equals("Sixteen"))
                return PegiRatingEnum.Sixteen;

            if (value.Equals("Eighteen"))
                return PegiRatingEnum.Eighteen;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PegiRatingEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? PegiRatingEnumToJsonValue(PegiRatingEnum? value)
        {
            if (value == null)
                return null;

            if (value == PegiRatingEnum.Three)
                return "Three";

            if (value == PegiRatingEnum.Seven)
                return "Seven";

            if (value == PegiRatingEnum.Twelve)
                return "Twelve";

            if (value == PegiRatingEnum.Sixteen)
                return "Sixteen";

            if (value == PegiRatingEnum.Eighteen)
                return "Eighteen";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets PegiRating
        /// </summary>
        [JsonPropertyName("pegiRating")]
        public PegiRatingEnum? PegiRating { get; set; }

        /// <summary>
        /// Gets or Sets ChainIds
        /// </summary>
        [JsonPropertyName("chainIds")]
        public List<int> ChainIds { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PegiContent
        /// </summary>
        [JsonPropertyName("pegiContent")]
        public List<OperationResponseGame.PegiContentEnum> PegiContent { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundImageUrl
        /// </summary>
        [JsonPropertyName("backgroundImageUrl")]
        public string? BackgroundImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CoverImageUrl
        /// </summary>
        [JsonPropertyName("coverImageUrl")]
        public string? CoverImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public Object? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Gets or Sets LogoImageUrl
        /// </summary>
        [JsonPropertyName("logoImageUrl")]
        public string? LogoImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public Object? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OperationResponseGame {\n");
            sb.Append("  ChainIds: ").Append(ChainIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PegiContent: ").Append(PegiContent).Append("\n");
            sb.Append("  BackgroundImageUrl: ").Append(BackgroundImageUrl).Append("\n");
            sb.Append("  CoverImageUrl: ").Append(CoverImageUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogoImageUrl: ").Append(LogoImageUrl).Append("\n");
            sb.Append("  PegiRating: ").Append(PegiRating).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OperationResponseGame" />
    /// </summary>
    public class OperationResponseGameJsonConverter : JsonConverter<OperationResponseGame>
    {
        /// <summary>
        /// Deserializes json to <see cref="OperationResponseGame" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OperationResponseGame Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<int>?> chainIds = default;
            Option<string?> id = default;
            Option<string?> name = default;
            Option<List<OperationResponseGame.PegiContentEnum>?> pegiContent = default;
            Option<string?> backgroundImageUrl = default;
            Option<string?> coverImageUrl = default;
            Option<Object?> createdAt = default;
            Option<string?> description = default;
            Option<string?> logoImageUrl = default;
            Option<OperationResponseGame.PegiRatingEnum?> pegiRating = default;
            Option<Object?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "chainIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainIds = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pegiContent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pegiContent = new Option<List<OperationResponseGame.PegiContentEnum>?>(JsonSerializer.Deserialize<List<OperationResponseGame.PegiContentEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "backgroundImageUrl":
                            backgroundImageUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "coverImageUrl":
                            coverImageUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "logoImageUrl":
                            logoImageUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pegiRating":
                            string? pegiRatingRawValue = utf8JsonReader.GetString();
                            if (pegiRatingRawValue != null)
                                pegiRating = new Option<OperationResponseGame.PegiRatingEnum?>(OperationResponseGame.PegiRatingEnumFromStringOrDefault(pegiRatingRawValue));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!chainIds.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(chainIds));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(name));

            if (!pegiContent.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(pegiContent));

            if (!backgroundImageUrl.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(backgroundImageUrl));

            if (!coverImageUrl.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(coverImageUrl));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(createdAt));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(description));

            if (!logoImageUrl.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(logoImageUrl));

            if (!pegiRating.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(pegiRating));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class OperationResponseGame.", nameof(updatedAt));

            if (chainIds.IsSet && chainIds.Value == null)
                throw new ArgumentNullException(nameof(chainIds), "Property is not nullable for class OperationResponseGame.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class OperationResponseGame.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class OperationResponseGame.");

            if (pegiContent.IsSet && pegiContent.Value == null)
                throw new ArgumentNullException(nameof(pegiContent), "Property is not nullable for class OperationResponseGame.");

            return new OperationResponseGame(chainIds.Value!, id.Value!, name.Value!, pegiContent.Value!, backgroundImageUrl.Value!, coverImageUrl.Value!, createdAt.Value!, description.Value!, logoImageUrl.Value!, pegiRating.Value!, updatedAt.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="OperationResponseGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="operationResponseGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OperationResponseGame operationResponseGame, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, operationResponseGame, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OperationResponseGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="operationResponseGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, OperationResponseGame operationResponseGame, JsonSerializerOptions jsonSerializerOptions)
        {
            if (operationResponseGame.ChainIds == null)
                throw new ArgumentNullException(nameof(operationResponseGame.ChainIds), "Property is required for class OperationResponseGame.");

            if (operationResponseGame.Id == null)
                throw new ArgumentNullException(nameof(operationResponseGame.Id), "Property is required for class OperationResponseGame.");

            if (operationResponseGame.Name == null)
                throw new ArgumentNullException(nameof(operationResponseGame.Name), "Property is required for class OperationResponseGame.");

            if (operationResponseGame.PegiContent == null)
                throw new ArgumentNullException(nameof(operationResponseGame.PegiContent), "Property is required for class OperationResponseGame.");

            writer.WritePropertyName("chainIds");
            JsonSerializer.Serialize(writer, operationResponseGame.ChainIds, jsonSerializerOptions);
            writer.WriteString("id", operationResponseGame.Id);

            writer.WriteString("name", operationResponseGame.Name);

            writer.WritePropertyName("pegiContent");
            JsonSerializer.Serialize(writer, operationResponseGame.PegiContent, jsonSerializerOptions);
            if (operationResponseGame.BackgroundImageUrl != null)
                writer.WriteString("backgroundImageUrl", operationResponseGame.BackgroundImageUrl);
            else
                writer.WriteNull("backgroundImageUrl");

            if (operationResponseGame.CoverImageUrl != null)
                writer.WriteString("coverImageUrl", operationResponseGame.CoverImageUrl);
            else
                writer.WriteNull("coverImageUrl");

            if (operationResponseGame.CreatedAt != null)
            {
                writer.WritePropertyName("createdAt");
                JsonSerializer.Serialize(writer, operationResponseGame.CreatedAt, jsonSerializerOptions);
            }
            else
                writer.WriteNull("createdAt");
            if (operationResponseGame.Description != null)
                writer.WriteString("description", operationResponseGame.Description);
            else
                writer.WriteNull("description");

            if (operationResponseGame.LogoImageUrl != null)
                writer.WriteString("logoImageUrl", operationResponseGame.LogoImageUrl);
            else
                writer.WriteNull("logoImageUrl");

            var pegiRatingRawValue = OperationResponseGame.PegiRatingEnumToJsonValue(operationResponseGame.PegiRating!.Value);
            if (pegiRatingRawValue != null)
                writer.WriteString("pegiRating", pegiRatingRawValue);
            else
                writer.WriteNull("pegiRating");

            if (operationResponseGame.UpdatedAt != null)
            {
                writer.WritePropertyName("updatedAt");
                JsonSerializer.Serialize(writer, operationResponseGame.UpdatedAt, jsonSerializerOptions);
            }
            else
                writer.WriteNull("updatedAt");
        }
    }
}