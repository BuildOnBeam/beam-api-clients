// <auto-generated>
/*
 * Beam self custody API
 *
 * The Beam self custody API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamSelfCustody.Client.ClientUtils;
using BeamSelfCustody.Client;

namespace BeamSelfCustody.Model
{
    /// <summary>
    /// GetSessionRequestResponse
    /// </summary>
    public partial class GetSessionRequestResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSessionRequestResponse" /> class.
        /// </summary>
        /// <param name="accountAddress">accountAddress</param>
        /// <param name="id">id</param>
        /// <param name="isActive">isActive</param>
        /// <param name="sessionAddress">sessionAddress</param>
        /// <param name="endTime">endTime</param>
        /// <param name="startTime">startTime</param>
        [JsonConstructor]
        public GetSessionRequestResponse(string accountAddress, string id, bool isActive, string sessionAddress, Option<string?> endTime = default, Option<string?> startTime = default)
        {
            AccountAddress = accountAddress;
            Id = id;
            IsActive = isActive;
            SessionAddress = sessionAddress;
            EndTimeOption = endTime;
            StartTimeOption = startTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AccountAddress
        /// </summary>
        [JsonPropertyName("accountAddress")]
        public string AccountAddress { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [JsonPropertyName("isActive")]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets SessionAddress
        /// </summary>
        [JsonPropertyName("sessionAddress")]
        public string SessionAddress { get; set; }

        /// <summary>
        /// Used to track the state of EndTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EndTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public string? EndTime { get { return this. EndTimeOption; } set { this.EndTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartTime
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StartTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string? StartTime { get { return this. StartTimeOption; } set { this.StartTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSessionRequestResponse {\n");
            sb.Append("  AccountAddress: ").Append(AccountAddress).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  SessionAddress: ").Append(SessionAddress).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetSessionRequestResponse" />
    /// </summary>
    public class GetSessionRequestResponseJsonConverter : JsonConverter<GetSessionRequestResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetSessionRequestResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetSessionRequestResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accountAddress = default;
            Option<string?> id = default;
            Option<bool?> isActive = default;
            Option<string?> sessionAddress = default;
            Option<string?> endTime = default;
            Option<string?> startTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountAddress":
                            accountAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isActive":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "sessionAddress":
                            sessionAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "endTime":
                            endTime = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "startTime":
                            startTime = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accountAddress.IsSet)
                throw new ArgumentException("Property is required for class GetSessionRequestResponse.", nameof(accountAddress));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetSessionRequestResponse.", nameof(id));

            if (!isActive.IsSet)
                throw new ArgumentException("Property is required for class GetSessionRequestResponse.", nameof(isActive));

            if (!sessionAddress.IsSet)
                throw new ArgumentException("Property is required for class GetSessionRequestResponse.", nameof(sessionAddress));

            if (accountAddress.IsSet && accountAddress.Value == null)
                throw new ArgumentNullException(nameof(accountAddress), "Property is not nullable for class GetSessionRequestResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetSessionRequestResponse.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class GetSessionRequestResponse.");

            if (sessionAddress.IsSet && sessionAddress.Value == null)
                throw new ArgumentNullException(nameof(sessionAddress), "Property is not nullable for class GetSessionRequestResponse.");

            return new GetSessionRequestResponse(accountAddress.Value!, id.Value!, isActive.Value!.Value!, sessionAddress.Value!, endTime, startTime);
        }

        /// <summary>
        /// Serializes a <see cref="GetSessionRequestResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessionRequestResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetSessionRequestResponse getSessionRequestResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getSessionRequestResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetSessionRequestResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getSessionRequestResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetSessionRequestResponse getSessionRequestResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getSessionRequestResponse.AccountAddress == null)
                throw new ArgumentNullException(nameof(getSessionRequestResponse.AccountAddress), "Property is required for class GetSessionRequestResponse.");

            if (getSessionRequestResponse.Id == null)
                throw new ArgumentNullException(nameof(getSessionRequestResponse.Id), "Property is required for class GetSessionRequestResponse.");

            if (getSessionRequestResponse.SessionAddress == null)
                throw new ArgumentNullException(nameof(getSessionRequestResponse.SessionAddress), "Property is required for class GetSessionRequestResponse.");

            writer.WriteString("accountAddress", getSessionRequestResponse.AccountAddress);

            writer.WriteString("id", getSessionRequestResponse.Id);

            writer.WriteBoolean("isActive", getSessionRequestResponse.IsActive);

            writer.WriteString("sessionAddress", getSessionRequestResponse.SessionAddress);

            if (getSessionRequestResponse.EndTimeOption.IsSet)
                if (getSessionRequestResponse.EndTimeOption.Value != null)
                    writer.WriteString("endTime", getSessionRequestResponse.EndTime);
                else
                    writer.WriteNull("endTime");

            if (getSessionRequestResponse.StartTimeOption.IsSet)
                if (getSessionRequestResponse.StartTimeOption.Value != null)
                    writer.WriteString("startTime", getSessionRequestResponse.StartTime);
                else
                    writer.WriteNull("startTime");
        }
    }
}