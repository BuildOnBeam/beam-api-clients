// <auto-generated>
/*
 * Beam self custody API
 *
 * The Beam self custody API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamSelfCustody.Client;
using BeamSelfCustody.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamSelfCustody.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOperationApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OperationApiEvents Events { get; }

        /// <summary>
        /// Initializes an operation. Used by Game SDKs to get transaction results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOperationRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOperationApiResponse"/>&gt;</returns>
        Task<ICreateOperationApiResponse> CreateOperationAsync(CreateOperationRequestInput createOperationRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Initializes an operation. Used by Game SDKs to get transaction results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createOperationRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOperationApiResponse"/>?&gt;</returns>
        Task<ICreateOperationApiResponse?> CreateOperationOrDefaultAsync(CreateOperationRequestInput createOperationRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns operation data for given id. Used by Game SDKs to get transaction results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="opId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOperationApiResponse"/>&gt;</returns>
        Task<IGetOperationApiResponse> GetOperationAsync(string opId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns operation data for given id. Used by Game SDKs to get transaction results.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="opId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOperationApiResponse"/>?&gt;</returns>
        Task<IGetOperationApiResponse?> GetOperationOrDefaultAsync(string opId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates operation result for given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="opId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessOperationApiResponse"/>&gt;</returns>
        Task<IProcessOperationApiResponse> ProcessOperationAsync(ConfirmOperationRequest confirmOperationRequest, string opId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates operation result for given id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="opId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessOperationApiResponse"/>?&gt;</returns>
        Task<IProcessOperationApiResponse?> ProcessOperationOrDefaultAsync(ConfirmOperationRequest confirmOperationRequest, string opId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateOperationApiResponse"/>
    /// </summary>
    public interface ICreateOperationApiResponse : BeamSelfCustody.Client.IApiResponse, ICreated<BeamSelfCustody.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IGetOperationApiResponse"/>
    /// </summary>
    public interface IGetOperationApiResponse : BeamSelfCustody.Client.IApiResponse, IOk<BeamSelfCustody.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IProcessOperationApiResponse"/>
    /// </summary>
    public interface IProcessOperationApiResponse : BeamSelfCustody.Client.IApiResponse, IOk<BeamSelfCustody.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OperationApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateOperation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateOperation;

        internal void ExecuteOnCreateOperation(OperationApi.CreateOperationApiResponse apiResponse)
        {
            OnCreateOperation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateOperation(Exception exception)
        {
            OnErrorCreateOperation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOperation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOperation;

        internal void ExecuteOnGetOperation(OperationApi.GetOperationApiResponse apiResponse)
        {
            OnGetOperation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOperation(Exception exception)
        {
            OnErrorGetOperation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnProcessOperation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorProcessOperation;

        internal void ExecuteOnProcessOperation(OperationApi.ProcessOperationApiResponse apiResponse)
        {
            OnProcessOperation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorProcessOperation(Exception exception)
        {
            OnErrorProcessOperation?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OperationApi : IOperationApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OperationApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OperationApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OperationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OperationApi(ILogger<OperationApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OperationApiEvents operationApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OperationApi>();
            HttpClient = httpClient;
            Events = operationApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateOperation(CreateOperationRequestInput createOperationRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createOperationRequestInput"></param>
        /// <returns></returns>
        private void ValidateCreateOperation(CreateOperationRequestInput createOperationRequestInput)
        {
            if (createOperationRequestInput == null)
                throw new ArgumentNullException(nameof(createOperationRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createOperationRequestInput"></param>
        private void AfterCreateOperationDefaultImplementation(ICreateOperationApiResponse apiResponseLocalVar, CreateOperationRequestInput createOperationRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterCreateOperation(ref suppressDefaultLog, apiResponseLocalVar, createOperationRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createOperationRequestInput"></param>
        partial void AfterCreateOperation(ref bool suppressDefaultLog, ICreateOperationApiResponse apiResponseLocalVar, CreateOperationRequestInput createOperationRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="createOperationRequestInput"></param>
        private void OnErrorCreateOperationDefaultImplementation(Exception exception, string pathFormat, string path, CreateOperationRequestInput createOperationRequestInput)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateOperation(ref suppressDefaultLog, exception, pathFormat, path, createOperationRequestInput);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="createOperationRequestInput"></param>
        partial void OnErrorCreateOperation(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, CreateOperationRequestInput createOperationRequestInput);

        /// <summary>
        /// Initializes an operation. Used by Game SDKs to get transaction results. 
        /// </summary>
        /// <param name="createOperationRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOperationApiResponse"/>&gt;</returns>
        public async Task<ICreateOperationApiResponse?> CreateOperationOrDefaultAsync(CreateOperationRequestInput createOperationRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateOperationAsync(createOperationRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Initializes an operation. Used by Game SDKs to get transaction results. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOperationRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateOperationApiResponse"/>&gt;</returns>
        public async Task<ICreateOperationApiResponse> CreateOperationAsync(CreateOperationRequestInput createOperationRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateOperation(createOperationRequestInput);

                FormatCreateOperation(createOperationRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/operation";

                    httpRequestMessageLocalVar.Content = (createOperationRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createOperationRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateOperationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateOperationApiResponse>();

                        CreateOperationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/operation", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateOperationDefaultImplementation(apiResponseLocalVar, createOperationRequestInput);

                        Events.ExecuteOnCreateOperation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateOperationDefaultImplementation(e, "/v1/self-custody/operation", uriBuilderLocalVar.Path, createOperationRequestInput);
                Events.ExecuteOnErrorCreateOperation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateOperationApiResponse"/>
        /// </summary>
        public partial class CreateOperationApiResponse : BeamSelfCustody.Client.ApiResponse, ICreateOperationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateOperationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateOperationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateOperationApiResponse(ILogger<CreateOperationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamSelfCustody.Model.CommonOperationResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamSelfCustody.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamSelfCustody.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOperation(ref string opId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="opId"></param>
        /// <returns></returns>
        private void ValidateGetOperation(string opId)
        {
            if (opId == null)
                throw new ArgumentNullException(nameof(opId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="opId"></param>
        private void AfterGetOperationDefaultImplementation(IGetOperationApiResponse apiResponseLocalVar, string opId)
        {
            bool suppressDefaultLog = false;
            AfterGetOperation(ref suppressDefaultLog, apiResponseLocalVar, opId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="opId"></param>
        partial void AfterGetOperation(ref bool suppressDefaultLog, IGetOperationApiResponse apiResponseLocalVar, string opId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="opId"></param>
        private void OnErrorGetOperationDefaultImplementation(Exception exception, string pathFormat, string path, string opId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetOperation(ref suppressDefaultLog, exception, pathFormat, path, opId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="opId"></param>
        partial void OnErrorGetOperation(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string opId);

        /// <summary>
        /// Returns operation data for given id. Used by Game SDKs to get transaction results. 
        /// </summary>
        /// <param name="opId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOperationApiResponse"/>&gt;</returns>
        public async Task<IGetOperationApiResponse?> GetOperationOrDefaultAsync(string opId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOperationAsync(opId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns operation data for given id. Used by Game SDKs to get transaction results. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="opId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOperationApiResponse"/>&gt;</returns>
        public async Task<IGetOperationApiResponse> GetOperationAsync(string opId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOperation(opId);

                FormatGetOperation(ref opId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/operation/{opId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BopId%7D", Uri.EscapeDataString(opId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOperationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOperationApiResponse>();

                        GetOperationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/operation/{opId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOperationDefaultImplementation(apiResponseLocalVar, opId);

                        Events.ExecuteOnGetOperation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOperationDefaultImplementation(e, "/v1/self-custody/operation/{opId}", uriBuilderLocalVar.Path, opId);
                Events.ExecuteOnErrorGetOperation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOperationApiResponse"/>
        /// </summary>
        public partial class GetOperationApiResponse : BeamSelfCustody.Client.ApiResponse, IGetOperationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOperationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOperationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOperationApiResponse(ILogger<GetOperationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamSelfCustody.Model.CommonOperationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamSelfCustody.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamSelfCustody.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatProcessOperation(ConfirmOperationRequest confirmOperationRequest, ref string opId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="opId"></param>
        /// <returns></returns>
        private void ValidateProcessOperation(ConfirmOperationRequest confirmOperationRequest, string opId)
        {
            if (confirmOperationRequest == null)
                throw new ArgumentNullException(nameof(confirmOperationRequest));

            if (opId == null)
                throw new ArgumentNullException(nameof(opId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="opId"></param>
        private void AfterProcessOperationDefaultImplementation(IProcessOperationApiResponse apiResponseLocalVar, ConfirmOperationRequest confirmOperationRequest, string opId)
        {
            bool suppressDefaultLog = false;
            AfterProcessOperation(ref suppressDefaultLog, apiResponseLocalVar, confirmOperationRequest, opId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="opId"></param>
        partial void AfterProcessOperation(ref bool suppressDefaultLog, IProcessOperationApiResponse apiResponseLocalVar, ConfirmOperationRequest confirmOperationRequest, string opId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="opId"></param>
        private void OnErrorProcessOperationDefaultImplementation(Exception exception, string pathFormat, string path, ConfirmOperationRequest confirmOperationRequest, string opId)
        {
            bool suppressDefaultLog = false;
            OnErrorProcessOperation(ref suppressDefaultLog, exception, pathFormat, path, confirmOperationRequest, opId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="opId"></param>
        partial void OnErrorProcessOperation(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, ConfirmOperationRequest confirmOperationRequest, string opId);

        /// <summary>
        /// Updates operation result for given id 
        /// </summary>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="opId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessOperationApiResponse"/>&gt;</returns>
        public async Task<IProcessOperationApiResponse?> ProcessOperationOrDefaultAsync(ConfirmOperationRequest confirmOperationRequest, string opId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ProcessOperationAsync(confirmOperationRequest, opId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates operation result for given id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="opId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IProcessOperationApiResponse"/>&gt;</returns>
        public async Task<IProcessOperationApiResponse> ProcessOperationAsync(ConfirmOperationRequest confirmOperationRequest, string opId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateProcessOperation(confirmOperationRequest, opId);

                FormatProcessOperation(confirmOperationRequest, ref opId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/operation/{opId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BopId%7D", Uri.EscapeDataString(opId.ToString()));

                    httpRequestMessageLocalVar.Content = (confirmOperationRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(confirmOperationRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ProcessOperationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ProcessOperationApiResponse>();

                        ProcessOperationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/operation/{opId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterProcessOperationDefaultImplementation(apiResponseLocalVar, confirmOperationRequest, opId);

                        Events.ExecuteOnProcessOperation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorProcessOperationDefaultImplementation(e, "/v1/self-custody/operation/{opId}", uriBuilderLocalVar.Path, confirmOperationRequest, opId);
                Events.ExecuteOnErrorProcessOperation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ProcessOperationApiResponse"/>
        /// </summary>
        public partial class ProcessOperationApiResponse : BeamSelfCustody.Client.ApiResponse, IProcessOperationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ProcessOperationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ProcessOperationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ProcessOperationApiResponse(ILogger<ProcessOperationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamSelfCustody.Model.CommonOperationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamSelfCustody.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamSelfCustody.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
