// <auto-generated>
/*
 * Beam self custody API
 *
 * The Beam self custody API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamPlayerClient.Client;
using BeamPlayerClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamPlayerClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAssetsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AssetsApiEvents Events { get; }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetV3ApiResponse"/>&gt;</returns>
        Task<IGetAssetV3ApiResponse> GetAssetV3Async(string assetAddress, string assetId, Option<bool> owners = default, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetV3ApiResponse"/>?&gt;</returns>
        Task<IGetAssetV3ApiResponse?> GetAssetV3OrDefaultAsync(string assetAddress, string assetId, Option<bool> owners = default, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsForContractBodyInputV3"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostV3ApiResponse"/>&gt;</returns>
        Task<IGetContractAssetsPostV3ApiResponse> GetContractAssetsPostV3Async(GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, string assetAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="getAssetsForContractBodyInputV3"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostV3ApiResponse"/>?&gt;</returns>
        Task<IGetContractAssetsPostV3ApiResponse?> GetContractAssetsPostV3OrDefaultAsync(GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, string assetAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsForProfileBodyInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostV3ApiResponse"/>&gt;</returns>
        Task<IGetProfileAssetsForGamePostV3ApiResponse> GetProfileAssetsForGamePostV3Async(GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="getAssetsForProfileBodyInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostV3ApiResponse"/>?&gt;</returns>
        Task<IGetProfileAssetsForGamePostV3ApiResponse?> GetProfileAssetsForGamePostV3OrDefaultAsync(GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesV3ApiResponse"/>&gt;</returns>
        Task<IGetProfileCurrenciesV3ApiResponse> GetProfileCurrenciesV3Async(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesV3ApiResponse"/>?&gt;</returns>
        Task<IGetProfileCurrenciesV3ApiResponse?> GetProfileCurrenciesV3OrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyV3ApiResponse"/>&gt;</returns>
        Task<IGetProfileNativeCurrencyV3ApiResponse> GetProfileNativeCurrencyV3Async(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyV3ApiResponse"/>?&gt;</returns>
        Task<IGetProfileNativeCurrencyV3ApiResponse?> GetProfileNativeCurrencyV3OrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAssetRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetV3ApiResponse"/>&gt;</returns>
        Task<ITransferAssetV3ApiResponse> TransferAssetV3Async(TransferAssetRequestInputV3 transferAssetRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transferAssetRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetV3ApiResponse"/>?&gt;</returns>
        Task<ITransferAssetV3ApiResponse?> TransferAssetV3OrDefaultAsync(TransferAssetRequestInputV3 transferAssetRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer the native token (BEAM)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferNativeTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenV3ApiResponse"/>&gt;</returns>
        Task<ITransferNativeTokenV3ApiResponse> TransferNativeTokenV3Async(TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer the native token (BEAM)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transferNativeTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenV3ApiResponse"/>?&gt;</returns>
        Task<ITransferNativeTokenV3ApiResponse?> TransferNativeTokenV3OrDefaultAsync(TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenV3ApiResponse"/>&gt;</returns>
        Task<ITransferTokenV3ApiResponse> TransferTokenV3Async(TransferTokenRequestInputV3 transferTokenRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transferTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenV3ApiResponse"/>?&gt;</returns>
        Task<ITransferTokenV3ApiResponse?> TransferTokenV3OrDefaultAsync(TransferTokenRequestInputV3 transferTokenRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAssetV3ApiResponse"/>
    /// </summary>
    public interface IGetAssetV3ApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetAssetResponseV3?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetContractAssetsPostV3ApiResponse"/>
    /// </summary>
    public interface IGetContractAssetsPostV3ApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetAssetsForContractResponseV3?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileAssetsForGamePostV3ApiResponse"/>
    /// </summary>
    public interface IGetProfileAssetsForGamePostV3ApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetAssetsForProfileResponseV3?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileCurrenciesV3ApiResponse"/>
    /// </summary>
    public interface IGetProfileCurrenciesV3ApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetProfileCurrenciesResponseV3?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileNativeCurrencyV3ApiResponse"/>
    /// </summary>
    public interface IGetProfileNativeCurrencyV3ApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetProfileNativeCurrencyResponseV3?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITransferAssetV3ApiResponse"/>
    /// </summary>
    public interface ITransferAssetV3ApiResponse : BeamPlayerClient.Client.IApiResponse, ICreated<BeamPlayerClient.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ITransferNativeTokenV3ApiResponse"/>
    /// </summary>
    public interface ITransferNativeTokenV3ApiResponse : BeamPlayerClient.Client.IApiResponse, ICreated<BeamPlayerClient.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ITransferTokenV3ApiResponse"/>
    /// </summary>
    public interface ITransferTokenV3ApiResponse : BeamPlayerClient.Client.IApiResponse, ICreated<BeamPlayerClient.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AssetsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssetV3;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssetV3;

        internal void ExecuteOnGetAssetV3(AssetsApi.GetAssetV3ApiResponse apiResponse)
        {
            OnGetAssetV3?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetV3(Exception exception)
        {
            OnErrorGetAssetV3?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContractAssetsPostV3;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContractAssetsPostV3;

        internal void ExecuteOnGetContractAssetsPostV3(AssetsApi.GetContractAssetsPostV3ApiResponse apiResponse)
        {
            OnGetContractAssetsPostV3?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContractAssetsPostV3(Exception exception)
        {
            OnErrorGetContractAssetsPostV3?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProfileAssetsForGamePostV3;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProfileAssetsForGamePostV3;

        internal void ExecuteOnGetProfileAssetsForGamePostV3(AssetsApi.GetProfileAssetsForGamePostV3ApiResponse apiResponse)
        {
            OnGetProfileAssetsForGamePostV3?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileAssetsForGamePostV3(Exception exception)
        {
            OnErrorGetProfileAssetsForGamePostV3?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProfileCurrenciesV3;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProfileCurrenciesV3;

        internal void ExecuteOnGetProfileCurrenciesV3(AssetsApi.GetProfileCurrenciesV3ApiResponse apiResponse)
        {
            OnGetProfileCurrenciesV3?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileCurrenciesV3(Exception exception)
        {
            OnErrorGetProfileCurrenciesV3?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetProfileNativeCurrencyV3;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetProfileNativeCurrencyV3;

        internal void ExecuteOnGetProfileNativeCurrencyV3(AssetsApi.GetProfileNativeCurrencyV3ApiResponse apiResponse)
        {
            OnGetProfileNativeCurrencyV3?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileNativeCurrencyV3(Exception exception)
        {
            OnErrorGetProfileNativeCurrencyV3?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransferAssetV3;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransferAssetV3;

        internal void ExecuteOnTransferAssetV3(AssetsApi.TransferAssetV3ApiResponse apiResponse)
        {
            OnTransferAssetV3?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferAssetV3(Exception exception)
        {
            OnErrorTransferAssetV3?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransferNativeTokenV3;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransferNativeTokenV3;

        internal void ExecuteOnTransferNativeTokenV3(AssetsApi.TransferNativeTokenV3ApiResponse apiResponse)
        {
            OnTransferNativeTokenV3?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferNativeTokenV3(Exception exception)
        {
            OnErrorTransferNativeTokenV3?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransferTokenV3;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransferTokenV3;

        internal void ExecuteOnTransferTokenV3(AssetsApi.TransferTokenV3ApiResponse apiResponse)
        {
            OnTransferTokenV3?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferTokenV3(Exception exception)
        {
            OnErrorTransferTokenV3?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AssetsApi : IAssetsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AssetsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AssetsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(ILogger<AssetsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AssetsApiEvents assetsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AssetsApi>();
            HttpClient = httpClient;
            Events = assetsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetAssetV3(ref string assetAddress, ref string assetId, ref Option<bool> owners, ref Option<decimal> chainId, ref Option<string> entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetAssetV3(string assetAddress, string assetId, Option<string> entityId)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));

            if (entityId.IsSet && entityId.Value == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        private void AfterGetAssetV3DefaultImplementation(IGetAssetV3ApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<bool> owners, Option<decimal> chainId, Option<string> entityId)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetV3(ref suppressDefaultLog, apiResponseLocalVar, assetAddress, assetId, owners, chainId, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        partial void AfterGetAssetV3(ref bool suppressDefaultLog, IGetAssetV3ApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<bool> owners, Option<decimal> chainId, Option<string> entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        private void OnErrorGetAssetV3DefaultImplementation(Exception exception, string pathFormat, string path, string assetAddress, string assetId, Option<bool> owners, Option<decimal> chainId, Option<string> entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetAssetV3(ref suppressDefaultLog, exception, pathFormat, path, assetAddress, assetId, owners, chainId, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        partial void OnErrorGetAssetV3(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string assetAddress, string assetId, Option<bool> owners, Option<decimal> chainId, Option<string> entityId);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetV3ApiResponse"/>&gt;</returns>
        public async Task<IGetAssetV3ApiResponse?> GetAssetV3OrDefaultAsync(string assetAddress, string assetId, Option<bool> owners = default, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetV3Async(assetAddress, assetId, owners, chainId, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetV3ApiResponse"/>&gt;</returns>
        public async Task<IGetAssetV3ApiResponse> GetAssetV3Async(string assetAddress, string assetId, Option<bool> owners = default, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetV3(assetAddress, assetId, entityId);

                FormatGetAssetV3(ref assetAddress, ref assetId, ref owners, ref chainId, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/assets/{assetAddress}/{assetId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetId%7D", Uri.EscapeDataString(assetId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (owners.IsSet)
                        parseQueryStringLocalVar["owners"] = owners.Value.ToString();

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    if (entityId.IsSet)
                        parseQueryStringLocalVar["entityId"] = entityId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetV3ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetV3ApiResponse>();

                        GetAssetV3ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/assets/{assetAddress}/{assetId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetV3DefaultImplementation(apiResponseLocalVar, assetAddress, assetId, owners, chainId, entityId);

                        Events.ExecuteOnGetAssetV3(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetV3DefaultImplementation(e, "/v1/self-custody/assets/{assetAddress}/{assetId}", uriBuilderLocalVar.Path, assetAddress, assetId, owners, chainId, entityId);
                Events.ExecuteOnErrorGetAssetV3(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetV3ApiResponse"/>
        /// </summary>
        public partial class GetAssetV3ApiResponse : BeamPlayerClient.Client.ApiResponse, IGetAssetV3ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetV3ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetV3ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetV3ApiResponse(ILogger<GetAssetV3ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetAssetResponseV3? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetAssetResponseV3>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetAssetResponseV3? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContractAssetsPostV3(GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, ref string assetAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getAssetsForContractBodyInputV3"></param>
        /// <param name="assetAddress"></param>
        /// <returns></returns>
        private void ValidateGetContractAssetsPostV3(GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, string assetAddress)
        {
            if (getAssetsForContractBodyInputV3 == null)
                throw new ArgumentNullException(nameof(getAssetsForContractBodyInputV3));

            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsForContractBodyInputV3"></param>
        /// <param name="assetAddress"></param>
        private void AfterGetContractAssetsPostV3DefaultImplementation(IGetContractAssetsPostV3ApiResponse apiResponseLocalVar, GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, string assetAddress)
        {
            bool suppressDefaultLog = false;
            AfterGetContractAssetsPostV3(ref suppressDefaultLog, apiResponseLocalVar, getAssetsForContractBodyInputV3, assetAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsForContractBodyInputV3"></param>
        /// <param name="assetAddress"></param>
        partial void AfterGetContractAssetsPostV3(ref bool suppressDefaultLog, IGetContractAssetsPostV3ApiResponse apiResponseLocalVar, GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, string assetAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsForContractBodyInputV3"></param>
        /// <param name="assetAddress"></param>
        private void OnErrorGetContractAssetsPostV3DefaultImplementation(Exception exception, string pathFormat, string path, GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, string assetAddress)
        {
            bool suppressDefaultLog = false;
            OnErrorGetContractAssetsPostV3(ref suppressDefaultLog, exception, pathFormat, path, getAssetsForContractBodyInputV3, assetAddress);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsForContractBodyInputV3"></param>
        /// <param name="assetAddress"></param>
        partial void OnErrorGetContractAssetsPostV3(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, string assetAddress);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="getAssetsForContractBodyInputV3"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostV3ApiResponse"/>&gt;</returns>
        public async Task<IGetContractAssetsPostV3ApiResponse?> GetContractAssetsPostV3OrDefaultAsync(GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, string assetAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContractAssetsPostV3Async(getAssetsForContractBodyInputV3, assetAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsForContractBodyInputV3"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostV3ApiResponse"/>&gt;</returns>
        public async Task<IGetContractAssetsPostV3ApiResponse> GetContractAssetsPostV3Async(GetAssetsForContractBodyInputV3 getAssetsForContractBodyInputV3, string assetAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContractAssetsPostV3(getAssetsForContractBodyInputV3, assetAddress);

                FormatGetContractAssetsPostV3(getAssetsForContractBodyInputV3, ref assetAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/assets/{assetAddress}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));

                    httpRequestMessageLocalVar.Content = (getAssetsForContractBodyInputV3 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getAssetsForContractBodyInputV3, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContractAssetsPostV3ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContractAssetsPostV3ApiResponse>();

                        GetContractAssetsPostV3ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/assets/{assetAddress}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContractAssetsPostV3DefaultImplementation(apiResponseLocalVar, getAssetsForContractBodyInputV3, assetAddress);

                        Events.ExecuteOnGetContractAssetsPostV3(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContractAssetsPostV3DefaultImplementation(e, "/v1/self-custody/assets/{assetAddress}", uriBuilderLocalVar.Path, getAssetsForContractBodyInputV3, assetAddress);
                Events.ExecuteOnErrorGetContractAssetsPostV3(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContractAssetsPostV3ApiResponse"/>
        /// </summary>
        public partial class GetContractAssetsPostV3ApiResponse : BeamPlayerClient.Client.ApiResponse, IGetContractAssetsPostV3ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContractAssetsPostV3ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContractAssetsPostV3ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContractAssetsPostV3ApiResponse(ILogger<GetContractAssetsPostV3ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetAssetsForContractResponseV3? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetAssetsForContractResponseV3>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetAssetsForContractResponseV3? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileAssetsForGamePostV3(GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getAssetsForProfileBodyInputV3"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfileAssetsForGamePostV3(GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, string entityId)
        {
            if (getAssetsForProfileBodyInputV3 == null)
                throw new ArgumentNullException(nameof(getAssetsForProfileBodyInputV3));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsForProfileBodyInputV3"></param>
        /// <param name="entityId"></param>
        private void AfterGetProfileAssetsForGamePostV3DefaultImplementation(IGetProfileAssetsForGamePostV3ApiResponse apiResponseLocalVar, GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileAssetsForGamePostV3(ref suppressDefaultLog, apiResponseLocalVar, getAssetsForProfileBodyInputV3, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsForProfileBodyInputV3"></param>
        /// <param name="entityId"></param>
        partial void AfterGetProfileAssetsForGamePostV3(ref bool suppressDefaultLog, IGetProfileAssetsForGamePostV3ApiResponse apiResponseLocalVar, GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsForProfileBodyInputV3"></param>
        /// <param name="entityId"></param>
        private void OnErrorGetProfileAssetsForGamePostV3DefaultImplementation(Exception exception, string pathFormat, string path, GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetProfileAssetsForGamePostV3(ref suppressDefaultLog, exception, pathFormat, path, getAssetsForProfileBodyInputV3, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsForProfileBodyInputV3"></param>
        /// <param name="entityId"></param>
        partial void OnErrorGetProfileAssetsForGamePostV3(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, string entityId);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="getAssetsForProfileBodyInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostV3ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileAssetsForGamePostV3ApiResponse?> GetProfileAssetsForGamePostV3OrDefaultAsync(GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileAssetsForGamePostV3Async(getAssetsForProfileBodyInputV3, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsForProfileBodyInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostV3ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileAssetsForGamePostV3ApiResponse> GetProfileAssetsForGamePostV3Async(GetAssetsForProfileBodyInputV3 getAssetsForProfileBodyInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileAssetsForGamePostV3(getAssetsForProfileBodyInputV3, entityId);

                FormatGetProfileAssetsForGamePostV3(getAssetsForProfileBodyInputV3, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/assets/users/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (getAssetsForProfileBodyInputV3 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getAssetsForProfileBodyInputV3, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileAssetsForGamePostV3ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileAssetsForGamePostV3ApiResponse>();

                        GetProfileAssetsForGamePostV3ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/assets/users/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileAssetsForGamePostV3DefaultImplementation(apiResponseLocalVar, getAssetsForProfileBodyInputV3, entityId);

                        Events.ExecuteOnGetProfileAssetsForGamePostV3(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileAssetsForGamePostV3DefaultImplementation(e, "/v1/self-custody/assets/users/{entityId}", uriBuilderLocalVar.Path, getAssetsForProfileBodyInputV3, entityId);
                Events.ExecuteOnErrorGetProfileAssetsForGamePostV3(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileAssetsForGamePostV3ApiResponse"/>
        /// </summary>
        public partial class GetProfileAssetsForGamePostV3ApiResponse : BeamPlayerClient.Client.ApiResponse, IGetProfileAssetsForGamePostV3ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileAssetsForGamePostV3ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileAssetsForGamePostV3ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileAssetsForGamePostV3ApiResponse(ILogger<GetProfileAssetsForGamePostV3ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetAssetsForProfileResponseV3? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetAssetsForProfileResponseV3>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetAssetsForProfileResponseV3? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileCurrenciesV3(ref string entityId, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfileCurrenciesV3(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetProfileCurrenciesV3DefaultImplementation(IGetProfileCurrenciesV3ApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileCurrenciesV3(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetProfileCurrenciesV3(ref bool suppressDefaultLog, IGetProfileCurrenciesV3ApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetProfileCurrenciesV3DefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetProfileCurrenciesV3(ref suppressDefaultLog, exception, pathFormat, path, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetProfileCurrenciesV3(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesV3ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileCurrenciesV3ApiResponse?> GetProfileCurrenciesV3OrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileCurrenciesV3Async(entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesV3ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileCurrenciesV3ApiResponse> GetProfileCurrenciesV3Async(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileCurrenciesV3(entityId);

                FormatGetProfileCurrenciesV3(ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/assets/users/{entityId}/currencies";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileCurrenciesV3ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileCurrenciesV3ApiResponse>();

                        GetProfileCurrenciesV3ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/assets/users/{entityId}/currencies", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileCurrenciesV3DefaultImplementation(apiResponseLocalVar, entityId, chainId);

                        Events.ExecuteOnGetProfileCurrenciesV3(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileCurrenciesV3DefaultImplementation(e, "/v1/self-custody/assets/users/{entityId}/currencies", uriBuilderLocalVar.Path, entityId, chainId);
                Events.ExecuteOnErrorGetProfileCurrenciesV3(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileCurrenciesV3ApiResponse"/>
        /// </summary>
        public partial class GetProfileCurrenciesV3ApiResponse : BeamPlayerClient.Client.ApiResponse, IGetProfileCurrenciesV3ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileCurrenciesV3ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileCurrenciesV3ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileCurrenciesV3ApiResponse(ILogger<GetProfileCurrenciesV3ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetProfileCurrenciesResponseV3? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetProfileCurrenciesResponseV3>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetProfileCurrenciesResponseV3? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileNativeCurrencyV3(ref string entityId, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfileNativeCurrencyV3(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetProfileNativeCurrencyV3DefaultImplementation(IGetProfileNativeCurrencyV3ApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileNativeCurrencyV3(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetProfileNativeCurrencyV3(ref bool suppressDefaultLog, IGetProfileNativeCurrencyV3ApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetProfileNativeCurrencyV3DefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetProfileNativeCurrencyV3(ref suppressDefaultLog, exception, pathFormat, path, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetProfileNativeCurrencyV3(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyV3ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileNativeCurrencyV3ApiResponse?> GetProfileNativeCurrencyV3OrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileNativeCurrencyV3Async(entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyV3ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileNativeCurrencyV3ApiResponse> GetProfileNativeCurrencyV3Async(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileNativeCurrencyV3(entityId);

                FormatGetProfileNativeCurrencyV3(ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/assets/users/{entityId}/native";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileNativeCurrencyV3ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileNativeCurrencyV3ApiResponse>();

                        GetProfileNativeCurrencyV3ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/assets/users/{entityId}/native", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileNativeCurrencyV3DefaultImplementation(apiResponseLocalVar, entityId, chainId);

                        Events.ExecuteOnGetProfileNativeCurrencyV3(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileNativeCurrencyV3DefaultImplementation(e, "/v1/self-custody/assets/users/{entityId}/native", uriBuilderLocalVar.Path, entityId, chainId);
                Events.ExecuteOnErrorGetProfileNativeCurrencyV3(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileNativeCurrencyV3ApiResponse"/>
        /// </summary>
        public partial class GetProfileNativeCurrencyV3ApiResponse : BeamPlayerClient.Client.ApiResponse, IGetProfileNativeCurrencyV3ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileNativeCurrencyV3ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileNativeCurrencyV3ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileNativeCurrencyV3ApiResponse(ILogger<GetProfileNativeCurrencyV3ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetProfileNativeCurrencyResponseV3? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetProfileNativeCurrencyResponseV3>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetProfileNativeCurrencyResponseV3? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferAssetV3(TransferAssetRequestInputV3 transferAssetRequestInputV3, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transferAssetRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateTransferAssetV3(TransferAssetRequestInputV3 transferAssetRequestInputV3, string entityId)
        {
            if (transferAssetRequestInputV3 == null)
                throw new ArgumentNullException(nameof(transferAssetRequestInputV3));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferAssetRequestInputV3"></param>
        /// <param name="entityId"></param>
        private void AfterTransferAssetV3DefaultImplementation(ITransferAssetV3ApiResponse apiResponseLocalVar, TransferAssetRequestInputV3 transferAssetRequestInputV3, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterTransferAssetV3(ref suppressDefaultLog, apiResponseLocalVar, transferAssetRequestInputV3, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferAssetRequestInputV3"></param>
        /// <param name="entityId"></param>
        partial void AfterTransferAssetV3(ref bool suppressDefaultLog, ITransferAssetV3ApiResponse apiResponseLocalVar, TransferAssetRequestInputV3 transferAssetRequestInputV3, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferAssetRequestInputV3"></param>
        /// <param name="entityId"></param>
        private void OnErrorTransferAssetV3DefaultImplementation(Exception exception, string pathFormat, string path, TransferAssetRequestInputV3 transferAssetRequestInputV3, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorTransferAssetV3(ref suppressDefaultLog, exception, pathFormat, path, transferAssetRequestInputV3, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferAssetRequestInputV3"></param>
        /// <param name="entityId"></param>
        partial void OnErrorTransferAssetV3(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, TransferAssetRequestInputV3 transferAssetRequestInputV3, string entityId);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <param name="transferAssetRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetV3ApiResponse"/>&gt;</returns>
        public async Task<ITransferAssetV3ApiResponse?> TransferAssetV3OrDefaultAsync(TransferAssetRequestInputV3 transferAssetRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferAssetV3Async(transferAssetRequestInputV3, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAssetRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetV3ApiResponse"/>&gt;</returns>
        public async Task<ITransferAssetV3ApiResponse> TransferAssetV3Async(TransferAssetRequestInputV3 transferAssetRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferAssetV3(transferAssetRequestInputV3, entityId);

                FormatTransferAssetV3(transferAssetRequestInputV3, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/assets/users/{entityId}/transfer-asset";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (transferAssetRequestInputV3 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transferAssetRequestInputV3, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferAssetV3ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferAssetV3ApiResponse>();

                        TransferAssetV3ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/assets/users/{entityId}/transfer-asset", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferAssetV3DefaultImplementation(apiResponseLocalVar, transferAssetRequestInputV3, entityId);

                        Events.ExecuteOnTransferAssetV3(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferAssetV3DefaultImplementation(e, "/v1/self-custody/assets/users/{entityId}/transfer-asset", uriBuilderLocalVar.Path, transferAssetRequestInputV3, entityId);
                Events.ExecuteOnErrorTransferAssetV3(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferAssetV3ApiResponse"/>
        /// </summary>
        public partial class TransferAssetV3ApiResponse : BeamPlayerClient.Client.ApiResponse, ITransferAssetV3ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferAssetV3ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferAssetV3ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferAssetV3ApiResponse(ILogger<TransferAssetV3ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.CommonOperationResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamPlayerClient.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferNativeTokenV3(TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transferNativeTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateTransferNativeTokenV3(TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, string entityId)
        {
            if (transferNativeTokenRequestInputV3 == null)
                throw new ArgumentNullException(nameof(transferNativeTokenRequestInputV3));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferNativeTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        private void AfterTransferNativeTokenV3DefaultImplementation(ITransferNativeTokenV3ApiResponse apiResponseLocalVar, TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterTransferNativeTokenV3(ref suppressDefaultLog, apiResponseLocalVar, transferNativeTokenRequestInputV3, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferNativeTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        partial void AfterTransferNativeTokenV3(ref bool suppressDefaultLog, ITransferNativeTokenV3ApiResponse apiResponseLocalVar, TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferNativeTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        private void OnErrorTransferNativeTokenV3DefaultImplementation(Exception exception, string pathFormat, string path, TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorTransferNativeTokenV3(ref suppressDefaultLog, exception, pathFormat, path, transferNativeTokenRequestInputV3, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferNativeTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        partial void OnErrorTransferNativeTokenV3(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, string entityId);

        /// <summary>
        /// Transfer the native token (BEAM) 
        /// </summary>
        /// <param name="transferNativeTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenV3ApiResponse"/>&gt;</returns>
        public async Task<ITransferNativeTokenV3ApiResponse?> TransferNativeTokenV3OrDefaultAsync(TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferNativeTokenV3Async(transferNativeTokenRequestInputV3, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer the native token (BEAM) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferNativeTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenV3ApiResponse"/>&gt;</returns>
        public async Task<ITransferNativeTokenV3ApiResponse> TransferNativeTokenV3Async(TransferNativeTokenRequestInputV3 transferNativeTokenRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferNativeTokenV3(transferNativeTokenRequestInputV3, entityId);

                FormatTransferNativeTokenV3(transferNativeTokenRequestInputV3, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/assets/users/{entityId}/transfer-native";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (transferNativeTokenRequestInputV3 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transferNativeTokenRequestInputV3, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferNativeTokenV3ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferNativeTokenV3ApiResponse>();

                        TransferNativeTokenV3ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/assets/users/{entityId}/transfer-native", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferNativeTokenV3DefaultImplementation(apiResponseLocalVar, transferNativeTokenRequestInputV3, entityId);

                        Events.ExecuteOnTransferNativeTokenV3(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferNativeTokenV3DefaultImplementation(e, "/v1/self-custody/assets/users/{entityId}/transfer-native", uriBuilderLocalVar.Path, transferNativeTokenRequestInputV3, entityId);
                Events.ExecuteOnErrorTransferNativeTokenV3(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferNativeTokenV3ApiResponse"/>
        /// </summary>
        public partial class TransferNativeTokenV3ApiResponse : BeamPlayerClient.Client.ApiResponse, ITransferNativeTokenV3ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferNativeTokenV3ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferNativeTokenV3ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferNativeTokenV3ApiResponse(ILogger<TransferNativeTokenV3ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.CommonOperationResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamPlayerClient.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferTokenV3(TransferTokenRequestInputV3 transferTokenRequestInputV3, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transferTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateTransferTokenV3(TransferTokenRequestInputV3 transferTokenRequestInputV3, string entityId)
        {
            if (transferTokenRequestInputV3 == null)
                throw new ArgumentNullException(nameof(transferTokenRequestInputV3));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        private void AfterTransferTokenV3DefaultImplementation(ITransferTokenV3ApiResponse apiResponseLocalVar, TransferTokenRequestInputV3 transferTokenRequestInputV3, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterTransferTokenV3(ref suppressDefaultLog, apiResponseLocalVar, transferTokenRequestInputV3, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        partial void AfterTransferTokenV3(ref bool suppressDefaultLog, ITransferTokenV3ApiResponse apiResponseLocalVar, TransferTokenRequestInputV3 transferTokenRequestInputV3, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        private void OnErrorTransferTokenV3DefaultImplementation(Exception exception, string pathFormat, string path, TransferTokenRequestInputV3 transferTokenRequestInputV3, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorTransferTokenV3(ref suppressDefaultLog, exception, pathFormat, path, transferTokenRequestInputV3, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        partial void OnErrorTransferTokenV3(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, TransferTokenRequestInputV3 transferTokenRequestInputV3, string entityId);

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <param name="transferTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenV3ApiResponse"/>&gt;</returns>
        public async Task<ITransferTokenV3ApiResponse?> TransferTokenV3OrDefaultAsync(TransferTokenRequestInputV3 transferTokenRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferTokenV3Async(transferTokenRequestInputV3, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequestInputV3"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenV3ApiResponse"/>&gt;</returns>
        public async Task<ITransferTokenV3ApiResponse> TransferTokenV3Async(TransferTokenRequestInputV3 transferTokenRequestInputV3, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferTokenV3(transferTokenRequestInputV3, entityId);

                FormatTransferTokenV3(transferTokenRequestInputV3, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/self-custody/assets/users/{entityId}/transfer-token";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (transferTokenRequestInputV3 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transferTokenRequestInputV3, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferTokenV3ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferTokenV3ApiResponse>();

                        TransferTokenV3ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/self-custody/assets/users/{entityId}/transfer-token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferTokenV3DefaultImplementation(apiResponseLocalVar, transferTokenRequestInputV3, entityId);

                        Events.ExecuteOnTransferTokenV3(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferTokenV3DefaultImplementation(e, "/v1/self-custody/assets/users/{entityId}/transfer-token", uriBuilderLocalVar.Path, transferTokenRequestInputV3, entityId);
                Events.ExecuteOnErrorTransferTokenV3(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferTokenV3ApiResponse"/>
        /// </summary>
        public partial class TransferTokenV3ApiResponse : BeamPlayerClient.Client.ApiResponse, ITransferTokenV3ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferTokenV3ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferTokenV3ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferTokenV3ApiResponse(ILogger<TransferTokenV3ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.CommonOperationResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamPlayerClient.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
