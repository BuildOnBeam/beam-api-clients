// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamPlayerClient.Client;
using BeamPlayerClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamPlayerClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAssetsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AssetsApiEvents Events { get; }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetApiResponse"/>&gt;</returns>
        Task<IGetAssetApiResponse> GetAssetAsync(string assetAddress, string assetId, Option<bool> owners = default, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetApiResponse"/>?&gt;</returns>
        Task<IGetAssetApiResponse?> GetAssetOrDefaultAsync(string assetAddress, string assetId, Option<bool> owners = default, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetsForContractApiResponse"/>&gt;</returns>
        Task<IGetAssetsForContractApiResponse> GetAssetsForContractAsync(GetAssetsForContractBodyInput getAssetsForContractBodyInput, string assetAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetsForContractApiResponse"/>?&gt;</returns>
        Task<IGetAssetsForContractApiResponse?> GetAssetsForContractOrDefaultAsync(GetAssetsForContractBodyInput getAssetsForContractBodyInput, string assetAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>&gt;</returns>
        Task<IGetAttributesApiResponse> GetAttributesAsync(decimal chainId, string assetAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>?&gt;</returns>
        Task<IGetAttributesApiResponse?> GetAttributesOrDefaultAsync(decimal chainId, string assetAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOwnersApiResponse"/>&gt;</returns>
        Task<IGetOwnersApiResponse> GetOwnersAsync(decimal chainId, string assetAddress, Option<string> limit = default, Option<string> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOwnersApiResponse"/>?&gt;</returns>
        Task<IGetOwnersApiResponse?> GetOwnersOrDefaultAsync(decimal chainId, string assetAddress, Option<string> limit = default, Option<string> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserAssetsForGamePostApiResponse"/>&gt;</returns>
        Task<IGetUserAssetsForGamePostApiResponse> GetUserAssetsForGamePostAsync(GetAssetsForUserBodyInput getAssetsForUserBodyInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserAssetsForGamePostApiResponse"/>?&gt;</returns>
        Task<IGetUserAssetsForGamePostApiResponse?> GetUserAssetsForGamePostOrDefaultAsync(GetAssetsForUserBodyInput getAssetsForUserBodyInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserCurrenciesApiResponse"/>&gt;</returns>
        Task<IGetUserCurrenciesApiResponse> GetUserCurrenciesAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserCurrenciesApiResponse"/>?&gt;</returns>
        Task<IGetUserCurrenciesApiResponse?> GetUserCurrenciesOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserNativeCurrencyApiResponse"/>&gt;</returns>
        Task<IGetUserNativeCurrencyApiResponse> GetUserNativeCurrencyAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserNativeCurrencyApiResponse"/>?&gt;</returns>
        Task<IGetUserNativeCurrencyApiResponse?> GetUserNativeCurrencyOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetApiResponse"/>&gt;</returns>
        Task<ITransferAssetApiResponse> TransferAssetAsync(TransferAssetRequestInput transferAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetApiResponse"/>?&gt;</returns>
        Task<ITransferAssetApiResponse?> TransferAssetOrDefaultAsync(TransferAssetRequestInput transferAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer the native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenApiResponse"/>&gt;</returns>
        Task<ITransferNativeTokenApiResponse> TransferNativeTokenAsync(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer the native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenApiResponse"/>?&gt;</returns>
        Task<ITransferNativeTokenApiResponse?> TransferNativeTokenOrDefaultAsync(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenApiResponse"/>&gt;</returns>
        Task<ITransferTokenApiResponse> TransferTokenAsync(TransferTokenRequestInput transferTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenApiResponse"/>?&gt;</returns>
        Task<ITransferTokenApiResponse?> TransferTokenOrDefaultAsync(TransferTokenRequestInput transferTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAssetApiResponse"/>
    /// </summary>
    public interface IGetAssetApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetAssetResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssetsForContractApiResponse"/>
    /// </summary>
    public interface IGetAssetsForContractApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetAssetsForContractResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetAttributesApiResponse"/>
    /// </summary>
    public interface IGetAttributesApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetAttributesResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOwnersApiResponse"/>
    /// </summary>
    public interface IGetOwnersApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetOwnersResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserAssetsForGamePostApiResponse"/>
    /// </summary>
    public interface IGetUserAssetsForGamePostApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetAssetsForUserResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserCurrenciesApiResponse"/>
    /// </summary>
    public interface IGetUserCurrenciesApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetUserCurrenciesResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserNativeCurrencyApiResponse"/>
    /// </summary>
    public interface IGetUserNativeCurrencyApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetUserNativeCurrencyResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITransferAssetApiResponse"/>
    /// </summary>
    public interface ITransferAssetApiResponse : BeamPlayerClient.Client.IApiResponse, ICreated<BeamPlayerClient.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ITransferNativeTokenApiResponse"/>
    /// </summary>
    public interface ITransferNativeTokenApiResponse : BeamPlayerClient.Client.IApiResponse, ICreated<BeamPlayerClient.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ITransferTokenApiResponse"/>
    /// </summary>
    public interface ITransferTokenApiResponse : BeamPlayerClient.Client.IApiResponse, ICreated<BeamPlayerClient.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AssetsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAsset;

        internal void ExecuteOnGetAsset(AssetsApi.GetAssetApiResponse apiResponse)
        {
            OnGetAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAsset(Exception exception)
        {
            OnErrorGetAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssetsForContract;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssetsForContract;

        internal void ExecuteOnGetAssetsForContract(AssetsApi.GetAssetsForContractApiResponse apiResponse)
        {
            OnGetAssetsForContract?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetsForContract(Exception exception)
        {
            OnErrorGetAssetsForContract?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAttributes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAttributes;

        internal void ExecuteOnGetAttributes(AssetsApi.GetAttributesApiResponse apiResponse)
        {
            OnGetAttributes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAttributes(Exception exception)
        {
            OnErrorGetAttributes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOwners;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOwners;

        internal void ExecuteOnGetOwners(AssetsApi.GetOwnersApiResponse apiResponse)
        {
            OnGetOwners?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOwners(Exception exception)
        {
            OnErrorGetOwners?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserAssetsForGamePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserAssetsForGamePost;

        internal void ExecuteOnGetUserAssetsForGamePost(AssetsApi.GetUserAssetsForGamePostApiResponse apiResponse)
        {
            OnGetUserAssetsForGamePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserAssetsForGamePost(Exception exception)
        {
            OnErrorGetUserAssetsForGamePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserCurrencies;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserCurrencies;

        internal void ExecuteOnGetUserCurrencies(AssetsApi.GetUserCurrenciesApiResponse apiResponse)
        {
            OnGetUserCurrencies?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserCurrencies(Exception exception)
        {
            OnErrorGetUserCurrencies?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserNativeCurrency;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserNativeCurrency;

        internal void ExecuteOnGetUserNativeCurrency(AssetsApi.GetUserNativeCurrencyApiResponse apiResponse)
        {
            OnGetUserNativeCurrency?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserNativeCurrency(Exception exception)
        {
            OnErrorGetUserNativeCurrency?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransferAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransferAsset;

        internal void ExecuteOnTransferAsset(AssetsApi.TransferAssetApiResponse apiResponse)
        {
            OnTransferAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferAsset(Exception exception)
        {
            OnErrorTransferAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransferNativeToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransferNativeToken;

        internal void ExecuteOnTransferNativeToken(AssetsApi.TransferNativeTokenApiResponse apiResponse)
        {
            OnTransferNativeToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferNativeToken(Exception exception)
        {
            OnErrorTransferNativeToken?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnTransferToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorTransferToken;

        internal void ExecuteOnTransferToken(AssetsApi.TransferTokenApiResponse apiResponse)
        {
            OnTransferToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferToken(Exception exception)
        {
            OnErrorTransferToken?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AssetsApi : IAssetsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AssetsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AssetsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(ILogger<AssetsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AssetsApiEvents assetsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AssetsApi>();
            HttpClient = httpClient;
            Events = assetsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetAsset(ref string assetAddress, ref string assetId, ref Option<bool> owners, ref Option<decimal> chainId, ref Option<string> entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetAsset(string assetAddress, string assetId, Option<string> entityId)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));

            if (entityId.IsSet && entityId.Value == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        private void AfterGetAssetDefaultImplementation(IGetAssetApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<bool> owners, Option<decimal> chainId, Option<string> entityId)
        {
            bool suppressDefaultLog = false;
            AfterGetAsset(ref suppressDefaultLog, apiResponseLocalVar, assetAddress, assetId, owners, chainId, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        partial void AfterGetAsset(ref bool suppressDefaultLog, IGetAssetApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<bool> owners, Option<decimal> chainId, Option<string> entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        private void OnErrorGetAssetDefaultImplementation(Exception exception, string pathFormat, string path, string assetAddress, string assetId, Option<bool> owners, Option<decimal> chainId, Option<string> entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetAsset(ref suppressDefaultLog, exception, pathFormat, path, assetAddress, assetId, owners, chainId, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        partial void OnErrorGetAsset(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string assetAddress, string assetId, Option<bool> owners, Option<decimal> chainId, Option<string> entityId);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetApiResponse"/>&gt;</returns>
        public async Task<IGetAssetApiResponse?> GetAssetOrDefaultAsync(string assetAddress, string assetId, Option<bool> owners = default, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetAsync(assetAddress, assetId, owners, chainId, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetApiResponse"/>&gt;</returns>
        public async Task<IGetAssetApiResponse> GetAssetAsync(string assetAddress, string assetId, Option<bool> owners = default, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAsset(assetAddress, assetId, entityId);

                FormatGetAsset(ref assetAddress, ref assetId, ref owners, ref chainId, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/{assetAddress}/assets/{assetId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetId%7D", Uri.EscapeDataString(assetId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (owners.IsSet)
                        parseQueryStringLocalVar["owners"] = owners.Value.ToString();

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    if (entityId.IsSet)
                        parseQueryStringLocalVar["entityId"] = entityId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetApiResponse>();

                        GetAssetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/{assetAddress}/assets/{assetId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetDefaultImplementation(apiResponseLocalVar, assetAddress, assetId, owners, chainId, entityId);

                        Events.ExecuteOnGetAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetDefaultImplementation(e, "/v1/player/assets/{assetAddress}/assets/{assetId}", uriBuilderLocalVar.Path, assetAddress, assetId, owners, chainId, entityId);
                Events.ExecuteOnErrorGetAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetApiResponse"/>
        /// </summary>
        public partial class GetAssetApiResponse : BeamPlayerClient.Client.ApiResponse, IGetAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetApiResponse(ILogger<GetAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetAssetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetAssetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetAssetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssetsForContract(GetAssetsForContractBodyInput getAssetsForContractBodyInput, ref string assetAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <returns></returns>
        private void ValidateGetAssetsForContract(GetAssetsForContractBodyInput getAssetsForContractBodyInput, string assetAddress)
        {
            if (getAssetsForContractBodyInput == null)
                throw new ArgumentNullException(nameof(getAssetsForContractBodyInput));

            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="assetAddress"></param>
        private void AfterGetAssetsForContractDefaultImplementation(IGetAssetsForContractApiResponse apiResponseLocalVar, GetAssetsForContractBodyInput getAssetsForContractBodyInput, string assetAddress)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetsForContract(ref suppressDefaultLog, apiResponseLocalVar, getAssetsForContractBodyInput, assetAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="assetAddress"></param>
        partial void AfterGetAssetsForContract(ref bool suppressDefaultLog, IGetAssetsForContractApiResponse apiResponseLocalVar, GetAssetsForContractBodyInput getAssetsForContractBodyInput, string assetAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="assetAddress"></param>
        private void OnErrorGetAssetsForContractDefaultImplementation(Exception exception, string pathFormat, string path, GetAssetsForContractBodyInput getAssetsForContractBodyInput, string assetAddress)
        {
            bool suppressDefaultLog = false;
            OnErrorGetAssetsForContract(ref suppressDefaultLog, exception, pathFormat, path, getAssetsForContractBodyInput, assetAddress);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="assetAddress"></param>
        partial void OnErrorGetAssetsForContract(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, GetAssetsForContractBodyInput getAssetsForContractBodyInput, string assetAddress);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetsForContractApiResponse"/>&gt;</returns>
        public async Task<IGetAssetsForContractApiResponse?> GetAssetsForContractOrDefaultAsync(GetAssetsForContractBodyInput getAssetsForContractBodyInput, string assetAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetsForContractAsync(getAssetsForContractBodyInput, assetAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsForContractBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetsForContractApiResponse"/>&gt;</returns>
        public async Task<IGetAssetsForContractApiResponse> GetAssetsForContractAsync(GetAssetsForContractBodyInput getAssetsForContractBodyInput, string assetAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetsForContract(getAssetsForContractBodyInput, assetAddress);

                FormatGetAssetsForContract(getAssetsForContractBodyInput, ref assetAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/{assetAddress}/assets";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));

                    httpRequestMessageLocalVar.Content = (getAssetsForContractBodyInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getAssetsForContractBodyInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetsForContractApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetsForContractApiResponse>();

                        GetAssetsForContractApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/{assetAddress}/assets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetsForContractDefaultImplementation(apiResponseLocalVar, getAssetsForContractBodyInput, assetAddress);

                        Events.ExecuteOnGetAssetsForContract(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetsForContractDefaultImplementation(e, "/v1/player/assets/{assetAddress}/assets", uriBuilderLocalVar.Path, getAssetsForContractBodyInput, assetAddress);
                Events.ExecuteOnErrorGetAssetsForContract(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetsForContractApiResponse"/>
        /// </summary>
        public partial class GetAssetsForContractApiResponse : BeamPlayerClient.Client.ApiResponse, IGetAssetsForContractApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetsForContractApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetsForContractApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetsForContractApiResponse(ILogger<GetAssetsForContractApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetAssetsForContractResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetAssetsForContractResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetAssetsForContractResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAttributes(ref decimal chainId, ref string assetAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <returns></returns>
        private void ValidateGetAttributes(string assetAddress)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        private void AfterGetAttributesDefaultImplementation(IGetAttributesApiResponse apiResponseLocalVar, decimal chainId, string assetAddress)
        {
            bool suppressDefaultLog = false;
            AfterGetAttributes(ref suppressDefaultLog, apiResponseLocalVar, chainId, assetAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        partial void AfterGetAttributes(ref bool suppressDefaultLog, IGetAttributesApiResponse apiResponseLocalVar, decimal chainId, string assetAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        private void OnErrorGetAttributesDefaultImplementation(Exception exception, string pathFormat, string path, decimal chainId, string assetAddress)
        {
            bool suppressDefaultLog = false;
            OnErrorGetAttributes(ref suppressDefaultLog, exception, pathFormat, path, chainId, assetAddress);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        partial void OnErrorGetAttributes(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, decimal chainId, string assetAddress);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>&gt;</returns>
        public async Task<IGetAttributesApiResponse?> GetAttributesOrDefaultAsync(decimal chainId, string assetAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAttributesAsync(chainId, assetAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAttributesApiResponse"/>&gt;</returns>
        public async Task<IGetAttributesApiResponse> GetAttributesAsync(decimal chainId, string assetAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAttributes(assetAddress);

                FormatGetAttributes(ref chainId, ref assetAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/{assetAddress}/attributes";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["chainId"] = chainId.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAttributesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAttributesApiResponse>();

                        GetAttributesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/{assetAddress}/attributes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAttributesDefaultImplementation(apiResponseLocalVar, chainId, assetAddress);

                        Events.ExecuteOnGetAttributes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAttributesDefaultImplementation(e, "/v1/player/assets/{assetAddress}/attributes", uriBuilderLocalVar.Path, chainId, assetAddress);
                Events.ExecuteOnErrorGetAttributes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAttributesApiResponse"/>
        /// </summary>
        public partial class GetAttributesApiResponse : BeamPlayerClient.Client.ApiResponse, IGetAttributesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAttributesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAttributesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAttributesApiResponse(ILogger<GetAttributesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetAttributesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetAttributesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetAttributesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOwners(ref decimal chainId, ref string assetAddress, ref Option<string> limit, ref Option<string> offset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <returns></returns>
        private void ValidateGetOwners(string assetAddress, Option<string> limit, Option<string> offset)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit));

            if (offset.IsSet && offset.Value == null)
                throw new ArgumentNullException(nameof(offset));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetOwnersDefaultImplementation(IGetOwnersApiResponse apiResponseLocalVar, decimal chainId, string assetAddress, Option<string> limit, Option<string> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetOwners(ref suppressDefaultLog, apiResponseLocalVar, chainId, assetAddress, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetOwners(ref bool suppressDefaultLog, IGetOwnersApiResponse apiResponseLocalVar, decimal chainId, string assetAddress, Option<string> limit, Option<string> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetOwnersDefaultImplementation(Exception exception, string pathFormat, string path, decimal chainId, string assetAddress, Option<string> limit, Option<string> offset)
        {
            bool suppressDefaultLog = false;
            OnErrorGetOwners(ref suppressDefaultLog, exception, pathFormat, path, chainId, assetAddress, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetOwners(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, decimal chainId, string assetAddress, Option<string> limit, Option<string> offset);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOwnersApiResponse"/>&gt;</returns>
        public async Task<IGetOwnersApiResponse?> GetOwnersOrDefaultAsync(decimal chainId, string assetAddress, Option<string> limit = default, Option<string> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOwnersAsync(chainId, assetAddress, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional, default to &quot;10&quot;)</param>
        /// <param name="offset"> (optional, default to &quot;0&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOwnersApiResponse"/>&gt;</returns>
        public async Task<IGetOwnersApiResponse> GetOwnersAsync(decimal chainId, string assetAddress, Option<string> limit = default, Option<string> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOwners(assetAddress, limit, offset);

                FormatGetOwners(ref chainId, ref assetAddress, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/{assetAddress}/owners";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["chainId"] = chainId.ToString();

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = offset.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOwnersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOwnersApiResponse>();

                        GetOwnersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/{assetAddress}/owners", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOwnersDefaultImplementation(apiResponseLocalVar, chainId, assetAddress, limit, offset);

                        Events.ExecuteOnGetOwners(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOwnersDefaultImplementation(e, "/v1/player/assets/{assetAddress}/owners", uriBuilderLocalVar.Path, chainId, assetAddress, limit, offset);
                Events.ExecuteOnErrorGetOwners(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOwnersApiResponse"/>
        /// </summary>
        public partial class GetOwnersApiResponse : BeamPlayerClient.Client.ApiResponse, IGetOwnersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOwnersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOwnersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOwnersApiResponse(ILogger<GetOwnersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetOwnersResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetOwnersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetOwnersResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserAssetsForGamePost(GetAssetsForUserBodyInput getAssetsForUserBodyInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetUserAssetsForGamePost(GetAssetsForUserBodyInput getAssetsForUserBodyInput, string entityId)
        {
            if (getAssetsForUserBodyInput == null)
                throw new ArgumentNullException(nameof(getAssetsForUserBodyInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="entityId"></param>
        private void AfterGetUserAssetsForGamePostDefaultImplementation(IGetUserAssetsForGamePostApiResponse apiResponseLocalVar, GetAssetsForUserBodyInput getAssetsForUserBodyInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterGetUserAssetsForGamePost(ref suppressDefaultLog, apiResponseLocalVar, getAssetsForUserBodyInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="entityId"></param>
        partial void AfterGetUserAssetsForGamePost(ref bool suppressDefaultLog, IGetUserAssetsForGamePostApiResponse apiResponseLocalVar, GetAssetsForUserBodyInput getAssetsForUserBodyInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorGetUserAssetsForGamePostDefaultImplementation(Exception exception, string pathFormat, string path, GetAssetsForUserBodyInput getAssetsForUserBodyInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserAssetsForGamePost(ref suppressDefaultLog, exception, pathFormat, path, getAssetsForUserBodyInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorGetUserAssetsForGamePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, GetAssetsForUserBodyInput getAssetsForUserBodyInput, string entityId);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserAssetsForGamePostApiResponse"/>&gt;</returns>
        public async Task<IGetUserAssetsForGamePostApiResponse?> GetUserAssetsForGamePostOrDefaultAsync(GetAssetsForUserBodyInput getAssetsForUserBodyInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserAssetsForGamePostAsync(getAssetsForUserBodyInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsForUserBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserAssetsForGamePostApiResponse"/>&gt;</returns>
        public async Task<IGetUserAssetsForGamePostApiResponse> GetUserAssetsForGamePostAsync(GetAssetsForUserBodyInput getAssetsForUserBodyInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserAssetsForGamePost(getAssetsForUserBodyInput, entityId);

                FormatGetUserAssetsForGamePost(getAssetsForUserBodyInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/users/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (getAssetsForUserBodyInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getAssetsForUserBodyInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserAssetsForGamePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserAssetsForGamePostApiResponse>();

                        GetUserAssetsForGamePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/users/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserAssetsForGamePostDefaultImplementation(apiResponseLocalVar, getAssetsForUserBodyInput, entityId);

                        Events.ExecuteOnGetUserAssetsForGamePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserAssetsForGamePostDefaultImplementation(e, "/v1/player/assets/users/{entityId}", uriBuilderLocalVar.Path, getAssetsForUserBodyInput, entityId);
                Events.ExecuteOnErrorGetUserAssetsForGamePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserAssetsForGamePostApiResponse"/>
        /// </summary>
        public partial class GetUserAssetsForGamePostApiResponse : BeamPlayerClient.Client.ApiResponse, IGetUserAssetsForGamePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserAssetsForGamePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserAssetsForGamePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserAssetsForGamePostApiResponse(ILogger<GetUserAssetsForGamePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetAssetsForUserResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetAssetsForUserResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetAssetsForUserResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserCurrencies(ref string entityId, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetUserCurrencies(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetUserCurrenciesDefaultImplementation(IGetUserCurrenciesApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetUserCurrencies(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetUserCurrencies(ref bool suppressDefaultLog, IGetUserCurrenciesApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetUserCurrenciesDefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserCurrencies(ref suppressDefaultLog, exception, pathFormat, path, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetUserCurrencies(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserCurrenciesApiResponse"/>&gt;</returns>
        public async Task<IGetUserCurrenciesApiResponse?> GetUserCurrenciesOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserCurrenciesAsync(entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserCurrenciesApiResponse"/>&gt;</returns>
        public async Task<IGetUserCurrenciesApiResponse> GetUserCurrenciesAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserCurrencies(entityId);

                FormatGetUserCurrencies(ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/users/{entityId}/currencies";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserCurrenciesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserCurrenciesApiResponse>();

                        GetUserCurrenciesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/users/{entityId}/currencies", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserCurrenciesDefaultImplementation(apiResponseLocalVar, entityId, chainId);

                        Events.ExecuteOnGetUserCurrencies(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserCurrenciesDefaultImplementation(e, "/v1/player/assets/users/{entityId}/currencies", uriBuilderLocalVar.Path, entityId, chainId);
                Events.ExecuteOnErrorGetUserCurrencies(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserCurrenciesApiResponse"/>
        /// </summary>
        public partial class GetUserCurrenciesApiResponse : BeamPlayerClient.Client.ApiResponse, IGetUserCurrenciesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserCurrenciesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserCurrenciesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserCurrenciesApiResponse(ILogger<GetUserCurrenciesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetUserCurrenciesResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetUserCurrenciesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetUserCurrenciesResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserNativeCurrency(ref string entityId, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetUserNativeCurrency(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetUserNativeCurrencyDefaultImplementation(IGetUserNativeCurrencyApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetUserNativeCurrency(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetUserNativeCurrency(ref bool suppressDefaultLog, IGetUserNativeCurrencyApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetUserNativeCurrencyDefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserNativeCurrency(ref suppressDefaultLog, exception, pathFormat, path, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetUserNativeCurrency(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserNativeCurrencyApiResponse"/>&gt;</returns>
        public async Task<IGetUserNativeCurrencyApiResponse?> GetUserNativeCurrencyOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserNativeCurrencyAsync(entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserNativeCurrencyApiResponse"/>&gt;</returns>
        public async Task<IGetUserNativeCurrencyApiResponse> GetUserNativeCurrencyAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserNativeCurrency(entityId);

                FormatGetUserNativeCurrency(ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/users/{entityId}/native";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserNativeCurrencyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserNativeCurrencyApiResponse>();

                        GetUserNativeCurrencyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/users/{entityId}/native", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserNativeCurrencyDefaultImplementation(apiResponseLocalVar, entityId, chainId);

                        Events.ExecuteOnGetUserNativeCurrency(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserNativeCurrencyDefaultImplementation(e, "/v1/player/assets/users/{entityId}/native", uriBuilderLocalVar.Path, entityId, chainId);
                Events.ExecuteOnErrorGetUserNativeCurrency(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserNativeCurrencyApiResponse"/>
        /// </summary>
        public partial class GetUserNativeCurrencyApiResponse : BeamPlayerClient.Client.ApiResponse, IGetUserNativeCurrencyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserNativeCurrencyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserNativeCurrencyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserNativeCurrencyApiResponse(ILogger<GetUserNativeCurrencyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetUserNativeCurrencyResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetUserNativeCurrencyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetUserNativeCurrencyResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferAsset(TransferAssetRequestInput transferAssetRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateTransferAsset(TransferAssetRequestInput transferAssetRequestInput, string entityId)
        {
            if (transferAssetRequestInput == null)
                throw new ArgumentNullException(nameof(transferAssetRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterTransferAssetDefaultImplementation(ITransferAssetApiResponse apiResponseLocalVar, TransferAssetRequestInput transferAssetRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterTransferAsset(ref suppressDefaultLog, apiResponseLocalVar, transferAssetRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterTransferAsset(ref bool suppressDefaultLog, ITransferAssetApiResponse apiResponseLocalVar, TransferAssetRequestInput transferAssetRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorTransferAssetDefaultImplementation(Exception exception, string pathFormat, string path, TransferAssetRequestInput transferAssetRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorTransferAsset(ref suppressDefaultLog, exception, pathFormat, path, transferAssetRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorTransferAsset(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, TransferAssetRequestInput transferAssetRequestInput, string entityId);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetApiResponse"/>&gt;</returns>
        public async Task<ITransferAssetApiResponse?> TransferAssetOrDefaultAsync(TransferAssetRequestInput transferAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferAssetAsync(transferAssetRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetApiResponse"/>&gt;</returns>
        public async Task<ITransferAssetApiResponse> TransferAssetAsync(TransferAssetRequestInput transferAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferAsset(transferAssetRequestInput, entityId);

                FormatTransferAsset(transferAssetRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/users/{entityId}/transfer-asset";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (transferAssetRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transferAssetRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferAssetApiResponse>();

                        TransferAssetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/users/{entityId}/transfer-asset", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferAssetDefaultImplementation(apiResponseLocalVar, transferAssetRequestInput, entityId);

                        Events.ExecuteOnTransferAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferAssetDefaultImplementation(e, "/v1/player/assets/users/{entityId}/transfer-asset", uriBuilderLocalVar.Path, transferAssetRequestInput, entityId);
                Events.ExecuteOnErrorTransferAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferAssetApiResponse"/>
        /// </summary>
        public partial class TransferAssetApiResponse : BeamPlayerClient.Client.ApiResponse, ITransferAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferAssetApiResponse(ILogger<TransferAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.CommonOperationResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamPlayerClient.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferNativeToken(TransferNativeTokenRequestInput transferNativeTokenRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateTransferNativeToken(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId)
        {
            if (transferNativeTokenRequestInput == null)
                throw new ArgumentNullException(nameof(transferNativeTokenRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterTransferNativeTokenDefaultImplementation(ITransferNativeTokenApiResponse apiResponseLocalVar, TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterTransferNativeToken(ref suppressDefaultLog, apiResponseLocalVar, transferNativeTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterTransferNativeToken(ref bool suppressDefaultLog, ITransferNativeTokenApiResponse apiResponseLocalVar, TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorTransferNativeTokenDefaultImplementation(Exception exception, string pathFormat, string path, TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorTransferNativeToken(ref suppressDefaultLog, exception, pathFormat, path, transferNativeTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorTransferNativeToken(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId);

        /// <summary>
        /// Transfer the native token 
        /// </summary>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenApiResponse"/>&gt;</returns>
        public async Task<ITransferNativeTokenApiResponse?> TransferNativeTokenOrDefaultAsync(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferNativeTokenAsync(transferNativeTokenRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer the native token 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenApiResponse"/>&gt;</returns>
        public async Task<ITransferNativeTokenApiResponse> TransferNativeTokenAsync(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferNativeToken(transferNativeTokenRequestInput, entityId);

                FormatTransferNativeToken(transferNativeTokenRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/users/{entityId}/transfer-native";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (transferNativeTokenRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transferNativeTokenRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferNativeTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferNativeTokenApiResponse>();

                        TransferNativeTokenApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/users/{entityId}/transfer-native", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferNativeTokenDefaultImplementation(apiResponseLocalVar, transferNativeTokenRequestInput, entityId);

                        Events.ExecuteOnTransferNativeToken(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferNativeTokenDefaultImplementation(e, "/v1/player/assets/users/{entityId}/transfer-native", uriBuilderLocalVar.Path, transferNativeTokenRequestInput, entityId);
                Events.ExecuteOnErrorTransferNativeToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferNativeTokenApiResponse"/>
        /// </summary>
        public partial class TransferNativeTokenApiResponse : BeamPlayerClient.Client.ApiResponse, ITransferNativeTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferNativeTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferNativeTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferNativeTokenApiResponse(ILogger<TransferNativeTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.CommonOperationResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamPlayerClient.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferToken(TransferTokenRequestInput transferTokenRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateTransferToken(TransferTokenRequestInput transferTokenRequestInput, string entityId)
        {
            if (transferTokenRequestInput == null)
                throw new ArgumentNullException(nameof(transferTokenRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterTransferTokenDefaultImplementation(ITransferTokenApiResponse apiResponseLocalVar, TransferTokenRequestInput transferTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterTransferToken(ref suppressDefaultLog, apiResponseLocalVar, transferTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterTransferToken(ref bool suppressDefaultLog, ITransferTokenApiResponse apiResponseLocalVar, TransferTokenRequestInput transferTokenRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorTransferTokenDefaultImplementation(Exception exception, string pathFormat, string path, TransferTokenRequestInput transferTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorTransferToken(ref suppressDefaultLog, exception, pathFormat, path, transferTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorTransferToken(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, TransferTokenRequestInput transferTokenRequestInput, string entityId);

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenApiResponse"/>&gt;</returns>
        public async Task<ITransferTokenApiResponse?> TransferTokenOrDefaultAsync(TransferTokenRequestInput transferTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferTokenAsync(transferTokenRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenApiResponse"/>&gt;</returns>
        public async Task<ITransferTokenApiResponse> TransferTokenAsync(TransferTokenRequestInput transferTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferToken(transferTokenRequestInput, entityId);

                FormatTransferToken(transferTokenRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/assets/users/{entityId}/transfer-token";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (transferTokenRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transferTokenRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferTokenApiResponse>();

                        TransferTokenApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/assets/users/{entityId}/transfer-token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferTokenDefaultImplementation(apiResponseLocalVar, transferTokenRequestInput, entityId);

                        Events.ExecuteOnTransferToken(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferTokenDefaultImplementation(e, "/v1/player/assets/users/{entityId}/transfer-token", uriBuilderLocalVar.Path, transferTokenRequestInput, entityId);
                Events.ExecuteOnErrorTransferToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferTokenApiResponse"/>
        /// </summary>
        public partial class TransferTokenApiResponse : BeamPlayerClient.Client.ApiResponse, ITransferTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferTokenApiResponse(ILogger<TransferTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.CommonOperationResponse? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamPlayerClient.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
