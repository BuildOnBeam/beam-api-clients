// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamPlayerClient.Client;
using BeamPlayerClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamPlayerClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IConnectorApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ConnectorApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateConnectionRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectionRequestApiResponse"/>&gt;</returns>
        Task<ICreateConnectionRequestApiResponse> CreateConnectionRequestAsync(GenerateConnectionRequestInput generateConnectionRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="generateConnectionRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectionRequestApiResponse"/>?&gt;</returns>
        Task<ICreateConnectionRequestApiResponse?> CreateConnectionRequestOrDefaultAsync(GenerateConnectionRequestInput generateConnectionRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionTransactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTransactionForAddressApiResponse"/>&gt;</returns>
        Task<ICreateTransactionForAddressApiResponse> CreateTransactionForAddressAsync(WebConnectionTransactionInput webConnectionTransactionInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webConnectionTransactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTransactionForAddressApiResponse"/>?&gt;</returns>
        Task<ICreateTransactionForAddressApiResponse?> CreateTransactionForAddressOrDefaultAsync(WebConnectionTransactionInput webConnectionTransactionInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionCreateOperationInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebConnectionOperationApiResponse"/>&gt;</returns>
        Task<ICreateWebConnectionOperationApiResponse> CreateWebConnectionOperationAsync(WebConnectionCreateOperationInput webConnectionCreateOperationInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webConnectionCreateOperationInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebConnectionOperationApiResponse"/>?&gt;</returns>
        Task<ICreateWebConnectionOperationApiResponse?> CreateWebConnectionOperationOrDefaultAsync(WebConnectionCreateOperationInput webConnectionCreateOperationInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateWebConnectionApiResponse"/>&gt;</returns>
        Task<IGenerateWebConnectionApiResponse> GenerateWebConnectionAsync(WebConnectionRequestInput webConnectionRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webConnectionRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateWebConnectionApiResponse"/>?&gt;</returns>
        Task<IGenerateWebConnectionApiResponse?> GenerateWebConnectionOrDefaultAsync(WebConnectionRequestInput webConnectionRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectionRequestApiResponse"/>&gt;</returns>
        Task<IGetConnectionRequestApiResponse> GetConnectionRequestAsync(string requestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectionRequestApiResponse"/>?&gt;</returns>
        Task<IGetConnectionRequestApiResponse?> GetConnectionRequestOrDefaultAsync(string requestId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionRevokeSessionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeSessionByAccountAddressApiResponse"/>&gt;</returns>
        Task<IRevokeSessionByAccountAddressApiResponse> RevokeSessionByAccountAddressAsync(WebConnectionRevokeSessionInput webConnectionRevokeSessionInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webConnectionRevokeSessionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeSessionByAccountAddressApiResponse"/>?&gt;</returns>
        Task<IRevokeSessionByAccountAddressApiResponse?> RevokeSessionByAccountAddressOrDefaultAsync(WebConnectionRevokeSessionInput webConnectionRevokeSessionInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionVerifyRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyOwnershipApiResponse"/>&gt;</returns>
        Task<IVerifyOwnershipApiResponse> VerifyOwnershipAsync(WebConnectionVerifyRequestInput webConnectionVerifyRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="webConnectionVerifyRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyOwnershipApiResponse"/>?&gt;</returns>
        Task<IVerifyOwnershipApiResponse?> VerifyOwnershipOrDefaultAsync(WebConnectionVerifyRequestInput webConnectionVerifyRequestInput, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateConnectionRequestApiResponse"/>
    /// </summary>
    public interface ICreateConnectionRequestApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GenerateConnectionRequestResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreateTransactionForAddressApiResponse"/>
    /// </summary>
    public interface ICreateTransactionForAddressApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreateWebConnectionOperationApiResponse"/>
    /// </summary>
    public interface ICreateWebConnectionOperationApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGenerateWebConnectionApiResponse"/>
    /// </summary>
    public interface IGenerateWebConnectionApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.WebConnectionRequestResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetConnectionRequestApiResponse"/>
    /// </summary>
    public interface IGetConnectionRequestApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.GetConnectionRequestResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRevokeSessionByAccountAddressApiResponse"/>
    /// </summary>
    public interface IRevokeSessionByAccountAddressApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.CommonOperationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IVerifyOwnershipApiResponse"/>
    /// </summary>
    public interface IVerifyOwnershipApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.WebConnectionVerifyRequestResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ConnectorApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateConnectionRequest;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateConnectionRequest;

        internal void ExecuteOnCreateConnectionRequest(ConnectorApi.CreateConnectionRequestApiResponse apiResponse)
        {
            OnCreateConnectionRequest?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateConnectionRequest(Exception exception)
        {
            OnErrorCreateConnectionRequest?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateTransactionForAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateTransactionForAddress;

        internal void ExecuteOnCreateTransactionForAddress(ConnectorApi.CreateTransactionForAddressApiResponse apiResponse)
        {
            OnCreateTransactionForAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateTransactionForAddress(Exception exception)
        {
            OnErrorCreateTransactionForAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateWebConnectionOperation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateWebConnectionOperation;

        internal void ExecuteOnCreateWebConnectionOperation(ConnectorApi.CreateWebConnectionOperationApiResponse apiResponse)
        {
            OnCreateWebConnectionOperation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateWebConnectionOperation(Exception exception)
        {
            OnErrorCreateWebConnectionOperation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGenerateWebConnection;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGenerateWebConnection;

        internal void ExecuteOnGenerateWebConnection(ConnectorApi.GenerateWebConnectionApiResponse apiResponse)
        {
            OnGenerateWebConnection?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGenerateWebConnection(Exception exception)
        {
            OnErrorGenerateWebConnection?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetConnectionRequest;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetConnectionRequest;

        internal void ExecuteOnGetConnectionRequest(ConnectorApi.GetConnectionRequestApiResponse apiResponse)
        {
            OnGetConnectionRequest?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetConnectionRequest(Exception exception)
        {
            OnErrorGetConnectionRequest?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRevokeSessionByAccountAddress;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRevokeSessionByAccountAddress;

        internal void ExecuteOnRevokeSessionByAccountAddress(ConnectorApi.RevokeSessionByAccountAddressApiResponse apiResponse)
        {
            OnRevokeSessionByAccountAddress?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRevokeSessionByAccountAddress(Exception exception)
        {
            OnErrorRevokeSessionByAccountAddress?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnVerifyOwnership;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorVerifyOwnership;

        internal void ExecuteOnVerifyOwnership(ConnectorApi.VerifyOwnershipApiResponse apiResponse)
        {
            OnVerifyOwnership?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorVerifyOwnership(Exception exception)
        {
            OnErrorVerifyOwnership?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ConnectorApi : IConnectorApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ConnectorApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ConnectorApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectorApi(ILogger<ConnectorApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ConnectorApiEvents connectorApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ConnectorApi>();
            HttpClient = httpClient;
            Events = connectorApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateConnectionRequest(GenerateConnectionRequestInput generateConnectionRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="generateConnectionRequestInput"></param>
        /// <returns></returns>
        private void ValidateCreateConnectionRequest(GenerateConnectionRequestInput generateConnectionRequestInput)
        {
            if (generateConnectionRequestInput == null)
                throw new ArgumentNullException(nameof(generateConnectionRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateConnectionRequestInput"></param>
        private void AfterCreateConnectionRequestDefaultImplementation(ICreateConnectionRequestApiResponse apiResponseLocalVar, GenerateConnectionRequestInput generateConnectionRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterCreateConnectionRequest(ref suppressDefaultLog, apiResponseLocalVar, generateConnectionRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="generateConnectionRequestInput"></param>
        partial void AfterCreateConnectionRequest(ref bool suppressDefaultLog, ICreateConnectionRequestApiResponse apiResponseLocalVar, GenerateConnectionRequestInput generateConnectionRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="generateConnectionRequestInput"></param>
        private void OnErrorCreateConnectionRequestDefaultImplementation(Exception exception, string pathFormat, string path, GenerateConnectionRequestInput generateConnectionRequestInput)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateConnectionRequest(ref suppressDefaultLog, exception, pathFormat, path, generateConnectionRequestInput);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="generateConnectionRequestInput"></param>
        partial void OnErrorCreateConnectionRequest(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, GenerateConnectionRequestInput generateConnectionRequestInput);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="generateConnectionRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectionRequestApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectionRequestApiResponse?> CreateConnectionRequestOrDefaultAsync(GenerateConnectionRequestInput generateConnectionRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateConnectionRequestAsync(generateConnectionRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="generateConnectionRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectionRequestApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectionRequestApiResponse> CreateConnectionRequestAsync(GenerateConnectionRequestInput generateConnectionRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateConnectionRequest(generateConnectionRequestInput);

                FormatCreateConnectionRequest(generateConnectionRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/connector";

                    httpRequestMessageLocalVar.Content = (generateConnectionRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(generateConnectionRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateConnectionRequestApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateConnectionRequestApiResponse>();

                        CreateConnectionRequestApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/connector", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateConnectionRequestDefaultImplementation(apiResponseLocalVar, generateConnectionRequestInput);

                        Events.ExecuteOnCreateConnectionRequest(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateConnectionRequestDefaultImplementation(e, "/v1/player/connector", uriBuilderLocalVar.Path, generateConnectionRequestInput);
                Events.ExecuteOnErrorCreateConnectionRequest(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateConnectionRequestApiResponse"/>
        /// </summary>
        public partial class CreateConnectionRequestApiResponse : BeamPlayerClient.Client.ApiResponse, ICreateConnectionRequestApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateConnectionRequestApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateConnectionRequestApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateConnectionRequestApiResponse(ILogger<CreateConnectionRequestApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GenerateConnectionRequestResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GenerateConnectionRequestResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GenerateConnectionRequestResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateTransactionForAddress(WebConnectionTransactionInput webConnectionTransactionInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="webConnectionTransactionInput"></param>
        /// <returns></returns>
        private void ValidateCreateTransactionForAddress(WebConnectionTransactionInput webConnectionTransactionInput)
        {
            if (webConnectionTransactionInput == null)
                throw new ArgumentNullException(nameof(webConnectionTransactionInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionTransactionInput"></param>
        private void AfterCreateTransactionForAddressDefaultImplementation(ICreateTransactionForAddressApiResponse apiResponseLocalVar, WebConnectionTransactionInput webConnectionTransactionInput)
        {
            bool suppressDefaultLog = false;
            AfterCreateTransactionForAddress(ref suppressDefaultLog, apiResponseLocalVar, webConnectionTransactionInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionTransactionInput"></param>
        partial void AfterCreateTransactionForAddress(ref bool suppressDefaultLog, ICreateTransactionForAddressApiResponse apiResponseLocalVar, WebConnectionTransactionInput webConnectionTransactionInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionTransactionInput"></param>
        private void OnErrorCreateTransactionForAddressDefaultImplementation(Exception exception, string pathFormat, string path, WebConnectionTransactionInput webConnectionTransactionInput)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateTransactionForAddress(ref suppressDefaultLog, exception, pathFormat, path, webConnectionTransactionInput);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionTransactionInput"></param>
        partial void OnErrorCreateTransactionForAddress(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, WebConnectionTransactionInput webConnectionTransactionInput);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="webConnectionTransactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTransactionForAddressApiResponse"/>&gt;</returns>
        public async Task<ICreateTransactionForAddressApiResponse?> CreateTransactionForAddressOrDefaultAsync(WebConnectionTransactionInput webConnectionTransactionInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateTransactionForAddressAsync(webConnectionTransactionInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionTransactionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateTransactionForAddressApiResponse"/>&gt;</returns>
        public async Task<ICreateTransactionForAddressApiResponse> CreateTransactionForAddressAsync(WebConnectionTransactionInput webConnectionTransactionInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateTransactionForAddress(webConnectionTransactionInput);

                FormatCreateTransactionForAddress(webConnectionTransactionInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/connector/web-connection/transaction";

                    httpRequestMessageLocalVar.Content = (webConnectionTransactionInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(webConnectionTransactionInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateTransactionForAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateTransactionForAddressApiResponse>();

                        CreateTransactionForAddressApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/connector/web-connection/transaction", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateTransactionForAddressDefaultImplementation(apiResponseLocalVar, webConnectionTransactionInput);

                        Events.ExecuteOnCreateTransactionForAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateTransactionForAddressDefaultImplementation(e, "/v1/player/connector/web-connection/transaction", uriBuilderLocalVar.Path, webConnectionTransactionInput);
                Events.ExecuteOnErrorCreateTransactionForAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateTransactionForAddressApiResponse"/>
        /// </summary>
        public partial class CreateTransactionForAddressApiResponse : BeamPlayerClient.Client.ApiResponse, ICreateTransactionForAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateTransactionForAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateTransactionForAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateTransactionForAddressApiResponse(ILogger<CreateTransactionForAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.CommonOperationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateWebConnectionOperation(WebConnectionCreateOperationInput webConnectionCreateOperationInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="webConnectionCreateOperationInput"></param>
        /// <returns></returns>
        private void ValidateCreateWebConnectionOperation(WebConnectionCreateOperationInput webConnectionCreateOperationInput)
        {
            if (webConnectionCreateOperationInput == null)
                throw new ArgumentNullException(nameof(webConnectionCreateOperationInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionCreateOperationInput"></param>
        private void AfterCreateWebConnectionOperationDefaultImplementation(ICreateWebConnectionOperationApiResponse apiResponseLocalVar, WebConnectionCreateOperationInput webConnectionCreateOperationInput)
        {
            bool suppressDefaultLog = false;
            AfterCreateWebConnectionOperation(ref suppressDefaultLog, apiResponseLocalVar, webConnectionCreateOperationInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionCreateOperationInput"></param>
        partial void AfterCreateWebConnectionOperation(ref bool suppressDefaultLog, ICreateWebConnectionOperationApiResponse apiResponseLocalVar, WebConnectionCreateOperationInput webConnectionCreateOperationInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionCreateOperationInput"></param>
        private void OnErrorCreateWebConnectionOperationDefaultImplementation(Exception exception, string pathFormat, string path, WebConnectionCreateOperationInput webConnectionCreateOperationInput)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateWebConnectionOperation(ref suppressDefaultLog, exception, pathFormat, path, webConnectionCreateOperationInput);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionCreateOperationInput"></param>
        partial void OnErrorCreateWebConnectionOperation(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, WebConnectionCreateOperationInput webConnectionCreateOperationInput);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="webConnectionCreateOperationInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebConnectionOperationApiResponse"/>&gt;</returns>
        public async Task<ICreateWebConnectionOperationApiResponse?> CreateWebConnectionOperationOrDefaultAsync(WebConnectionCreateOperationInput webConnectionCreateOperationInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateWebConnectionOperationAsync(webConnectionCreateOperationInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionCreateOperationInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateWebConnectionOperationApiResponse"/>&gt;</returns>
        public async Task<ICreateWebConnectionOperationApiResponse> CreateWebConnectionOperationAsync(WebConnectionCreateOperationInput webConnectionCreateOperationInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateWebConnectionOperation(webConnectionCreateOperationInput);

                FormatCreateWebConnectionOperation(webConnectionCreateOperationInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/connector/web-connection/operation";

                    httpRequestMessageLocalVar.Content = (webConnectionCreateOperationInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(webConnectionCreateOperationInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateWebConnectionOperationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateWebConnectionOperationApiResponse>();

                        CreateWebConnectionOperationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/connector/web-connection/operation", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateWebConnectionOperationDefaultImplementation(apiResponseLocalVar, webConnectionCreateOperationInput);

                        Events.ExecuteOnCreateWebConnectionOperation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateWebConnectionOperationDefaultImplementation(e, "/v1/player/connector/web-connection/operation", uriBuilderLocalVar.Path, webConnectionCreateOperationInput);
                Events.ExecuteOnErrorCreateWebConnectionOperation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateWebConnectionOperationApiResponse"/>
        /// </summary>
        public partial class CreateWebConnectionOperationApiResponse : BeamPlayerClient.Client.ApiResponse, ICreateWebConnectionOperationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateWebConnectionOperationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateWebConnectionOperationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateWebConnectionOperationApiResponse(ILogger<CreateWebConnectionOperationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.CommonOperationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGenerateWebConnection(WebConnectionRequestInput webConnectionRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="webConnectionRequestInput"></param>
        /// <returns></returns>
        private void ValidateGenerateWebConnection(WebConnectionRequestInput webConnectionRequestInput)
        {
            if (webConnectionRequestInput == null)
                throw new ArgumentNullException(nameof(webConnectionRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionRequestInput"></param>
        private void AfterGenerateWebConnectionDefaultImplementation(IGenerateWebConnectionApiResponse apiResponseLocalVar, WebConnectionRequestInput webConnectionRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterGenerateWebConnection(ref suppressDefaultLog, apiResponseLocalVar, webConnectionRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionRequestInput"></param>
        partial void AfterGenerateWebConnection(ref bool suppressDefaultLog, IGenerateWebConnectionApiResponse apiResponseLocalVar, WebConnectionRequestInput webConnectionRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionRequestInput"></param>
        private void OnErrorGenerateWebConnectionDefaultImplementation(Exception exception, string pathFormat, string path, WebConnectionRequestInput webConnectionRequestInput)
        {
            bool suppressDefaultLog = false;
            OnErrorGenerateWebConnection(ref suppressDefaultLog, exception, pathFormat, path, webConnectionRequestInput);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionRequestInput"></param>
        partial void OnErrorGenerateWebConnection(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, WebConnectionRequestInput webConnectionRequestInput);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="webConnectionRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateWebConnectionApiResponse"/>&gt;</returns>
        public async Task<IGenerateWebConnectionApiResponse?> GenerateWebConnectionOrDefaultAsync(WebConnectionRequestInput webConnectionRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GenerateWebConnectionAsync(webConnectionRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGenerateWebConnectionApiResponse"/>&gt;</returns>
        public async Task<IGenerateWebConnectionApiResponse> GenerateWebConnectionAsync(WebConnectionRequestInput webConnectionRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGenerateWebConnection(webConnectionRequestInput);

                FormatGenerateWebConnection(webConnectionRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/connector/web-connection";

                    httpRequestMessageLocalVar.Content = (webConnectionRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(webConnectionRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GenerateWebConnectionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GenerateWebConnectionApiResponse>();

                        GenerateWebConnectionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/connector/web-connection", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGenerateWebConnectionDefaultImplementation(apiResponseLocalVar, webConnectionRequestInput);

                        Events.ExecuteOnGenerateWebConnection(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGenerateWebConnectionDefaultImplementation(e, "/v1/player/connector/web-connection", uriBuilderLocalVar.Path, webConnectionRequestInput);
                Events.ExecuteOnErrorGenerateWebConnection(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GenerateWebConnectionApiResponse"/>
        /// </summary>
        public partial class GenerateWebConnectionApiResponse : BeamPlayerClient.Client.ApiResponse, IGenerateWebConnectionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GenerateWebConnectionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GenerateWebConnectionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GenerateWebConnectionApiResponse(ILogger<GenerateWebConnectionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.WebConnectionRequestResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.WebConnectionRequestResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.WebConnectionRequestResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetConnectionRequest(ref string requestId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="requestId"></param>
        /// <returns></returns>
        private void ValidateGetConnectionRequest(string requestId)
        {
            if (requestId == null)
                throw new ArgumentNullException(nameof(requestId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestId"></param>
        private void AfterGetConnectionRequestDefaultImplementation(IGetConnectionRequestApiResponse apiResponseLocalVar, string requestId)
        {
            bool suppressDefaultLog = false;
            AfterGetConnectionRequest(ref suppressDefaultLog, apiResponseLocalVar, requestId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="requestId"></param>
        partial void AfterGetConnectionRequest(ref bool suppressDefaultLog, IGetConnectionRequestApiResponse apiResponseLocalVar, string requestId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requestId"></param>
        private void OnErrorGetConnectionRequestDefaultImplementation(Exception exception, string pathFormat, string path, string requestId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetConnectionRequest(ref suppressDefaultLog, exception, pathFormat, path, requestId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="requestId"></param>
        partial void OnErrorGetConnectionRequest(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string requestId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectionRequestApiResponse"/>&gt;</returns>
        public async Task<IGetConnectionRequestApiResponse?> GetConnectionRequestOrDefaultAsync(string requestId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetConnectionRequestAsync(requestId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetConnectionRequestApiResponse"/>&gt;</returns>
        public async Task<IGetConnectionRequestApiResponse> GetConnectionRequestAsync(string requestId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetConnectionRequest(requestId);

                FormatGetConnectionRequest(ref requestId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/connector/{requestId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BrequestId%7D", Uri.EscapeDataString(requestId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetConnectionRequestApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetConnectionRequestApiResponse>();

                        GetConnectionRequestApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/connector/{requestId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetConnectionRequestDefaultImplementation(apiResponseLocalVar, requestId);

                        Events.ExecuteOnGetConnectionRequest(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetConnectionRequestDefaultImplementation(e, "/v1/player/connector/{requestId}", uriBuilderLocalVar.Path, requestId);
                Events.ExecuteOnErrorGetConnectionRequest(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetConnectionRequestApiResponse"/>
        /// </summary>
        public partial class GetConnectionRequestApiResponse : BeamPlayerClient.Client.ApiResponse, IGetConnectionRequestApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetConnectionRequestApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetConnectionRequestApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetConnectionRequestApiResponse(ILogger<GetConnectionRequestApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.GetConnectionRequestResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.GetConnectionRequestResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.GetConnectionRequestResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRevokeSessionByAccountAddress(WebConnectionRevokeSessionInput webConnectionRevokeSessionInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="webConnectionRevokeSessionInput"></param>
        /// <returns></returns>
        private void ValidateRevokeSessionByAccountAddress(WebConnectionRevokeSessionInput webConnectionRevokeSessionInput)
        {
            if (webConnectionRevokeSessionInput == null)
                throw new ArgumentNullException(nameof(webConnectionRevokeSessionInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionRevokeSessionInput"></param>
        private void AfterRevokeSessionByAccountAddressDefaultImplementation(IRevokeSessionByAccountAddressApiResponse apiResponseLocalVar, WebConnectionRevokeSessionInput webConnectionRevokeSessionInput)
        {
            bool suppressDefaultLog = false;
            AfterRevokeSessionByAccountAddress(ref suppressDefaultLog, apiResponseLocalVar, webConnectionRevokeSessionInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionRevokeSessionInput"></param>
        partial void AfterRevokeSessionByAccountAddress(ref bool suppressDefaultLog, IRevokeSessionByAccountAddressApiResponse apiResponseLocalVar, WebConnectionRevokeSessionInput webConnectionRevokeSessionInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionRevokeSessionInput"></param>
        private void OnErrorRevokeSessionByAccountAddressDefaultImplementation(Exception exception, string pathFormat, string path, WebConnectionRevokeSessionInput webConnectionRevokeSessionInput)
        {
            bool suppressDefaultLog = false;
            OnErrorRevokeSessionByAccountAddress(ref suppressDefaultLog, exception, pathFormat, path, webConnectionRevokeSessionInput);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionRevokeSessionInput"></param>
        partial void OnErrorRevokeSessionByAccountAddress(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, WebConnectionRevokeSessionInput webConnectionRevokeSessionInput);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="webConnectionRevokeSessionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeSessionByAccountAddressApiResponse"/>&gt;</returns>
        public async Task<IRevokeSessionByAccountAddressApiResponse?> RevokeSessionByAccountAddressOrDefaultAsync(WebConnectionRevokeSessionInput webConnectionRevokeSessionInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RevokeSessionByAccountAddressAsync(webConnectionRevokeSessionInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionRevokeSessionInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeSessionByAccountAddressApiResponse"/>&gt;</returns>
        public async Task<IRevokeSessionByAccountAddressApiResponse> RevokeSessionByAccountAddressAsync(WebConnectionRevokeSessionInput webConnectionRevokeSessionInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRevokeSessionByAccountAddress(webConnectionRevokeSessionInput);

                FormatRevokeSessionByAccountAddress(webConnectionRevokeSessionInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/connector/web-connection/session/revoke";

                    httpRequestMessageLocalVar.Content = (webConnectionRevokeSessionInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(webConnectionRevokeSessionInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RevokeSessionByAccountAddressApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RevokeSessionByAccountAddressApiResponse>();

                        RevokeSessionByAccountAddressApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/connector/web-connection/session/revoke", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRevokeSessionByAccountAddressDefaultImplementation(apiResponseLocalVar, webConnectionRevokeSessionInput);

                        Events.ExecuteOnRevokeSessionByAccountAddress(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRevokeSessionByAccountAddressDefaultImplementation(e, "/v1/player/connector/web-connection/session/revoke", uriBuilderLocalVar.Path, webConnectionRevokeSessionInput);
                Events.ExecuteOnErrorRevokeSessionByAccountAddress(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RevokeSessionByAccountAddressApiResponse"/>
        /// </summary>
        public partial class RevokeSessionByAccountAddressApiResponse : BeamPlayerClient.Client.ApiResponse, IRevokeSessionByAccountAddressApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RevokeSessionByAccountAddressApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RevokeSessionByAccountAddressApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RevokeSessionByAccountAddressApiResponse(ILogger<RevokeSessionByAccountAddressApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.CommonOperationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.CommonOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.CommonOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatVerifyOwnership(WebConnectionVerifyRequestInput webConnectionVerifyRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="webConnectionVerifyRequestInput"></param>
        /// <returns></returns>
        private void ValidateVerifyOwnership(WebConnectionVerifyRequestInput webConnectionVerifyRequestInput)
        {
            if (webConnectionVerifyRequestInput == null)
                throw new ArgumentNullException(nameof(webConnectionVerifyRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionVerifyRequestInput"></param>
        private void AfterVerifyOwnershipDefaultImplementation(IVerifyOwnershipApiResponse apiResponseLocalVar, WebConnectionVerifyRequestInput webConnectionVerifyRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterVerifyOwnership(ref suppressDefaultLog, apiResponseLocalVar, webConnectionVerifyRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="webConnectionVerifyRequestInput"></param>
        partial void AfterVerifyOwnership(ref bool suppressDefaultLog, IVerifyOwnershipApiResponse apiResponseLocalVar, WebConnectionVerifyRequestInput webConnectionVerifyRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionVerifyRequestInput"></param>
        private void OnErrorVerifyOwnershipDefaultImplementation(Exception exception, string pathFormat, string path, WebConnectionVerifyRequestInput webConnectionVerifyRequestInput)
        {
            bool suppressDefaultLog = false;
            OnErrorVerifyOwnership(ref suppressDefaultLog, exception, pathFormat, path, webConnectionVerifyRequestInput);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="webConnectionVerifyRequestInput"></param>
        partial void OnErrorVerifyOwnership(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, WebConnectionVerifyRequestInput webConnectionVerifyRequestInput);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="webConnectionVerifyRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyOwnershipApiResponse"/>&gt;</returns>
        public async Task<IVerifyOwnershipApiResponse?> VerifyOwnershipOrDefaultAsync(WebConnectionVerifyRequestInput webConnectionVerifyRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await VerifyOwnershipAsync(webConnectionVerifyRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="webConnectionVerifyRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IVerifyOwnershipApiResponse"/>&gt;</returns>
        public async Task<IVerifyOwnershipApiResponse> VerifyOwnershipAsync(WebConnectionVerifyRequestInput webConnectionVerifyRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateVerifyOwnership(webConnectionVerifyRequestInput);

                FormatVerifyOwnership(webConnectionVerifyRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/connector/web-connection/user/verify";

                    httpRequestMessageLocalVar.Content = (webConnectionVerifyRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(webConnectionVerifyRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<VerifyOwnershipApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<VerifyOwnershipApiResponse>();

                        VerifyOwnershipApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/connector/web-connection/user/verify", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterVerifyOwnershipDefaultImplementation(apiResponseLocalVar, webConnectionVerifyRequestInput);

                        Events.ExecuteOnVerifyOwnership(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorVerifyOwnershipDefaultImplementation(e, "/v1/player/connector/web-connection/user/verify", uriBuilderLocalVar.Path, webConnectionVerifyRequestInput);
                Events.ExecuteOnErrorVerifyOwnership(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="VerifyOwnershipApiResponse"/>
        /// </summary>
        public partial class VerifyOwnershipApiResponse : BeamPlayerClient.Client.ApiResponse, IVerifyOwnershipApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<VerifyOwnershipApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="VerifyOwnershipApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public VerifyOwnershipApiResponse(ILogger<VerifyOwnershipApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.WebConnectionVerifyRequestResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.WebConnectionVerifyRequestResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.WebConnectionVerifyRequestResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
