// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamPlayerClient.Client;
using BeamPlayerClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamPlayerClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPlayerStatsApi : IPlayerApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PlayerStatsApiEvents Events { get; }

        /// <summary>
        /// Get asset stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetStatsApiResponse"/>&gt;</returns>
        Task<IGetAssetStatsApiResponse> GetAssetStatsAsync(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, string assetId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get asset stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetStatsApiResponse"/>?&gt;</returns>
        Task<IGetAssetStatsApiResponse?> GetAssetStatsOrDefaultAsync(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, string assetId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get contract stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractStatsApiResponse"/>&gt;</returns>
        Task<IGetContractStatsApiResponse> GetContractStatsAsync(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get contract stats
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractStatsApiResponse"/>?&gt;</returns>
        Task<IGetContractStatsApiResponse?> GetContractStatsOrDefaultAsync(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAssetStatsApiResponse"/>
    /// </summary>
    public interface IGetAssetStatsApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.PlayerCommonStatsResponse?>, ICustomHttpStatusCode4xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>, ICustomHttpStatusCode5xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX CustomHttpStatusCode4xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode4xx { get; }

        /// <summary>
        /// Returns true if the response is 5XX CustomHttpStatusCode5xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode5xx { get; }
    }

    /// <summary>
    /// The <see cref="IGetContractStatsApiResponse"/>
    /// </summary>
    public interface IGetContractStatsApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.PlayerCommonStatsResponse?>, ICustomHttpStatusCode4xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>, ICustomHttpStatusCode5xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX CustomHttpStatusCode4xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode4xx { get; }

        /// <summary>
        /// Returns true if the response is 5XX CustomHttpStatusCode5xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode5xx { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PlayerStatsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAssetStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAssetStats;

        internal void ExecuteOnGetAssetStats(PlayerStatsApi.GetAssetStatsApiResponse apiResponse)
        {
            OnGetAssetStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetStats(Exception exception)
        {
            OnErrorGetAssetStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetContractStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetContractStats;

        internal void ExecuteOnGetContractStats(PlayerStatsApi.GetContractStatsApiResponse apiResponse)
        {
            OnGetContractStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContractStats(Exception exception)
        {
            OnErrorGetContractStats?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PlayerStatsApi : IPlayerStatsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PlayerStatsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PlayerStatsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<PlayerApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerStatsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayerStatsApi(ILogger<PlayerStatsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, PlayerJsonSerializerOptionsProvider jsonSerializerOptionsProvider, PlayerStatsApiEvents playerStatsApiEvents,
            TokenProvider<PlayerApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PlayerStatsApi>();
            HttpClient = httpClient;
            Events = playerStatsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetAssetStats(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, ref string assetAddress, ref string assetId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <returns></returns>
        private void ValidateGetAssetStats(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, string assetId)
        {
            if (playerCommonStatsRequestInput == null)
                throw new ArgumentNullException(nameof(playerCommonStatsRequestInput));

            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        private void AfterGetAssetStatsDefaultImplementation(IGetAssetStatsApiResponse apiResponseLocalVar, PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, string assetId)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetStats(ref suppressDefaultLog, apiResponseLocalVar, playerCommonStatsRequestInput, assetAddress, assetId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        partial void AfterGetAssetStats(ref bool suppressDefaultLog, IGetAssetStatsApiResponse apiResponseLocalVar, PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, string assetId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        private void OnErrorGetAssetStatsDefaultImplementation(Exception exception, string pathFormat, string path, PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, string assetId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetAssetStats(ref suppressDefaultLog, exception, pathFormat, path, playerCommonStatsRequestInput, assetAddress, assetId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        partial void OnErrorGetAssetStats(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, string assetId);

        /// <summary>
        /// Get asset stats 
        /// </summary>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAssetStatsApiResponse?> GetAssetStatsOrDefaultAsync(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, string assetId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetStatsAsync(playerCommonStatsRequestInput, assetAddress, assetId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get asset stats 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetStatsApiResponse"/>&gt;</returns>
        public async Task<IGetAssetStatsApiResponse> GetAssetStatsAsync(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, string assetId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetStats(playerCommonStatsRequestInput, assetAddress, assetId);

                FormatGetAssetStats(playerCommonStatsRequestInput, ref assetAddress, ref assetId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/stats/{assetAddress}/assets/{assetId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetId%7D", Uri.EscapeDataString(assetId.ToString()));

                    httpRequestMessageLocalVar.Content = (playerCommonStatsRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(playerCommonStatsRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    PlayerApiKeyToken apiKeyTokenLocalVar1 = (PlayerApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetStatsApiResponse>();

                        GetAssetStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/stats/{assetAddress}/assets/{assetId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetStatsDefaultImplementation(apiResponseLocalVar, playerCommonStatsRequestInput, assetAddress, assetId);

                        Events.ExecuteOnGetAssetStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetStatsDefaultImplementation(e, "/v1/player/stats/{assetAddress}/assets/{assetId}", uriBuilderLocalVar.Path, playerCommonStatsRequestInput, assetAddress, assetId);
                Events.ExecuteOnErrorGetAssetStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetStatsApiResponse"/>
        /// </summary>
        public partial class GetAssetStatsApiResponse : BeamPlayerClient.Client.ApiResponse, IGetAssetStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetStatsApiResponse(ILogger<GetAssetStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerCommonStatsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerCommonStatsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerCommonStatsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode4xx => 4XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode4xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode4xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode4xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode4xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4XX);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode5xx => 5XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode5xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode5xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode5xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode5xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5XX);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContractStats(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, ref string assetAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <returns></returns>
        private void ValidateGetContractStats(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress)
        {
            if (playerCommonStatsRequestInput == null)
                throw new ArgumentNullException(nameof(playerCommonStatsRequestInput));

            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        private void AfterGetContractStatsDefaultImplementation(IGetContractStatsApiResponse apiResponseLocalVar, PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress)
        {
            bool suppressDefaultLog = false;
            AfterGetContractStats(ref suppressDefaultLog, apiResponseLocalVar, playerCommonStatsRequestInput, assetAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        partial void AfterGetContractStats(ref bool suppressDefaultLog, IGetContractStatsApiResponse apiResponseLocalVar, PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        private void OnErrorGetContractStatsDefaultImplementation(Exception exception, string pathFormat, string path, PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress)
        {
            bool suppressDefaultLog = false;
            OnErrorGetContractStats(ref suppressDefaultLog, exception, pathFormat, path, playerCommonStatsRequestInput, assetAddress);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        partial void OnErrorGetContractStats(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress);

        /// <summary>
        /// Get contract stats 
        /// </summary>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractStatsApiResponse"/>&gt;</returns>
        public async Task<IGetContractStatsApiResponse?> GetContractStatsOrDefaultAsync(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContractStatsAsync(playerCommonStatsRequestInput, assetAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get contract stats 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerCommonStatsRequestInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractStatsApiResponse"/>&gt;</returns>
        public async Task<IGetContractStatsApiResponse> GetContractStatsAsync(PlayerCommonStatsRequestInput playerCommonStatsRequestInput, string assetAddress, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContractStats(playerCommonStatsRequestInput, assetAddress);

                FormatGetContractStats(playerCommonStatsRequestInput, ref assetAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/stats/{assetAddress}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));

                    httpRequestMessageLocalVar.Content = (playerCommonStatsRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(playerCommonStatsRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    PlayerApiKeyToken apiKeyTokenLocalVar1 = (PlayerApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContractStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContractStatsApiResponse>();

                        GetContractStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/stats/{assetAddress}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContractStatsDefaultImplementation(apiResponseLocalVar, playerCommonStatsRequestInput, assetAddress);

                        Events.ExecuteOnGetContractStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContractStatsDefaultImplementation(e, "/v1/player/stats/{assetAddress}", uriBuilderLocalVar.Path, playerCommonStatsRequestInput, assetAddress);
                Events.ExecuteOnErrorGetContractStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContractStatsApiResponse"/>
        /// </summary>
        public partial class GetContractStatsApiResponse : BeamPlayerClient.Client.ApiResponse, IGetContractStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContractStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContractStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContractStatsApiResponse(ILogger<GetContractStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerCommonStatsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerCommonStatsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerCommonStatsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode4xx => 4XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode4xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode4xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode4xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode4xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4XX);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode5xx => 5XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode5xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode5xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode5xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode5xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5XX);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
