// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamPlayerClient.Client;
using BeamPlayerClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamPlayerClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPlayerExchangeApi : IPlayerApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PlayerExchangeApiEvents Events { get; }

        /// <summary>
        /// Swap an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConvertInputApiResponse"/>&gt;</returns>
        Task<IConvertInputApiResponse> ConvertInputAsync(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Swap an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConvertInputApiResponse"/>?&gt;</returns>
        Task<IConvertInputApiResponse?> ConvertInputOrDefaultAsync(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConvertToOutputApiResponse"/>&gt;</returns>
        Task<IConvertToOutputApiResponse> ConvertToOutputAsync(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConvertToOutputApiResponse"/>?&gt;</returns>
        Task<IConvertToOutputApiResponse?> ConvertToOutputOrDefaultAsync(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuoteForInputApiResponse"/>&gt;</returns>
        Task<IGetQuoteForInputApiResponse> GetQuoteForInputAsync(string tokenIn, string tokenOut, string amountOut, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuoteForInputApiResponse"/>?&gt;</returns>
        Task<IGetQuoteForInputApiResponse?> GetQuoteForInputOrDefaultAsync(string tokenIn, string tokenOut, string amountOut, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuoteForOutputApiResponse"/>&gt;</returns>
        Task<IGetQuoteForOutputApiResponse> GetQuoteForOutputAsync(string tokenIn, string tokenOut, string amountIn, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuoteForOutputApiResponse"/>?&gt;</returns>
        Task<IGetQuoteForOutputApiResponse?> GetQuoteForOutputOrDefaultAsync(string tokenIn, string tokenOut, string amountIn, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unwrap an amount of wrapped to native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUnwrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnwrapNativeApiResponse"/>&gt;</returns>
        Task<IUnwrapNativeApiResponse> UnwrapNativeAsync(PlayerUnwrappingTokenInput playerUnwrappingTokenInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Unwrap an amount of wrapped to native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="playerUnwrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnwrapNativeApiResponse"/>?&gt;</returns>
        Task<IUnwrapNativeApiResponse?> UnwrapNativeOrDefaultAsync(PlayerUnwrappingTokenInput playerUnwrappingTokenInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Wrap an amount of native token to wrapped native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerWrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWrapNativeApiResponse"/>&gt;</returns>
        Task<IWrapNativeApiResponse> WrapNativeAsync(PlayerWrappingTokenInput playerWrappingTokenInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Wrap an amount of native token to wrapped native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="playerWrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWrapNativeApiResponse"/>?&gt;</returns>
        Task<IWrapNativeApiResponse?> WrapNativeOrDefaultAsync(PlayerWrappingTokenInput playerWrappingTokenInput, string entityId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IConvertInputApiResponse"/>
    /// </summary>
    public interface IConvertInputApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.PlayerPlayerOperationResponse?>, ICustomHttpStatusCode4xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>, ICustomHttpStatusCode5xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX CustomHttpStatusCode4xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode4xx { get; }

        /// <summary>
        /// Returns true if the response is 5XX CustomHttpStatusCode5xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode5xx { get; }
    }

    /// <summary>
    /// The <see cref="IConvertToOutputApiResponse"/>
    /// </summary>
    public interface IConvertToOutputApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.PlayerPlayerOperationResponse?>, ICustomHttpStatusCode4xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>, ICustomHttpStatusCode5xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX CustomHttpStatusCode4xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode4xx { get; }

        /// <summary>
        /// Returns true if the response is 5XX CustomHttpStatusCode5xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode5xx { get; }
    }

    /// <summary>
    /// The <see cref="IGetQuoteForInputApiResponse"/>
    /// </summary>
    public interface IGetQuoteForInputApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.PlayerGetQuoteResponse?>, ICustomHttpStatusCode4xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>, ICustomHttpStatusCode5xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX CustomHttpStatusCode4xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode4xx { get; }

        /// <summary>
        /// Returns true if the response is 5XX CustomHttpStatusCode5xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode5xx { get; }
    }

    /// <summary>
    /// The <see cref="IGetQuoteForOutputApiResponse"/>
    /// </summary>
    public interface IGetQuoteForOutputApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.PlayerGetQuoteResponse?>, ICustomHttpStatusCode4xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>, ICustomHttpStatusCode5xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX CustomHttpStatusCode4xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode4xx { get; }

        /// <summary>
        /// Returns true if the response is 5XX CustomHttpStatusCode5xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode5xx { get; }
    }

    /// <summary>
    /// The <see cref="IUnwrapNativeApiResponse"/>
    /// </summary>
    public interface IUnwrapNativeApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.PlayerPlayerOperationResponse?>, ICustomHttpStatusCode4xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>, ICustomHttpStatusCode5xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX CustomHttpStatusCode4xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode4xx { get; }

        /// <summary>
        /// Returns true if the response is 5XX CustomHttpStatusCode5xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode5xx { get; }
    }

    /// <summary>
    /// The <see cref="IWrapNativeApiResponse"/>
    /// </summary>
    public interface IWrapNativeApiResponse : BeamPlayerClient.Client.IApiResponse, IOk<BeamPlayerClient.Model.PlayerPlayerOperationResponse?>, ICustomHttpStatusCode4xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>, ICustomHttpStatusCode5xx<BeamPlayerClient.Model.PlayerBeamErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX CustomHttpStatusCode4xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode4xx { get; }

        /// <summary>
        /// Returns true if the response is 5XX CustomHttpStatusCode5xx
        /// </summary>
        /// <returns></returns>
        bool IsCustomHttpStatusCode5xx { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PlayerExchangeApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnConvertInput;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorConvertInput;

        internal void ExecuteOnConvertInput(PlayerExchangeApi.ConvertInputApiResponse apiResponse)
        {
            OnConvertInput?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorConvertInput(Exception exception)
        {
            OnErrorConvertInput?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnConvertToOutput;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorConvertToOutput;

        internal void ExecuteOnConvertToOutput(PlayerExchangeApi.ConvertToOutputApiResponse apiResponse)
        {
            OnConvertToOutput?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorConvertToOutput(Exception exception)
        {
            OnErrorConvertToOutput?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetQuoteForInput;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetQuoteForInput;

        internal void ExecuteOnGetQuoteForInput(PlayerExchangeApi.GetQuoteForInputApiResponse apiResponse)
        {
            OnGetQuoteForInput?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetQuoteForInput(Exception exception)
        {
            OnErrorGetQuoteForInput?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetQuoteForOutput;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetQuoteForOutput;

        internal void ExecuteOnGetQuoteForOutput(PlayerExchangeApi.GetQuoteForOutputApiResponse apiResponse)
        {
            OnGetQuoteForOutput?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetQuoteForOutput(Exception exception)
        {
            OnErrorGetQuoteForOutput?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUnwrapNative;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUnwrapNative;

        internal void ExecuteOnUnwrapNative(PlayerExchangeApi.UnwrapNativeApiResponse apiResponse)
        {
            OnUnwrapNative?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUnwrapNative(Exception exception)
        {
            OnErrorUnwrapNative?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnWrapNative;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorWrapNative;

        internal void ExecuteOnWrapNative(PlayerExchangeApi.WrapNativeApiResponse apiResponse)
        {
            OnWrapNative?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorWrapNative(Exception exception)
        {
            OnErrorWrapNative?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PlayerExchangeApi : IPlayerExchangeApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PlayerExchangeApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PlayerExchangeApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<PlayerApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerExchangeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayerExchangeApi(ILogger<PlayerExchangeApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, PlayerJsonSerializerOptionsProvider jsonSerializerOptionsProvider, PlayerExchangeApiEvents playerExchangeApiEvents,
            TokenProvider<PlayerApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PlayerExchangeApi>();
            HttpClient = httpClient;
            Events = playerExchangeApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatConvertInput(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateConvertInput(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId)
        {
            if (playerConvertTokenRequestInput == null)
                throw new ArgumentNullException(nameof(playerConvertTokenRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterConvertInputDefaultImplementation(IConvertInputApiResponse apiResponseLocalVar, PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterConvertInput(ref suppressDefaultLog, apiResponseLocalVar, playerConvertTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterConvertInput(ref bool suppressDefaultLog, IConvertInputApiResponse apiResponseLocalVar, PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorConvertInputDefaultImplementation(Exception exception, string pathFormat, string path, PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorConvertInput(ref suppressDefaultLog, exception, pathFormat, path, playerConvertTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorConvertInput(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId);

        /// <summary>
        /// Swap an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConvertInputApiResponse"/>&gt;</returns>
        public async Task<IConvertInputApiResponse?> ConvertInputOrDefaultAsync(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ConvertInputAsync(playerConvertTokenRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Swap an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConvertInputApiResponse"/>&gt;</returns>
        public async Task<IConvertInputApiResponse> ConvertInputAsync(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateConvertInput(playerConvertTokenRequestInput, entityId);

                FormatConvertInput(playerConvertTokenRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/exchange/users/{entityId}/convert/input";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (playerConvertTokenRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(playerConvertTokenRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    PlayerApiKeyToken apiKeyTokenLocalVar1 = (PlayerApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ConvertInputApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ConvertInputApiResponse>();

                        ConvertInputApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/exchange/users/{entityId}/convert/input", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterConvertInputDefaultImplementation(apiResponseLocalVar, playerConvertTokenRequestInput, entityId);

                        Events.ExecuteOnConvertInput(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorConvertInputDefaultImplementation(e, "/v1/player/exchange/users/{entityId}/convert/input", uriBuilderLocalVar.Path, playerConvertTokenRequestInput, entityId);
                Events.ExecuteOnErrorConvertInput(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ConvertInputApiResponse"/>
        /// </summary>
        public partial class ConvertInputApiResponse : BeamPlayerClient.Client.ApiResponse, IConvertInputApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ConvertInputApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ConvertInputApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ConvertInputApiResponse(ILogger<ConvertInputApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerPlayerOperationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerPlayerOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerPlayerOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode4xx => 4XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode4xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode4xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode4xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode4xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4XX);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode5xx => 5XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode5xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode5xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode5xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode5xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5XX);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatConvertToOutput(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateConvertToOutput(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId)
        {
            if (playerConvertTokenRequestInput == null)
                throw new ArgumentNullException(nameof(playerConvertTokenRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterConvertToOutputDefaultImplementation(IConvertToOutputApiResponse apiResponseLocalVar, PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterConvertToOutput(ref suppressDefaultLog, apiResponseLocalVar, playerConvertTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterConvertToOutput(ref bool suppressDefaultLog, IConvertToOutputApiResponse apiResponseLocalVar, PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorConvertToOutputDefaultImplementation(Exception exception, string pathFormat, string path, PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorConvertToOutput(ref suppressDefaultLog, exception, pathFormat, path, playerConvertTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorConvertToOutput(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId);

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConvertToOutputApiResponse"/>&gt;</returns>
        public async Task<IConvertToOutputApiResponse?> ConvertToOutputOrDefaultAsync(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ConvertToOutputAsync(playerConvertTokenRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerConvertTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConvertToOutputApiResponse"/>&gt;</returns>
        public async Task<IConvertToOutputApiResponse> ConvertToOutputAsync(PlayerConvertTokenRequestInput playerConvertTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateConvertToOutput(playerConvertTokenRequestInput, entityId);

                FormatConvertToOutput(playerConvertTokenRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/exchange/users/{entityId}/convert/output";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (playerConvertTokenRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(playerConvertTokenRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    PlayerApiKeyToken apiKeyTokenLocalVar1 = (PlayerApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ConvertToOutputApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ConvertToOutputApiResponse>();

                        ConvertToOutputApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/exchange/users/{entityId}/convert/output", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterConvertToOutputDefaultImplementation(apiResponseLocalVar, playerConvertTokenRequestInput, entityId);

                        Events.ExecuteOnConvertToOutput(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorConvertToOutputDefaultImplementation(e, "/v1/player/exchange/users/{entityId}/convert/output", uriBuilderLocalVar.Path, playerConvertTokenRequestInput, entityId);
                Events.ExecuteOnErrorConvertToOutput(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ConvertToOutputApiResponse"/>
        /// </summary>
        public partial class ConvertToOutputApiResponse : BeamPlayerClient.Client.ApiResponse, IConvertToOutputApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ConvertToOutputApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ConvertToOutputApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ConvertToOutputApiResponse(ILogger<ConvertToOutputApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerPlayerOperationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerPlayerOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerPlayerOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode4xx => 4XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode4xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode4xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode4xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode4xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4XX);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode5xx => 5XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode5xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode5xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode5xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode5xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5XX);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetQuoteForInput(ref string tokenIn, ref string tokenOut, ref string amountOut, ref Option<long> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <returns></returns>
        private void ValidateGetQuoteForInput(string tokenIn, string tokenOut, string amountOut)
        {
            if (tokenIn == null)
                throw new ArgumentNullException(nameof(tokenIn));

            if (tokenOut == null)
                throw new ArgumentNullException(nameof(tokenOut));

            if (amountOut == null)
                throw new ArgumentNullException(nameof(amountOut));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"></param>
        private void AfterGetQuoteForInputDefaultImplementation(IGetQuoteForInputApiResponse apiResponseLocalVar, string tokenIn, string tokenOut, string amountOut, Option<long> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetQuoteForInput(ref suppressDefaultLog, apiResponseLocalVar, tokenIn, tokenOut, amountOut, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"></param>
        partial void AfterGetQuoteForInput(ref bool suppressDefaultLog, IGetQuoteForInputApiResponse apiResponseLocalVar, string tokenIn, string tokenOut, string amountOut, Option<long> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetQuoteForInputDefaultImplementation(Exception exception, string pathFormat, string path, string tokenIn, string tokenOut, string amountOut, Option<long> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetQuoteForInput(ref suppressDefaultLog, exception, pathFormat, path, tokenIn, tokenOut, amountOut, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetQuoteForInput(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string tokenIn, string tokenOut, string amountOut, Option<long> chainId);

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount 
        /// </summary>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuoteForInputApiResponse"/>&gt;</returns>
        public async Task<IGetQuoteForInputApiResponse?> GetQuoteForInputOrDefaultAsync(string tokenIn, string tokenOut, string amountOut, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetQuoteForInputAsync(tokenIn, tokenOut, amountOut, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuoteForInputApiResponse"/>&gt;</returns>
        public async Task<IGetQuoteForInputApiResponse> GetQuoteForInputAsync(string tokenIn, string tokenOut, string amountOut, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetQuoteForInput(tokenIn, tokenOut, amountOut);

                FormatGetQuoteForInput(ref tokenIn, ref tokenOut, ref amountOut, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/exchange/quote/input";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["tokenIn"] = tokenIn.ToString();
                    parseQueryStringLocalVar["tokenOut"] = tokenOut.ToString();
                    parseQueryStringLocalVar["amountOut"] = amountOut.ToString();

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    PlayerApiKeyToken apiKeyTokenLocalVar1 = (PlayerApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetQuoteForInputApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetQuoteForInputApiResponse>();

                        GetQuoteForInputApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/exchange/quote/input", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetQuoteForInputDefaultImplementation(apiResponseLocalVar, tokenIn, tokenOut, amountOut, chainId);

                        Events.ExecuteOnGetQuoteForInput(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetQuoteForInputDefaultImplementation(e, "/v1/player/exchange/quote/input", uriBuilderLocalVar.Path, tokenIn, tokenOut, amountOut, chainId);
                Events.ExecuteOnErrorGetQuoteForInput(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetQuoteForInputApiResponse"/>
        /// </summary>
        public partial class GetQuoteForInputApiResponse : BeamPlayerClient.Client.ApiResponse, IGetQuoteForInputApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetQuoteForInputApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetQuoteForInputApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetQuoteForInputApiResponse(ILogger<GetQuoteForInputApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerGetQuoteResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerGetQuoteResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerGetQuoteResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode4xx => 4XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode4xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode4xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode4xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode4xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4XX);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode5xx => 5XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode5xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode5xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode5xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode5xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5XX);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetQuoteForOutput(ref string tokenIn, ref string tokenOut, ref string amountIn, ref Option<long> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <returns></returns>
        private void ValidateGetQuoteForOutput(string tokenIn, string tokenOut, string amountIn)
        {
            if (tokenIn == null)
                throw new ArgumentNullException(nameof(tokenIn));

            if (tokenOut == null)
                throw new ArgumentNullException(nameof(tokenOut));

            if (amountIn == null)
                throw new ArgumentNullException(nameof(amountIn));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"></param>
        private void AfterGetQuoteForOutputDefaultImplementation(IGetQuoteForOutputApiResponse apiResponseLocalVar, string tokenIn, string tokenOut, string amountIn, Option<long> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetQuoteForOutput(ref suppressDefaultLog, apiResponseLocalVar, tokenIn, tokenOut, amountIn, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"></param>
        partial void AfterGetQuoteForOutput(ref bool suppressDefaultLog, IGetQuoteForOutputApiResponse apiResponseLocalVar, string tokenIn, string tokenOut, string amountIn, Option<long> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetQuoteForOutputDefaultImplementation(Exception exception, string pathFormat, string path, string tokenIn, string tokenOut, string amountIn, Option<long> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetQuoteForOutput(ref suppressDefaultLog, exception, pathFormat, path, tokenIn, tokenOut, amountIn, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetQuoteForOutput(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string tokenIn, string tokenOut, string amountIn, Option<long> chainId);

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount 
        /// </summary>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuoteForOutputApiResponse"/>&gt;</returns>
        public async Task<IGetQuoteForOutputApiResponse?> GetQuoteForOutputOrDefaultAsync(string tokenIn, string tokenOut, string amountIn, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetQuoteForOutputAsync(tokenIn, tokenOut, amountIn, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQuoteForOutputApiResponse"/>&gt;</returns>
        public async Task<IGetQuoteForOutputApiResponse> GetQuoteForOutputAsync(string tokenIn, string tokenOut, string amountIn, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetQuoteForOutput(tokenIn, tokenOut, amountIn);

                FormatGetQuoteForOutput(ref tokenIn, ref tokenOut, ref amountIn, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/exchange/quote/output";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["tokenIn"] = tokenIn.ToString();
                    parseQueryStringLocalVar["tokenOut"] = tokenOut.ToString();
                    parseQueryStringLocalVar["amountIn"] = amountIn.ToString();

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    PlayerApiKeyToken apiKeyTokenLocalVar1 = (PlayerApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetQuoteForOutputApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetQuoteForOutputApiResponse>();

                        GetQuoteForOutputApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/exchange/quote/output", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetQuoteForOutputDefaultImplementation(apiResponseLocalVar, tokenIn, tokenOut, amountIn, chainId);

                        Events.ExecuteOnGetQuoteForOutput(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetQuoteForOutputDefaultImplementation(e, "/v1/player/exchange/quote/output", uriBuilderLocalVar.Path, tokenIn, tokenOut, amountIn, chainId);
                Events.ExecuteOnErrorGetQuoteForOutput(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetQuoteForOutputApiResponse"/>
        /// </summary>
        public partial class GetQuoteForOutputApiResponse : BeamPlayerClient.Client.ApiResponse, IGetQuoteForOutputApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetQuoteForOutputApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetQuoteForOutputApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetQuoteForOutputApiResponse(ILogger<GetQuoteForOutputApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerGetQuoteResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerGetQuoteResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerGetQuoteResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode4xx => 4XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode4xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode4xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode4xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode4xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4XX);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode5xx => 5XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode5xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode5xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode5xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode5xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5XX);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUnwrapNative(PlayerUnwrappingTokenInput playerUnwrappingTokenInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="playerUnwrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateUnwrapNative(PlayerUnwrappingTokenInput playerUnwrappingTokenInput, string entityId)
        {
            if (playerUnwrappingTokenInput == null)
                throw new ArgumentNullException(nameof(playerUnwrappingTokenInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerUnwrappingTokenInput"></param>
        /// <param name="entityId"></param>
        private void AfterUnwrapNativeDefaultImplementation(IUnwrapNativeApiResponse apiResponseLocalVar, PlayerUnwrappingTokenInput playerUnwrappingTokenInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterUnwrapNative(ref suppressDefaultLog, apiResponseLocalVar, playerUnwrappingTokenInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerUnwrappingTokenInput"></param>
        /// <param name="entityId"></param>
        partial void AfterUnwrapNative(ref bool suppressDefaultLog, IUnwrapNativeApiResponse apiResponseLocalVar, PlayerUnwrappingTokenInput playerUnwrappingTokenInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerUnwrappingTokenInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorUnwrapNativeDefaultImplementation(Exception exception, string pathFormat, string path, PlayerUnwrappingTokenInput playerUnwrappingTokenInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorUnwrapNative(ref suppressDefaultLog, exception, pathFormat, path, playerUnwrappingTokenInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerUnwrappingTokenInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorUnwrapNative(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, PlayerUnwrappingTokenInput playerUnwrappingTokenInput, string entityId);

        /// <summary>
        /// Unwrap an amount of wrapped to native token 
        /// </summary>
        /// <param name="playerUnwrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnwrapNativeApiResponse"/>&gt;</returns>
        public async Task<IUnwrapNativeApiResponse?> UnwrapNativeOrDefaultAsync(PlayerUnwrappingTokenInput playerUnwrappingTokenInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UnwrapNativeAsync(playerUnwrappingTokenInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Unwrap an amount of wrapped to native token 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerUnwrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnwrapNativeApiResponse"/>&gt;</returns>
        public async Task<IUnwrapNativeApiResponse> UnwrapNativeAsync(PlayerUnwrappingTokenInput playerUnwrappingTokenInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUnwrapNative(playerUnwrappingTokenInput, entityId);

                FormatUnwrapNative(playerUnwrappingTokenInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/exchange/users/{entityId}/native/unwrap";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (playerUnwrappingTokenInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(playerUnwrappingTokenInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    PlayerApiKeyToken apiKeyTokenLocalVar1 = (PlayerApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UnwrapNativeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UnwrapNativeApiResponse>();

                        UnwrapNativeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/exchange/users/{entityId}/native/unwrap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUnwrapNativeDefaultImplementation(apiResponseLocalVar, playerUnwrappingTokenInput, entityId);

                        Events.ExecuteOnUnwrapNative(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUnwrapNativeDefaultImplementation(e, "/v1/player/exchange/users/{entityId}/native/unwrap", uriBuilderLocalVar.Path, playerUnwrappingTokenInput, entityId);
                Events.ExecuteOnErrorUnwrapNative(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UnwrapNativeApiResponse"/>
        /// </summary>
        public partial class UnwrapNativeApiResponse : BeamPlayerClient.Client.ApiResponse, IUnwrapNativeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UnwrapNativeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UnwrapNativeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UnwrapNativeApiResponse(ILogger<UnwrapNativeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerPlayerOperationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerPlayerOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerPlayerOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode4xx => 4XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode4xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode4xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode4xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode4xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4XX);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode5xx => 5XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode5xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode5xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode5xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode5xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5XX);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatWrapNative(PlayerWrappingTokenInput playerWrappingTokenInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="playerWrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateWrapNative(PlayerWrappingTokenInput playerWrappingTokenInput, string entityId)
        {
            if (playerWrappingTokenInput == null)
                throw new ArgumentNullException(nameof(playerWrappingTokenInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerWrappingTokenInput"></param>
        /// <param name="entityId"></param>
        private void AfterWrapNativeDefaultImplementation(IWrapNativeApiResponse apiResponseLocalVar, PlayerWrappingTokenInput playerWrappingTokenInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterWrapNative(ref suppressDefaultLog, apiResponseLocalVar, playerWrappingTokenInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="playerWrappingTokenInput"></param>
        /// <param name="entityId"></param>
        partial void AfterWrapNative(ref bool suppressDefaultLog, IWrapNativeApiResponse apiResponseLocalVar, PlayerWrappingTokenInput playerWrappingTokenInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerWrappingTokenInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorWrapNativeDefaultImplementation(Exception exception, string pathFormat, string path, PlayerWrappingTokenInput playerWrappingTokenInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorWrapNative(ref suppressDefaultLog, exception, pathFormat, path, playerWrappingTokenInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="playerWrappingTokenInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorWrapNative(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, PlayerWrappingTokenInput playerWrappingTokenInput, string entityId);

        /// <summary>
        /// Wrap an amount of native token to wrapped native token 
        /// </summary>
        /// <param name="playerWrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWrapNativeApiResponse"/>&gt;</returns>
        public async Task<IWrapNativeApiResponse?> WrapNativeOrDefaultAsync(PlayerWrappingTokenInput playerWrappingTokenInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await WrapNativeAsync(playerWrappingTokenInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Wrap an amount of native token to wrapped native token 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerWrappingTokenInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IWrapNativeApiResponse"/>&gt;</returns>
        public async Task<IWrapNativeApiResponse> WrapNativeAsync(PlayerWrappingTokenInput playerWrappingTokenInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateWrapNative(playerWrappingTokenInput, entityId);

                FormatWrapNative(playerWrappingTokenInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/player/exchange/users/{entityId}/native/wrap";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (playerWrappingTokenInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(playerWrappingTokenInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    PlayerApiKeyToken apiKeyTokenLocalVar1 = (PlayerApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<WrapNativeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<WrapNativeApiResponse>();

                        WrapNativeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/player/exchange/users/{entityId}/native/wrap", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterWrapNativeDefaultImplementation(apiResponseLocalVar, playerWrappingTokenInput, entityId);

                        Events.ExecuteOnWrapNative(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorWrapNativeDefaultImplementation(e, "/v1/player/exchange/users/{entityId}/native/wrap", uriBuilderLocalVar.Path, playerWrappingTokenInput, entityId);
                Events.ExecuteOnErrorWrapNative(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="WrapNativeApiResponse"/>
        /// </summary>
        public partial class WrapNativeApiResponse : BeamPlayerClient.Client.ApiResponse, IWrapNativeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<WrapNativeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="WrapNativeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public WrapNativeApiResponse(ILogger<WrapNativeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerPlayerOperationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerPlayerOperationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerPlayerOperationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode4xx => 4XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 4XX CustomHttpStatusCode4xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode4xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode4xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX CustomHttpStatusCode4xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode4xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode4xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4XX);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public bool IsCustomHttpStatusCode5xx => 5XX == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 5XX CustomHttpStatusCode5xx
            /// </summary>
            /// <returns></returns>
            public BeamPlayerClient.Model.PlayerBeamErrorResponse? CustomHttpStatusCode5xx()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCustomHttpStatusCode5xx
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamPlayerClient.Model.PlayerBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX CustomHttpStatusCode5xx and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCustomHttpStatusCode5xx([NotNullWhen(true)]out BeamPlayerClient.Model.PlayerBeamErrorResponse? result)
            {
                result = null;

                try
                {
                    result = CustomHttpStatusCode5xx();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5XX);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
