// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamPlayerClient.Client.ClientUtils;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// WebConnectionCreateOperationInput
    /// </summary>
    public partial class WebConnectionCreateOperationInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebConnectionCreateOperationInput" /> class.
        /// </summary>
        /// <param name="accountAddress">accountAddress</param>
        /// <param name="chainId">chainId</param>
        /// <param name="operationId">operationId</param>
        /// <param name="operationProcessing">operationProcessing (default to OperationProcessingEnum.Execute)</param>
        /// <param name="transactions">transactions</param>
        [JsonConstructor]
        public WebConnectionCreateOperationInput(string accountAddress, decimal chainId, Option<string?> operationId = default, Option<OperationProcessingEnum?> operationProcessing = default, List<CreateOperationRequestInputTransactionsInner>? transactions = default)
        {
            AccountAddress = accountAddress;
            ChainId = chainId;
            OperationIdOption = operationId;
            OperationProcessingOption = operationProcessing;
            Transactions = transactions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines OperationProcessing
        /// </summary>
        public enum OperationProcessingEnum
        {
            /// <summary>
            /// Enum SignOnly for value: SignOnly
            /// </summary>
            SignOnly = 1,

            /// <summary>
            /// Enum Execute for value: Execute
            /// </summary>
            Execute = 2
        }

        /// <summary>
        /// Returns a <see cref="OperationProcessingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static OperationProcessingEnum OperationProcessingEnumFromString(string value)
        {
            if (value.Equals("SignOnly"))
                return OperationProcessingEnum.SignOnly;

            if (value.Equals("Execute"))
                return OperationProcessingEnum.Execute;

            throw new NotImplementedException($"Could not convert value to type OperationProcessingEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="OperationProcessingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OperationProcessingEnum? OperationProcessingEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SignOnly"))
                return OperationProcessingEnum.SignOnly;

            if (value.Equals("Execute"))
                return OperationProcessingEnum.Execute;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OperationProcessingEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string OperationProcessingEnumToJsonValue(OperationProcessingEnum? value)
        {
            if (value == OperationProcessingEnum.SignOnly)
                return "SignOnly";

            if (value == OperationProcessingEnum.Execute)
                return "Execute";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of OperationProcessing
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OperationProcessingEnum?> OperationProcessingOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationProcessing
        /// </summary>
        [JsonPropertyName("operationProcessing")]
        public OperationProcessingEnum? OperationProcessing { get { return this.OperationProcessingOption; } set { this.OperationProcessingOption = new(value); } }

        /// <summary>
        /// Gets or Sets AccountAddress
        /// </summary>
        [JsonPropertyName("accountAddress")]
        public string AccountAddress { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public decimal ChainId { get; set; }

        /// <summary>
        /// Used to track the state of OperationId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OperationIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets OperationId
        /// </summary>
        [JsonPropertyName("operationId")]
        public string? OperationId { get { return this. OperationIdOption; } set { this.OperationIdOption = new(value); } }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [JsonPropertyName("transactions")]
        public List<CreateOperationRequestInputTransactionsInner>? Transactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebConnectionCreateOperationInput {\n");
            sb.Append("  AccountAddress: ").Append(AccountAddress).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  OperationId: ").Append(OperationId).Append("\n");
            sb.Append("  OperationProcessing: ").Append(OperationProcessing).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebConnectionCreateOperationInput" />
    /// </summary>
    public class WebConnectionCreateOperationInputJsonConverter : JsonConverter<WebConnectionCreateOperationInput>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebConnectionCreateOperationInput" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebConnectionCreateOperationInput Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accountAddress = default;
            Option<decimal?> chainId = default;
            Option<string?> operationId = default;
            Option<WebConnectionCreateOperationInput.OperationProcessingEnum?> operationProcessing = default;
            Option<List<CreateOperationRequestInputTransactionsInner>?> transactions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "accountAddress":
                            accountAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "operationId":
                            operationId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "operationProcessing":
                            string? operationProcessingRawValue = utf8JsonReader.GetString();
                            if (operationProcessingRawValue != null)
                                operationProcessing = new Option<WebConnectionCreateOperationInput.OperationProcessingEnum?>(WebConnectionCreateOperationInput.OperationProcessingEnumFromStringOrDefault(operationProcessingRawValue));
                            break;
                        case "transactions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactions = new Option<List<CreateOperationRequestInputTransactionsInner>?>(JsonSerializer.Deserialize<List<CreateOperationRequestInputTransactionsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accountAddress.IsSet)
                throw new ArgumentException("Property is required for class WebConnectionCreateOperationInput.", nameof(accountAddress));

            if (!chainId.IsSet)
                throw new ArgumentException("Property is required for class WebConnectionCreateOperationInput.", nameof(chainId));

            if (!transactions.IsSet)
                throw new ArgumentException("Property is required for class WebConnectionCreateOperationInput.", nameof(transactions));

            if (accountAddress.IsSet && accountAddress.Value == null)
                throw new ArgumentNullException(nameof(accountAddress), "Property is not nullable for class WebConnectionCreateOperationInput.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class WebConnectionCreateOperationInput.");

            if (operationProcessing.IsSet && operationProcessing.Value == null)
                throw new ArgumentNullException(nameof(operationProcessing), "Property is not nullable for class WebConnectionCreateOperationInput.");

            return new WebConnectionCreateOperationInput(accountAddress.Value!, chainId.Value!.Value!, operationId, operationProcessing, transactions.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="WebConnectionCreateOperationInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webConnectionCreateOperationInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebConnectionCreateOperationInput webConnectionCreateOperationInput, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, webConnectionCreateOperationInput, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebConnectionCreateOperationInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webConnectionCreateOperationInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, WebConnectionCreateOperationInput webConnectionCreateOperationInput, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webConnectionCreateOperationInput.AccountAddress == null)
                throw new ArgumentNullException(nameof(webConnectionCreateOperationInput.AccountAddress), "Property is required for class WebConnectionCreateOperationInput.");

            writer.WriteString("accountAddress", webConnectionCreateOperationInput.AccountAddress);

            writer.WriteNumber("chainId", webConnectionCreateOperationInput.ChainId);

            if (webConnectionCreateOperationInput.OperationIdOption.IsSet)
                if (webConnectionCreateOperationInput.OperationIdOption.Value != null)
                    writer.WriteString("operationId", webConnectionCreateOperationInput.OperationId);
                else
                    writer.WriteNull("operationId");

            var operationProcessingRawValue = WebConnectionCreateOperationInput.OperationProcessingEnumToJsonValue(webConnectionCreateOperationInput.OperationProcessingOption.Value!.Value);
            writer.WriteString("operationProcessing", operationProcessingRawValue);
            if (webConnectionCreateOperationInput.Transactions != null)
            {
                writer.WritePropertyName("transactions");
                JsonSerializer.Serialize(writer, webConnectionCreateOperationInput.Transactions, jsonSerializerOptions);
            }
            else
                writer.WriteNull("transactions");
        }
    }
}