// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamPlayerClient.Client.ClientUtils;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context
    /// </summary>
    public partial class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context" /> class.
        /// </summary>
        /// <param name="assetAddress">assetAddress</param>
        /// <param name="assetId">assetId</param>
        /// <param name="currencyAddress">currencyAddress</param>
        /// <param name="currencyAmount">currencyAmount</param>
        [JsonConstructor]
        public PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context(string assetAddress, string assetId, string currencyAddress, string currencyAmount)
        {
            AssetAddress = assetAddress;
            AssetId = assetId;
            CurrencyAddress = currencyAddress;
            CurrencyAmount = currencyAmount;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AssetAddress
        /// </summary>
        [JsonPropertyName("assetAddress")]
        public string AssetAddress { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyAddress
        /// </summary>
        [JsonPropertyName("currencyAddress")]
        public string CurrencyAddress { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyAmount
        /// </summary>
        [JsonPropertyName("currencyAmount")]
        public string CurrencyAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context {\n");
            sb.Append("  AssetAddress: ").Append(AssetAddress).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  CurrencyAddress: ").Append(CurrencyAddress).Append("\n");
            sb.Append("  CurrencyAmount: ").Append(CurrencyAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context" />
    /// </summary>
    public class PlayerCommonOperationResponseActionsInnerAllOfOneOf5ContextJsonConverter : JsonConverter<PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assetAddress = default;
            Option<string?> assetId = default;
            Option<string?> currencyAddress = default;
            Option<string?> currencyAmount = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assetAddress":
                            assetAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assetId":
                            assetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currencyAddress":
                            currencyAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "currencyAmount":
                            currencyAmount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assetAddress.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.", nameof(assetAddress));

            if (!assetId.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.", nameof(assetId));

            if (!currencyAddress.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.", nameof(currencyAddress));

            if (!currencyAmount.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.", nameof(currencyAmount));

            if (assetAddress.IsSet && assetAddress.Value == null)
                throw new ArgumentNullException(nameof(assetAddress), "Property is not nullable for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.");

            if (assetId.IsSet && assetId.Value == null)
                throw new ArgumentNullException(nameof(assetId), "Property is not nullable for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.");

            if (currencyAddress.IsSet && currencyAddress.Value == null)
                throw new ArgumentNullException(nameof(currencyAddress), "Property is not nullable for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.");

            if (currencyAmount.IsSet && currencyAmount.Value == null)
                throw new ArgumentNullException(nameof(currencyAmount), "Property is not nullable for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.");

            return new PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context(assetAddress.Value!, assetId.Value!, currencyAddress.Value!, currencyAmount.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonOperationResponseActionsInnerAllOfOneOf5Context"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context playerCommonOperationResponseActionsInnerAllOfOneOf5Context, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, playerCommonOperationResponseActionsInnerAllOfOneOf5Context, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonOperationResponseActionsInnerAllOfOneOf5Context"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context playerCommonOperationResponseActionsInnerAllOfOneOf5Context, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerCommonOperationResponseActionsInnerAllOfOneOf5Context.AssetAddress == null)
                throw new ArgumentNullException(nameof(playerCommonOperationResponseActionsInnerAllOfOneOf5Context.AssetAddress), "Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.");

            if (playerCommonOperationResponseActionsInnerAllOfOneOf5Context.AssetId == null)
                throw new ArgumentNullException(nameof(playerCommonOperationResponseActionsInnerAllOfOneOf5Context.AssetId), "Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.");

            if (playerCommonOperationResponseActionsInnerAllOfOneOf5Context.CurrencyAddress == null)
                throw new ArgumentNullException(nameof(playerCommonOperationResponseActionsInnerAllOfOneOf5Context.CurrencyAddress), "Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.");

            if (playerCommonOperationResponseActionsInnerAllOfOneOf5Context.CurrencyAmount == null)
                throw new ArgumentNullException(nameof(playerCommonOperationResponseActionsInnerAllOfOneOf5Context.CurrencyAmount), "Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOf5Context.");

            writer.WriteString("assetAddress", playerCommonOperationResponseActionsInnerAllOfOneOf5Context.AssetAddress);

            writer.WriteString("assetId", playerCommonOperationResponseActionsInnerAllOfOneOf5Context.AssetId);

            writer.WriteString("currencyAddress", playerCommonOperationResponseActionsInnerAllOfOneOf5Context.CurrencyAddress);

            writer.WriteString("currencyAmount", playerCommonOperationResponseActionsInnerAllOfOneOf5Context.CurrencyAmount);
        }
    }
}