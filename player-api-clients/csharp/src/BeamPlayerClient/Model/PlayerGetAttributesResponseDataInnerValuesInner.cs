// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerGetAttributesResponseDataInnerValuesInner
    /// </summary>
    public partial class PlayerGetAttributesResponseDataInnerValuesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerGetAttributesResponseDataInnerValuesInner" /> class.
        /// </summary>
        /// <param name="value">value</param>
        /// <param name="count">count</param>
        [JsonConstructor]
        public PlayerGetAttributesResponseDataInnerValuesInner(string value, Option<decimal?> count = default)
        {
            Value = value;
            CountOption = count;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Used to track the state of Count
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> CountOption { get; private set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [JsonPropertyName("count")]
        public decimal? Count { get { return this.CountOption; } set { this.CountOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerGetAttributesResponseDataInnerValuesInner {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerGetAttributesResponseDataInnerValuesInner" />
    /// </summary>
    public class PlayerGetAttributesResponseDataInnerValuesInnerJsonConverter : JsonConverter<PlayerGetAttributesResponseDataInnerValuesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerGetAttributesResponseDataInnerValuesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerGetAttributesResponseDataInnerValuesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> value = default;
            Option<decimal?> count = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "value":
                            value = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                count = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!value.IsSet)
                throw new ArgumentException("Property is required for class PlayerGetAttributesResponseDataInnerValuesInner.", nameof(value));

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class PlayerGetAttributesResponseDataInnerValuesInner.");

            return new PlayerGetAttributesResponseDataInnerValuesInner(value.Value, count);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerGetAttributesResponseDataInnerValuesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerGetAttributesResponseDataInnerValuesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerGetAttributesResponseDataInnerValuesInner playerGetAttributesResponseDataInnerValuesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerGetAttributesResponseDataInnerValuesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerGetAttributesResponseDataInnerValuesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerGetAttributesResponseDataInnerValuesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerGetAttributesResponseDataInnerValuesInner playerGetAttributesResponseDataInnerValuesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerGetAttributesResponseDataInnerValuesInner.Value == null)
                throw new ArgumentNullException(nameof(playerGetAttributesResponseDataInnerValuesInner.Value), "Property is required for class PlayerGetAttributesResponseDataInnerValuesInner.");

            writer.WriteString("value", playerGetAttributesResponseDataInnerValuesInner.Value);

            if (playerGetAttributesResponseDataInnerValuesInner.CountOption.IsSet)
            {
                if (playerGetAttributesResponseDataInnerValuesInner.CountOption.Value != null)
                {
                    writer.WriteNumber("count", playerGetAttributesResponseDataInnerValuesInner.CountOption.Value.Value);
                }
                else
                {
                    writer.WriteNull("count");
                }

            }
        }
    }
}