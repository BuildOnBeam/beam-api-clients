// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerGetAssetsForUserResponse
    /// </summary>
    public partial class PlayerGetAssetsForUserResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerGetAssetsForUserResponse" /> class.
        /// </summary>
        /// <param name="data">data</param>
        /// <param name="continuation">continuation</param>
        [JsonConstructor]
        public PlayerGetAssetsForUserResponse(List<PlayerGetAssetsForUserResponseDataInner> data, Option<string> continuation = default)
        {
            Data = data;
            ContinuationOption = continuation;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public List<PlayerGetAssetsForUserResponseDataInner> Data { get; set; }

        /// <summary>
        /// Used to track the state of Continuation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContinuationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Continuation
        /// </summary>
        [JsonPropertyName("continuation")]
        public string Continuation { get { return this.ContinuationOption; } set { this.ContinuationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerGetAssetsForUserResponse {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Continuation: ").Append(Continuation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerGetAssetsForUserResponse" />
    /// </summary>
    public class PlayerGetAssetsForUserResponseJsonConverter : JsonConverter<PlayerGetAssetsForUserResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerGetAssetsForUserResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerGetAssetsForUserResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<PlayerGetAssetsForUserResponseDataInner>> data = default;
            Option<string> continuation = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "data":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                data = new Option<List<PlayerGetAssetsForUserResponseDataInner>>(JsonSerializer.Deserialize<List<PlayerGetAssetsForUserResponseDataInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "continuation":
                            continuation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!data.IsSet)
                throw new ArgumentException("Property is required for class PlayerGetAssetsForUserResponse.", nameof(data));

            if (data.IsSet && data.Value == null)
                throw new ArgumentNullException(nameof(data), "Property is not nullable for class PlayerGetAssetsForUserResponse.");

            return new PlayerGetAssetsForUserResponse(data.Value, continuation);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerGetAssetsForUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerGetAssetsForUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerGetAssetsForUserResponse playerGetAssetsForUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerGetAssetsForUserResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerGetAssetsForUserResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerGetAssetsForUserResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerGetAssetsForUserResponse playerGetAssetsForUserResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerGetAssetsForUserResponse.Data == null)
                throw new ArgumentNullException(nameof(playerGetAssetsForUserResponse.Data), "Property is required for class PlayerGetAssetsForUserResponse.");

            writer.WritePropertyName("data");
            JsonSerializer.Serialize(writer, playerGetAssetsForUserResponse.Data, jsonSerializerOptions);
            if (playerGetAssetsForUserResponse.ContinuationOption.IsSet)
            {
                if (playerGetAssetsForUserResponse.ContinuationOption.Value != null)
                {
                    writer.WriteString("continuation", playerGetAssetsForUserResponse.Continuation);
                }
                else
                {
                    writer.WriteNull("continuation");
                }

            }
        }
    }
}