// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerOperationActionSignature
    /// </summary>
    public partial class PlayerOperationActionSignature : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerOperationActionSignature" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="id">id</param>
        /// <param name="data">data</param>
        /// <param name="signature">signature</param>
        /// <param name="actionId">actionId</param>
        /// <param name="hash">hash</param>
        [JsonConstructor]
        public PlayerOperationActionSignature(TypeEnum type, string id, Option<Object> data = default, string signature = default, string actionId = default, Option<string> hash = default)
        {
            Type = type;
            Id = id;
            DataOption = data;
            Signature = signature;
            ActionId = actionId;
            HashOption = hash;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(TypeEnumJsonConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Message for value: Message
            /// </summary>
            Message = 1,

            /// <summary>
            /// Enum TypedData for value: TypedData
            /// </summary>
            TypedData = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("Message"))
                return TypeEnum.Message;

            if (value.Equals("TypedData"))
                return TypeEnum.TypedData;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Message"))
                return TypeEnum.Message;

            if (value.Equals("TypedData"))
                return TypeEnum.TypedData;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == null)
                return null;

            if (value == TypeEnum.Message)
                return "Message";

            if (value == TypeEnum.TypedData)
                return "TypedData";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="TypeEnum"/> to and from the JSON value
        /// </summary>
        public static class TypeEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="TypeEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static TypeEnum FromString(string value)
            {
                    if (value.Equals("Message"))
                    return TypeEnum.Message;

                    if (value.Equals("TypedData"))
                    return TypeEnum.TypedData;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="TypeEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static TypeEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("Message"))
                    return TypeEnum.Message;

                    if (value.Equals("TypedData"))
                    return TypeEnum.TypedData;

            return null;
            }

            /// <summary>
            /// Converts the <see cref="TypeEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(TypeEnum value)
            {
                        if (value == TypeEnum.Message)
                        return "Message";

                        if (value == TypeEnum.TypedData)
                        return "TypedData";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="TypeEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class TypeEnumJsonConverter : JsonConverter<TypeEnum>
        {
            /// <summary>
            /// Returns a TypeEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override TypeEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string rawValue = reader.GetString();

                TypeEnum? result = rawValue == null
                ? null
                : TypeEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the TypeEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="typeEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, TypeEnum typeEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(TypeEnumValueConverter.ToJsonValue(typeEnum));
            }
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object Data { get { return this.DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [JsonPropertyName("signature")]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets ActionId
        /// </summary>
        [JsonPropertyName("actionId")]
        public string ActionId { get; set; }

        /// <summary>
        /// Used to track the state of Hash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> HashOption { get; private set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [JsonPropertyName("hash")]
        public string Hash { get { return this.HashOption; } set { this.HashOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerOperationActionSignature {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerOperationActionSignature" />
    /// </summary>
    public class PlayerOperationActionSignatureJsonConverter : JsonConverter<PlayerOperationActionSignature>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerOperationActionSignature" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerOperationActionSignature Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PlayerOperationActionSignature.TypeEnum?> type = default;
            Option<string> id = default;
            Option<Object> data = default;
            Option<string> signature = default;
            Option<string> actionId = default;
            Option<string> hash = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PlayerOperationActionSignature.TypeEnum?>(PlayerOperationActionSignature.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                data = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "signature":
                            signature = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "actionId":
                            actionId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "hash":
                            hash = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionSignature.", nameof(type));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionSignature.", nameof(id));

            if (!signature.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionSignature.", nameof(signature));

            if (!actionId.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionSignature.", nameof(actionId));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PlayerOperationActionSignature.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PlayerOperationActionSignature.");

            return new PlayerOperationActionSignature(type.Value.Value, id.Value, data, signature.Value, actionId.Value, hash);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerOperationActionSignature" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerOperationActionSignature"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerOperationActionSignature playerOperationActionSignature, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerOperationActionSignature, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerOperationActionSignature" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerOperationActionSignature"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerOperationActionSignature playerOperationActionSignature, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerOperationActionSignature.Id == null)
                throw new ArgumentNullException(nameof(playerOperationActionSignature.Id), "Property is required for class PlayerOperationActionSignature.");

            var typeRawValue = PlayerOperationActionSignature.TypeEnumToJsonValue(playerOperationActionSignature.Type);
            if (typeRawValue != null)
                writer.WriteString("type", typeRawValue);
            writer.WriteString("id", playerOperationActionSignature.Id);

            if (playerOperationActionSignature.DataOption.IsSet)
                if (playerOperationActionSignature.DataOption.Value != null)
                {
                    writer.WritePropertyName("data");
                    JsonSerializer.Serialize(writer, playerOperationActionSignature.Data, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("data");
            if (playerOperationActionSignature.Signature != null)
            {
                writer.WriteString("signature", playerOperationActionSignature.Signature);
            }
            else
            {
                writer.WriteNull("signature");
            }

            if (playerOperationActionSignature.ActionId != null)
            {
                writer.WriteString("actionId", playerOperationActionSignature.ActionId);
            }
            else
            {
                writer.WriteNull("actionId");
            }

            if (playerOperationActionSignature.HashOption.IsSet)
            {
                if (playerOperationActionSignature.HashOption.Value != null)
                {
                    writer.WriteString("hash", playerOperationActionSignature.Hash);
                }
                else
                {
                    writer.WriteNull("hash");
                }

            }
        }
    }
}