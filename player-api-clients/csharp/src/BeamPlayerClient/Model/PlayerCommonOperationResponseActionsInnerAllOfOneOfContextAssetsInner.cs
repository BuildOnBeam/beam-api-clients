// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamPlayerClient.Client.ClientUtils;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner
    /// </summary>
    public partial class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="assetId">assetId</param>
        /// <param name="contractAddress">contractAddress</param>
        /// <param name="receiverAddress">receiverAddress</param>
        [JsonConstructor]
        public PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner(decimal amount, string assetId, string contractAddress, string receiverAddress)
        {
            Amount = amount;
            AssetId = assetId;
            ContractAddress = contractAddress;
            ReceiverAddress = receiverAddress;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public decimal Amount { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [JsonPropertyName("contractAddress")]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets ReceiverAddress
        /// </summary>
        [JsonPropertyName("receiverAddress")]
        public string ReceiverAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  ReceiverAddress: ").Append(ReceiverAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner" />
    /// </summary>
    public class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInnerJsonConverter : JsonConverter<PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> amount = default;
            Option<string?> assetId = default;
            Option<string?> contractAddress = default;
            Option<string?> receiverAddress = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                amount = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "assetId":
                            assetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contractAddress":
                            contractAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "receiverAddress":
                            receiverAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.", nameof(amount));

            if (!assetId.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.", nameof(assetId));

            if (!contractAddress.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.", nameof(contractAddress));

            if (!receiverAddress.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.", nameof(receiverAddress));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.");

            if (assetId.IsSet && assetId.Value == null)
                throw new ArgumentNullException(nameof(assetId), "Property is not nullable for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.");

            if (contractAddress.IsSet && contractAddress.Value == null)
                throw new ArgumentNullException(nameof(contractAddress), "Property is not nullable for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.");

            if (receiverAddress.IsSet && receiverAddress.Value == null)
                throw new ArgumentNullException(nameof(receiverAddress), "Property is not nullable for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.");

            return new PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner(amount.Value!.Value!, assetId.Value!, contractAddress.Value!, receiverAddress.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.AssetId == null)
                throw new ArgumentNullException(nameof(playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.AssetId), "Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.");

            if (playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.ContractAddress == null)
                throw new ArgumentNullException(nameof(playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.ContractAddress), "Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.");

            if (playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.ReceiverAddress == null)
                throw new ArgumentNullException(nameof(playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.ReceiverAddress), "Property is required for class PlayerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.");

            writer.WriteNumber("amount", playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.Amount);

            writer.WriteString("assetId", playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.AssetId);

            writer.WriteString("contractAddress", playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.ContractAddress);

            writer.WriteString("receiverAddress", playerCommonOperationResponseActionsInnerAllOfOneOfContextAssetsInner.ReceiverAddress);
        }
    }
}