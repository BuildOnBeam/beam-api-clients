// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamPlayerClient.Client.ClientUtils;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// WebConnectionTransactionInputInteractionsInner
    /// </summary>
    public partial class WebConnectionTransactionInputInteractionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebConnectionTransactionInputInteractionsInner" /> class.
        /// </summary>
        /// <param name="from">from</param>
        /// <param name="data">data</param>
        /// <param name="gas">gas</param>
        /// <param name="gasPrice">gasPrice</param>
        /// <param name="nonce">nonce</param>
        /// <param name="to">to</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public WebConnectionTransactionInputInteractionsInner(string from, Option<string?> data = default, Option<string?> gas = default, Option<string?> gasPrice = default, Option<string?> nonce = default, Option<string?> to = default, Option<string?> value = default)
        {
            From = from;
            DataOption = data;
            GasOption = gas;
            GasPriceOption = gasPrice;
            NonceOption = nonce;
            ToOption = to;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [JsonPropertyName("from")]
        public string From { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public string? Data { get { return this. DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gas
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GasOption { get; private set; }

        /// <summary>
        /// Gets or Sets Gas
        /// </summary>
        [JsonPropertyName("gas")]
        public string? Gas { get { return this. GasOption; } set { this.GasOption = new(value); } }

        /// <summary>
        /// Used to track the state of GasPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GasPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets GasPrice
        /// </summary>
        [JsonPropertyName("gasPrice")]
        public string? GasPrice { get { return this. GasPriceOption; } set { this.GasPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Nonce
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NonceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [JsonPropertyName("nonce")]
        public string? Nonce { get { return this. NonceOption; } set { this.NonceOption = new(value); } }

        /// <summary>
        /// Used to track the state of To
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ToOption { get; private set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [JsonPropertyName("to")]
        public string? To { get { return this. ToOption; } set { this.ToOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string? Value { get { return this. ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebConnectionTransactionInputInteractionsInner {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Gas: ").Append(Gas).Append("\n");
            sb.Append("  GasPrice: ").Append(GasPrice).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebConnectionTransactionInputInteractionsInner" />
    /// </summary>
    public class WebConnectionTransactionInputInteractionsInnerJsonConverter : JsonConverter<WebConnectionTransactionInputInteractionsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebConnectionTransactionInputInteractionsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebConnectionTransactionInputInteractionsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> from = default;
            Option<string?> data = default;
            Option<string?> gas = default;
            Option<string?> gasPrice = default;
            Option<string?> nonce = default;
            Option<string?> to = default;
            Option<string?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "from":
                            from = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "data":
                            data = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "gas":
                            gas = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "gasPrice":
                            gasPrice = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "nonce":
                            nonce = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "to":
                            to = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!from.IsSet)
                throw new ArgumentException("Property is required for class WebConnectionTransactionInputInteractionsInner.", nameof(from));

            if (from.IsSet && from.Value == null)
                throw new ArgumentNullException(nameof(from), "Property is not nullable for class WebConnectionTransactionInputInteractionsInner.");

            return new WebConnectionTransactionInputInteractionsInner(from.Value!, data, gas, gasPrice, nonce, to, value);
        }

        /// <summary>
        /// Serializes a <see cref="WebConnectionTransactionInputInteractionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webConnectionTransactionInputInteractionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebConnectionTransactionInputInteractionsInner webConnectionTransactionInputInteractionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, webConnectionTransactionInputInteractionsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebConnectionTransactionInputInteractionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webConnectionTransactionInputInteractionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, WebConnectionTransactionInputInteractionsInner webConnectionTransactionInputInteractionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webConnectionTransactionInputInteractionsInner.From == null)
                throw new ArgumentNullException(nameof(webConnectionTransactionInputInteractionsInner.From), "Property is required for class WebConnectionTransactionInputInteractionsInner.");

            writer.WriteString("from", webConnectionTransactionInputInteractionsInner.From);

            if (webConnectionTransactionInputInteractionsInner.DataOption.IsSet)
                if (webConnectionTransactionInputInteractionsInner.DataOption.Value != null)
                    writer.WriteString("data", webConnectionTransactionInputInteractionsInner.Data);
                else
                    writer.WriteNull("data");

            if (webConnectionTransactionInputInteractionsInner.GasOption.IsSet)
                if (webConnectionTransactionInputInteractionsInner.GasOption.Value != null)
                    writer.WriteString("gas", webConnectionTransactionInputInteractionsInner.Gas);
                else
                    writer.WriteNull("gas");

            if (webConnectionTransactionInputInteractionsInner.GasPriceOption.IsSet)
                if (webConnectionTransactionInputInteractionsInner.GasPriceOption.Value != null)
                    writer.WriteString("gasPrice", webConnectionTransactionInputInteractionsInner.GasPrice);
                else
                    writer.WriteNull("gasPrice");

            if (webConnectionTransactionInputInteractionsInner.NonceOption.IsSet)
                if (webConnectionTransactionInputInteractionsInner.NonceOption.Value != null)
                    writer.WriteString("nonce", webConnectionTransactionInputInteractionsInner.Nonce);
                else
                    writer.WriteNull("nonce");

            if (webConnectionTransactionInputInteractionsInner.ToOption.IsSet)
                if (webConnectionTransactionInputInteractionsInner.ToOption.Value != null)
                    writer.WriteString("to", webConnectionTransactionInputInteractionsInner.To);
                else
                    writer.WriteNull("to");

            if (webConnectionTransactionInputInteractionsInner.ValueOption.IsSet)
                if (webConnectionTransactionInputInteractionsInner.ValueOption.Value != null)
                    writer.WriteString("value", webConnectionTransactionInputInteractionsInner.Value);
                else
                    writer.WriteNull("value");
        }
    }
}