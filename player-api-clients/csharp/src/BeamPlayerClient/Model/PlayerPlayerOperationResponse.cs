// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamPlayerClient.Client.ClientUtils;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerPlayerOperationResponse
    /// </summary>
    public partial class PlayerPlayerOperationResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerPlayerOperationResponse" /> class.
        /// </summary>
        /// <param name="actions">actions</param>
        /// <param name="authProvider">authProvider</param>
        /// <param name="chainId">chainId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="gameId">gameId</param>
        /// <param name="id">id</param>
        /// <param name="processing">processing</param>
        /// <param name="status">status</param>
        /// <param name="transactions">transactions</param>
        /// <param name="url">url</param>
        /// <param name="userId">userId</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public PlayerPlayerOperationResponse(List<PlayerOperationAction> actions, AuthProviderEnum authProvider, long chainId, DateTime createdAt, string gameId, string id, ProcessingEnum processing, StatusEnum status, List<PlayerPlayerOperationResponseTransactionsInner> transactions, string url, string userId, DateTime? updatedAt = default)
        {
            Actions = actions;
            AuthProvider = authProvider;
            ChainId = chainId;
            CreatedAt = createdAt;
            GameId = gameId;
            Id = id;
            Processing = processing;
            Status = status;
            Transactions = transactions;
            Url = url;
            UserId = userId;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines AuthProvider
        /// </summary>
        [JsonConverter(typeof(AuthProviderEnumJsonConverter))]
        public enum AuthProviderEnum
        {
            /// <summary>
            /// Enum Any for value: Any
            /// </summary>
            Any = 1,

            /// <summary>
            /// Enum Google for value: Google
            /// </summary>
            Google = 2,

            /// <summary>
            /// Enum Discord for value: Discord
            /// </summary>
            Discord = 3,

            /// <summary>
            /// Enum Apple for value: Apple
            /// </summary>
            Apple = 4
        }

        /// <summary>
        /// Returns a <see cref="AuthProviderEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AuthProviderEnum AuthProviderEnumFromString(string value)
        {
            if (value.Equals("Any"))
                return AuthProviderEnum.Any;

            if (value.Equals("Google"))
                return AuthProviderEnum.Google;

            if (value.Equals("Discord"))
                return AuthProviderEnum.Discord;

            if (value.Equals("Apple"))
                return AuthProviderEnum.Apple;

            throw new NotImplementedException($"Could not convert value to type AuthProviderEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AuthProviderEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AuthProviderEnum? AuthProviderEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Any"))
                return AuthProviderEnum.Any;

            if (value.Equals("Google"))
                return AuthProviderEnum.Google;

            if (value.Equals("Discord"))
                return AuthProviderEnum.Discord;

            if (value.Equals("Apple"))
                return AuthProviderEnum.Apple;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AuthProviderEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AuthProviderEnumToJsonValue(AuthProviderEnum value)
        {
            if (value == AuthProviderEnum.Any)
                return "Any";

            if (value == AuthProviderEnum.Google)
                return "Google";

            if (value == AuthProviderEnum.Discord)
                return "Discord";

            if (value == AuthProviderEnum.Apple)
                return "Apple";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="AuthProviderEnum"/> to and from the JSON value
        /// </summary>
        public static class AuthProviderEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="AuthProviderEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static AuthProviderEnum FromString(string value)
            {
                    if (value.Equals("Any"))
                        return AuthProviderEnum.Any;

                    if (value.Equals("Google"))
                        return AuthProviderEnum.Google;

                    if (value.Equals("Discord"))
                        return AuthProviderEnum.Discord;

                    if (value.Equals("Apple"))
                        return AuthProviderEnum.Apple;

                throw new NotImplementedException($"Could not convert value to type AuthProviderEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="AuthProviderEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static AuthProviderEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("Any"))
                        return AuthProviderEnum.Any;

                    if (value.Equals("Google"))
                        return AuthProviderEnum.Google;

                    if (value.Equals("Discord"))
                        return AuthProviderEnum.Discord;

                    if (value.Equals("Apple"))
                        return AuthProviderEnum.Apple;

                return null;
            }

            /// <summary>
            /// Converts the <see cref="AuthProviderEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(AuthProviderEnum value)
            {
                        if (value == AuthProviderEnum.Any)
                            return "Any";

                        if (value == AuthProviderEnum.Google)
                            return "Google";

                        if (value == AuthProviderEnum.Discord)
                            return "Discord";

                        if (value == AuthProviderEnum.Apple)
                            return "Apple";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="AuthProviderEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class AuthProviderEnumJsonConverter : JsonConverter<AuthProviderEnum>
        {
            /// <summary>
            /// Returns a AuthProviderEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override AuthProviderEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string? rawValue = reader.GetString();

                AuthProviderEnum? result = rawValue == null
                    ? null
                    : AuthProviderEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                    return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the AuthProviderEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="authProviderEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, AuthProviderEnum authProviderEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(AuthProviderEnumValueConverter.ToJsonValue(authProviderEnum));
            }
        }

        /// <summary>
        /// Gets or Sets AuthProvider
        /// </summary>
        [JsonPropertyName("authProvider")]
        public AuthProviderEnum AuthProvider { get; set; }

        /// <summary>
        /// Defines Processing
        /// </summary>
        [JsonConverter(typeof(ProcessingEnumJsonConverter))]
        public enum ProcessingEnum
        {
            /// <summary>
            /// Enum SignOnly for value: SignOnly
            /// </summary>
            SignOnly = 1,

            /// <summary>
            /// Enum Execute for value: Execute
            /// </summary>
            Execute = 2
        }

        /// <summary>
        /// Returns a <see cref="ProcessingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ProcessingEnum ProcessingEnumFromString(string value)
        {
            if (value.Equals("SignOnly"))
                return ProcessingEnum.SignOnly;

            if (value.Equals("Execute"))
                return ProcessingEnum.Execute;

            throw new NotImplementedException($"Could not convert value to type ProcessingEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ProcessingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ProcessingEnum? ProcessingEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SignOnly"))
                return ProcessingEnum.SignOnly;

            if (value.Equals("Execute"))
                return ProcessingEnum.Execute;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ProcessingEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ProcessingEnumToJsonValue(ProcessingEnum value)
        {
            if (value == ProcessingEnum.SignOnly)
                return "SignOnly";

            if (value == ProcessingEnum.Execute)
                return "Execute";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="ProcessingEnum"/> to and from the JSON value
        /// </summary>
        public static class ProcessingEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="ProcessingEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static ProcessingEnum FromString(string value)
            {
                    if (value.Equals("SignOnly"))
                        return ProcessingEnum.SignOnly;

                    if (value.Equals("Execute"))
                        return ProcessingEnum.Execute;

                throw new NotImplementedException($"Could not convert value to type ProcessingEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="ProcessingEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static ProcessingEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("SignOnly"))
                        return ProcessingEnum.SignOnly;

                    if (value.Equals("Execute"))
                        return ProcessingEnum.Execute;

                return null;
            }

            /// <summary>
            /// Converts the <see cref="ProcessingEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(ProcessingEnum value)
            {
                        if (value == ProcessingEnum.SignOnly)
                            return "SignOnly";

                        if (value == ProcessingEnum.Execute)
                            return "Execute";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="ProcessingEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class ProcessingEnumJsonConverter : JsonConverter<ProcessingEnum>
        {
            /// <summary>
            /// Returns a ProcessingEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override ProcessingEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string? rawValue = reader.GetString();

                ProcessingEnum? result = rawValue == null
                    ? null
                    : ProcessingEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                    return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the ProcessingEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="processingEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, ProcessingEnum processingEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(ProcessingEnumValueConverter.ToJsonValue(processingEnum));
            }
        }

        /// <summary>
        /// Gets or Sets Processing
        /// </summary>
        [JsonPropertyName("processing")]
        public ProcessingEnum Processing { get; set; }

        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StatusEnumJsonConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum Signed for value: Signed
            /// </summary>
            Signed = 2,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            Rejected = 3,

            /// <summary>
            /// Enum Executed for value: Executed
            /// </summary>
            Executed = 4,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            Error = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Signed"))
                return StatusEnum.Signed;

            if (value.Equals("Rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("Executed"))
                return StatusEnum.Executed;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Signed"))
                return StatusEnum.Signed;

            if (value.Equals("Rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("Executed"))
                return StatusEnum.Executed;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Pending)
                return "Pending";

            if (value == StatusEnum.Signed)
                return "Signed";

            if (value == StatusEnum.Rejected)
                return "Rejected";

            if (value == StatusEnum.Executed)
                return "Executed";

            if (value == StatusEnum.Error)
                return "Error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="StatusEnum"/> to and from the JSON value
        /// </summary>
        public static class StatusEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="StatusEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static StatusEnum FromString(string value)
            {
                    if (value.Equals("Pending"))
                        return StatusEnum.Pending;

                    if (value.Equals("Signed"))
                        return StatusEnum.Signed;

                    if (value.Equals("Rejected"))
                        return StatusEnum.Rejected;

                    if (value.Equals("Executed"))
                        return StatusEnum.Executed;

                    if (value.Equals("Error"))
                        return StatusEnum.Error;

                throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="StatusEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static StatusEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("Pending"))
                        return StatusEnum.Pending;

                    if (value.Equals("Signed"))
                        return StatusEnum.Signed;

                    if (value.Equals("Rejected"))
                        return StatusEnum.Rejected;

                    if (value.Equals("Executed"))
                        return StatusEnum.Executed;

                    if (value.Equals("Error"))
                        return StatusEnum.Error;

                return null;
            }

            /// <summary>
            /// Converts the <see cref="StatusEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(StatusEnum value)
            {
                        if (value == StatusEnum.Pending)
                            return "Pending";

                        if (value == StatusEnum.Signed)
                            return "Signed";

                        if (value == StatusEnum.Rejected)
                            return "Rejected";

                        if (value == StatusEnum.Executed)
                            return "Executed";

                        if (value == StatusEnum.Error)
                            return "Error";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="StatusEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class StatusEnumJsonConverter : JsonConverter<StatusEnum>
        {
            /// <summary>
            /// Returns a StatusEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override StatusEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string? rawValue = reader.GetString();

                StatusEnum? result = rawValue == null
                    ? null
                    : StatusEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                    return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the StatusEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="statusEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, StatusEnum statusEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(StatusEnumValueConverter.ToJsonValue(statusEnum));
            }
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [JsonPropertyName("actions")]
        public List<PlayerOperationAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public long ChainId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [JsonPropertyName("gameId")]
        public string GameId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [JsonPropertyName("transactions")]
        [Obsolete]
        public List<PlayerPlayerOperationResponseTransactionsInner> Transactions { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerPlayerOperationResponse {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  AuthProvider: ").Append(AuthProvider).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Processing: ").Append(Processing).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerPlayerOperationResponse" />
    /// </summary>
    public class PlayerPlayerOperationResponseJsonConverter : JsonConverter<PlayerPlayerOperationResponse>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PlayerPlayerOperationResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerPlayerOperationResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<PlayerOperationAction>?> actions = default;
            Option<PlayerPlayerOperationResponse.AuthProviderEnum?> authProvider = default;
            Option<long?> chainId = default;
            Option<DateTime?> createdAt = default;
            Option<string?> gameId = default;
            Option<string?> id = default;
            Option<PlayerPlayerOperationResponse.ProcessingEnum?> processing = default;
            Option<PlayerPlayerOperationResponse.StatusEnum?> status = default;
            Option<List<PlayerPlayerOperationResponseTransactionsInner>?> transactions = default;
            Option<string?> url = default;
            Option<string?> userId = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actions = new Option<List<PlayerOperationAction>?>(JsonSerializer.Deserialize<List<PlayerOperationAction>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "authProvider":
                            string? authProviderRawValue = utf8JsonReader.GetString();
                            if (authProviderRawValue != null)
                                authProvider = new Option<PlayerPlayerOperationResponse.AuthProviderEnum?>(PlayerPlayerOperationResponse.AuthProviderEnumFromStringOrDefault(authProviderRawValue));
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "gameId":
                            gameId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "processing":
                            string? processingRawValue = utf8JsonReader.GetString();
                            if (processingRawValue != null)
                                processing = new Option<PlayerPlayerOperationResponse.ProcessingEnum?>(PlayerPlayerOperationResponse.ProcessingEnumFromStringOrDefault(processingRawValue));
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<PlayerPlayerOperationResponse.StatusEnum?>(PlayerPlayerOperationResponse.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "transactions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactions = new Option<List<PlayerPlayerOperationResponseTransactionsInner>?>(JsonSerializer.Deserialize<List<PlayerPlayerOperationResponseTransactionsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "userId":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!actions.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(actions));

            if (!authProvider.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(authProvider));

            if (!chainId.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(chainId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(createdAt));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(gameId));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(id));

            if (!processing.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(processing));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(status));

            if (!transactions.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(transactions));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(url));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(userId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class PlayerPlayerOperationResponse.", nameof(updatedAt));

            if (actions.IsSet && actions.Value == null)
                throw new ArgumentNullException(nameof(actions), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (authProvider.IsSet && authProvider.Value == null)
                throw new ArgumentNullException(nameof(authProvider), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (processing.IsSet && processing.Value == null)
                throw new ArgumentNullException(nameof(processing), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (transactions.IsSet && transactions.Value == null)
                throw new ArgumentNullException(nameof(transactions), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class PlayerPlayerOperationResponse.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class PlayerPlayerOperationResponse.");

            return new PlayerPlayerOperationResponse(actions.Value!, authProvider.Value!.Value!, chainId.Value!.Value!, createdAt.Value!.Value!, gameId.Value!, id.Value!, processing.Value!.Value!, status.Value!.Value!, transactions.Value!, url.Value!, userId.Value!, updatedAt.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerPlayerOperationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerPlayerOperationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerPlayerOperationResponse playerPlayerOperationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, playerPlayerOperationResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerPlayerOperationResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerPlayerOperationResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PlayerPlayerOperationResponse playerPlayerOperationResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerPlayerOperationResponse.Actions == null)
                throw new ArgumentNullException(nameof(playerPlayerOperationResponse.Actions), "Property is required for class PlayerPlayerOperationResponse.");

            if (playerPlayerOperationResponse.GameId == null)
                throw new ArgumentNullException(nameof(playerPlayerOperationResponse.GameId), "Property is required for class PlayerPlayerOperationResponse.");

            if (playerPlayerOperationResponse.Id == null)
                throw new ArgumentNullException(nameof(playerPlayerOperationResponse.Id), "Property is required for class PlayerPlayerOperationResponse.");

            if (playerPlayerOperationResponse.Transactions == null)
                throw new ArgumentNullException(nameof(playerPlayerOperationResponse.Transactions), "Property is required for class PlayerPlayerOperationResponse.");

            if (playerPlayerOperationResponse.Url == null)
                throw new ArgumentNullException(nameof(playerPlayerOperationResponse.Url), "Property is required for class PlayerPlayerOperationResponse.");

            if (playerPlayerOperationResponse.UserId == null)
                throw new ArgumentNullException(nameof(playerPlayerOperationResponse.UserId), "Property is required for class PlayerPlayerOperationResponse.");

            writer.WritePropertyName("actions");
            JsonSerializer.Serialize(writer, playerPlayerOperationResponse.Actions, jsonSerializerOptions);
            var authProviderRawValue = PlayerPlayerOperationResponse.AuthProviderEnumToJsonValue(playerPlayerOperationResponse.AuthProvider);
            writer.WriteString("authProvider", authProviderRawValue);
            writer.WriteNumber("chainId", playerPlayerOperationResponse.ChainId);

            writer.WriteString("createdAt", playerPlayerOperationResponse.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("gameId", playerPlayerOperationResponse.GameId);

            writer.WriteString("id", playerPlayerOperationResponse.Id);

            var processingRawValue = PlayerPlayerOperationResponse.ProcessingEnumToJsonValue(playerPlayerOperationResponse.Processing);
            writer.WriteString("processing", processingRawValue);
            var statusRawValue = PlayerPlayerOperationResponse.StatusEnumToJsonValue(playerPlayerOperationResponse.Status);
            writer.WriteString("status", statusRawValue);
            writer.WritePropertyName("transactions");
            JsonSerializer.Serialize(writer, playerPlayerOperationResponse.Transactions, jsonSerializerOptions);
            writer.WriteString("url", playerPlayerOperationResponse.Url);

            writer.WriteString("userId", playerPlayerOperationResponse.UserId);

            if (playerPlayerOperationResponse.UpdatedAt != null)
                writer.WriteString("updatedAt", playerPlayerOperationResponse.UpdatedAt.Value.ToString(UpdatedAtFormat));
            else
                writer.WriteNull("updatedAt");
        }
    }
}