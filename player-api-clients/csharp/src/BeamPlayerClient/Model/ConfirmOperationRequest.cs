// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamPlayerClient.Client.ClientUtils;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// ConfirmOperationRequest
    /// </summary>
    public partial class ConfirmOperationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfirmOperationRequest" /> class.
        /// </summary>
        /// <param name="entityId">entityId</param>
        /// <param name="gameId">gameId</param>
        /// <param name="status">status</param>
        /// <param name="transactions">transactions</param>
        [JsonConstructor]
        public ConfirmOperationRequest(string entityId, string gameId, StatusEnum status, Option<List<ConfirmOperationRequestTransactionsInner>?> transactions = default)
        {
            EntityId = entityId;
            GameId = gameId;
            Status = status;
            TransactionsOption = transactions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Signed for value: Signed
            /// </summary>
            Signed = 1,

            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            Pending = 2,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            Rejected = 3,

            /// <summary>
            /// Enum Executed for value: Executed
            /// </summary>
            Executed = 4,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            Error = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("Signed"))
                return StatusEnum.Signed;

            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("Executed"))
                return StatusEnum.Executed;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Signed"))
                return StatusEnum.Signed;

            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("Executed"))
                return StatusEnum.Executed;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Signed)
                return "Signed";

            if (value == StatusEnum.Pending)
                return "Pending";

            if (value == StatusEnum.Rejected)
                return "Rejected";

            if (value == StatusEnum.Executed)
                return "Executed";

            if (value == StatusEnum.Error)
                return "Error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [JsonPropertyName("entityId")]
        public string EntityId { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [JsonPropertyName("gameId")]
        public string GameId { get; set; }

        /// <summary>
        /// Used to track the state of Transactions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ConfirmOperationRequestTransactionsInner>?> TransactionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Transactions
        /// </summary>
        [JsonPropertyName("transactions")]
        public List<ConfirmOperationRequestTransactionsInner>? Transactions { get { return this. TransactionsOption; } set { this.TransactionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConfirmOperationRequest {\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ConfirmOperationRequest" />
    /// </summary>
    public class ConfirmOperationRequestJsonConverter : JsonConverter<ConfirmOperationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ConfirmOperationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ConfirmOperationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> entityId = default;
            Option<string?> gameId = default;
            Option<ConfirmOperationRequest.StatusEnum?> status = default;
            Option<List<ConfirmOperationRequestTransactionsInner>?> transactions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "entityId":
                            entityId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gameId":
                            gameId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<ConfirmOperationRequest.StatusEnum?>(ConfirmOperationRequest.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "transactions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transactions = new Option<List<ConfirmOperationRequestTransactionsInner>?>(JsonSerializer.Deserialize<List<ConfirmOperationRequestTransactionsInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!entityId.IsSet)
                throw new ArgumentException("Property is required for class ConfirmOperationRequest.", nameof(entityId));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class ConfirmOperationRequest.", nameof(gameId));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ConfirmOperationRequest.", nameof(status));

            if (entityId.IsSet && entityId.Value == null)
                throw new ArgumentNullException(nameof(entityId), "Property is not nullable for class ConfirmOperationRequest.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class ConfirmOperationRequest.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ConfirmOperationRequest.");

            return new ConfirmOperationRequest(entityId.Value!, gameId.Value!, status.Value!.Value!, transactions);
        }

        /// <summary>
        /// Serializes a <see cref="ConfirmOperationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ConfirmOperationRequest confirmOperationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, confirmOperationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ConfirmOperationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="confirmOperationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, ConfirmOperationRequest confirmOperationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (confirmOperationRequest.EntityId == null)
                throw new ArgumentNullException(nameof(confirmOperationRequest.EntityId), "Property is required for class ConfirmOperationRequest.");

            if (confirmOperationRequest.GameId == null)
                throw new ArgumentNullException(nameof(confirmOperationRequest.GameId), "Property is required for class ConfirmOperationRequest.");

            writer.WriteString("entityId", confirmOperationRequest.EntityId);

            writer.WriteString("gameId", confirmOperationRequest.GameId);

            var statusRawValue = ConfirmOperationRequest.StatusEnumToJsonValue(confirmOperationRequest.Status);
            writer.WriteString("status", statusRawValue);
            if (confirmOperationRequest.TransactionsOption.IsSet)
                if (confirmOperationRequest.TransactionsOption.Value != null)
                {
                    writer.WritePropertyName("transactions");
                    JsonSerializer.Serialize(writer, confirmOperationRequest.Transactions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("transactions");
        }
    }
}