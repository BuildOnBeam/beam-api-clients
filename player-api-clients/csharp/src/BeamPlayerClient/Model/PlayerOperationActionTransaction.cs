// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerOperationActionTransaction
    /// </summary>
    public partial class PlayerOperationActionTransaction : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerOperationActionTransaction" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="id">id</param>
        /// <param name="sponsored">sponsored</param>
        /// <param name="openfortId">openfortId</param>
        /// <param name="actionId">actionId</param>
        /// <param name="hash">hash</param>
        [JsonConstructor]
        public PlayerOperationActionTransaction(StatusEnum status, string id, bool sponsored, string openfortId = default, string actionId = default, string hash = default)
        {
            Status = status;
            Id = id;
            Sponsored = sponsored;
            OpenfortId = openfortId;
            ActionId = actionId;
            Hash = hash;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StatusEnumJsonConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum Signed for value: Signed
            /// </summary>
            Signed = 2,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            Rejected = 3,

            /// <summary>
            /// Enum Executed for value: Executed
            /// </summary>
            Executed = 4,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            Error = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Signed"))
                return StatusEnum.Signed;

            if (value.Equals("Rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("Executed"))
                return StatusEnum.Executed;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Signed"))
                return StatusEnum.Signed;

            if (value.Equals("Rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("Executed"))
                return StatusEnum.Executed;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == null)
                return null;

            if (value == StatusEnum.Pending)
                return "Pending";

            if (value == StatusEnum.Signed)
                return "Signed";

            if (value == StatusEnum.Rejected)
                return "Rejected";

            if (value == StatusEnum.Executed)
                return "Executed";

            if (value == StatusEnum.Error)
                return "Error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="StatusEnum"/> to and from the JSON value
        /// </summary>
        public static class StatusEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="StatusEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static StatusEnum FromString(string value)
            {
                    if (value.Equals("Pending"))
                    return StatusEnum.Pending;

                    if (value.Equals("Signed"))
                    return StatusEnum.Signed;

                    if (value.Equals("Rejected"))
                    return StatusEnum.Rejected;

                    if (value.Equals("Executed"))
                    return StatusEnum.Executed;

                    if (value.Equals("Error"))
                    return StatusEnum.Error;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="StatusEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static StatusEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("Pending"))
                    return StatusEnum.Pending;

                    if (value.Equals("Signed"))
                    return StatusEnum.Signed;

                    if (value.Equals("Rejected"))
                    return StatusEnum.Rejected;

                    if (value.Equals("Executed"))
                    return StatusEnum.Executed;

                    if (value.Equals("Error"))
                    return StatusEnum.Error;

            return null;
            }

            /// <summary>
            /// Converts the <see cref="StatusEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(StatusEnum value)
            {
                        if (value == StatusEnum.Pending)
                        return "Pending";

                        if (value == StatusEnum.Signed)
                        return "Signed";

                        if (value == StatusEnum.Rejected)
                        return "Rejected";

                        if (value == StatusEnum.Executed)
                        return "Executed";

                        if (value == StatusEnum.Error)
                        return "Error";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="StatusEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class StatusEnumJsonConverter : JsonConverter<StatusEnum>
        {
            /// <summary>
            /// Returns a StatusEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override StatusEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string rawValue = reader.GetString();

                StatusEnum? result = rawValue == null
                ? null
                : StatusEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the StatusEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="statusEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, StatusEnum statusEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(StatusEnumValueConverter.ToJsonValue(statusEnum));
            }
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Sponsored
        /// </summary>
        [JsonPropertyName("sponsored")]
        public bool Sponsored { get; set; }

        /// <summary>
        /// Gets or Sets OpenfortId
        /// </summary>
        [JsonPropertyName("openfortId")]
        public string OpenfortId { get; set; }

        /// <summary>
        /// Gets or Sets ActionId
        /// </summary>
        [JsonPropertyName("actionId")]
        public string ActionId { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [JsonPropertyName("hash")]
        public string Hash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerOperationActionTransaction {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sponsored: ").Append(Sponsored).Append("\n");
            sb.Append("  OpenfortId: ").Append(OpenfortId).Append("\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerOperationActionTransaction" />
    /// </summary>
    public class PlayerOperationActionTransactionJsonConverter : JsonConverter<PlayerOperationActionTransaction>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerOperationActionTransaction" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerOperationActionTransaction Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PlayerOperationActionTransaction.StatusEnum?> status = default;
            Option<string> id = default;
            Option<bool?> sponsored = default;
            Option<string> openfortId = default;
            Option<string> actionId = default;
            Option<string> hash = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<PlayerOperationActionTransaction.StatusEnum?>(PlayerOperationActionTransaction.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sponsored":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sponsored = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "openfortId":
                            openfortId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "actionId":
                            actionId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "hash":
                            hash = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionTransaction.", nameof(status));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionTransaction.", nameof(id));

            if (!sponsored.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionTransaction.", nameof(sponsored));

            if (!openfortId.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionTransaction.", nameof(openfortId));

            if (!actionId.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionTransaction.", nameof(actionId));

            if (!hash.IsSet)
                throw new ArgumentException("Property is required for class PlayerOperationActionTransaction.", nameof(hash));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class PlayerOperationActionTransaction.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PlayerOperationActionTransaction.");

            if (sponsored.IsSet && sponsored.Value == null)
                throw new ArgumentNullException(nameof(sponsored), "Property is not nullable for class PlayerOperationActionTransaction.");

            return new PlayerOperationActionTransaction(status.Value.Value, id.Value, sponsored.Value.Value, openfortId.Value, actionId.Value, hash.Value);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerOperationActionTransaction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerOperationActionTransaction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerOperationActionTransaction playerOperationActionTransaction, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerOperationActionTransaction, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerOperationActionTransaction" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerOperationActionTransaction"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerOperationActionTransaction playerOperationActionTransaction, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerOperationActionTransaction.Id == null)
                throw new ArgumentNullException(nameof(playerOperationActionTransaction.Id), "Property is required for class PlayerOperationActionTransaction.");

            var statusRawValue = PlayerOperationActionTransaction.StatusEnumToJsonValue(playerOperationActionTransaction.Status);
            if (statusRawValue != null)
                writer.WriteString("status", statusRawValue);
            writer.WriteString("id", playerOperationActionTransaction.Id);

            writer.WriteBoolean("sponsored", playerOperationActionTransaction.Sponsored);

            if (playerOperationActionTransaction.OpenfortId != null)
            {
                writer.WriteString("openfortId", playerOperationActionTransaction.OpenfortId);
            }
            else
            {
                writer.WriteNull("openfortId");
            }

            if (playerOperationActionTransaction.ActionId != null)
            {
                writer.WriteString("actionId", playerOperationActionTransaction.ActionId);
            }
            else
            {
                writer.WriteNull("actionId");
            }

            if (playerOperationActionTransaction.Hash != null)
            {
                writer.WriteString("hash", playerOperationActionTransaction.Hash);
            }
            else
            {
                writer.WriteNull("hash");
            }
        }
    }
}