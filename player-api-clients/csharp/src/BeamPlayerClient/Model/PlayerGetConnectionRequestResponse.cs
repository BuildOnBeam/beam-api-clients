// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerGetConnectionRequestResponse
    /// </summary>
    public partial class PlayerGetConnectionRequestResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerGetConnectionRequestResponse" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="authProvider">authProvider</param>
        /// <param name="id">id</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="gameId">gameId</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="entityId">entityId</param>
        [JsonConstructor]
        public PlayerGetConnectionRequestResponse(StatusEnum status, AuthProviderEnum authProvider, string id, DateTime createdAt, string gameId, DateTime? updatedAt = default, string entityId = default)
        {
            Status = status;
            AuthProvider = authProvider;
            Id = id;
            CreatedAt = createdAt;
            GameId = gameId;
            UpdatedAt = updatedAt;
            EntityId = entityId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StatusEnumJsonConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum Connected for value: Connected
            /// </summary>
            Connected = 2,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            Error = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Connected"))
                return StatusEnum.Connected;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Connected"))
                return StatusEnum.Connected;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == null)
                return null;

            if (value == StatusEnum.Pending)
                return "Pending";

            if (value == StatusEnum.Connected)
                return "Connected";

            if (value == StatusEnum.Error)
                return "Error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="StatusEnum"/> to and from the JSON value
        /// </summary>
        public static class StatusEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="StatusEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static StatusEnum FromString(string value)
            {
                    if (value.Equals("Pending"))
                    return StatusEnum.Pending;

                    if (value.Equals("Connected"))
                    return StatusEnum.Connected;

                    if (value.Equals("Error"))
                    return StatusEnum.Error;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="StatusEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static StatusEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("Pending"))
                    return StatusEnum.Pending;

                    if (value.Equals("Connected"))
                    return StatusEnum.Connected;

                    if (value.Equals("Error"))
                    return StatusEnum.Error;

            return null;
            }

            /// <summary>
            /// Converts the <see cref="StatusEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(StatusEnum value)
            {
                        if (value == StatusEnum.Pending)
                        return "Pending";

                        if (value == StatusEnum.Connected)
                        return "Connected";

                        if (value == StatusEnum.Error)
                        return "Error";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="StatusEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class StatusEnumJsonConverter : JsonConverter<StatusEnum>
        {
            /// <summary>
            /// Returns a StatusEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override StatusEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string rawValue = reader.GetString();

                StatusEnum? result = rawValue == null
                ? null
                : StatusEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the StatusEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="statusEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, StatusEnum statusEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(StatusEnumValueConverter.ToJsonValue(statusEnum));
            }
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Defines AuthProvider
        /// </summary>
        [JsonConverter(typeof(AuthProviderEnumJsonConverter))]
        public enum AuthProviderEnum
        {
            /// <summary>
            /// Enum Any for value: Any
            /// </summary>
            Any = 1,

            /// <summary>
            /// Enum Google for value: Google
            /// </summary>
            Google = 2,

            /// <summary>
            /// Enum Discord for value: Discord
            /// </summary>
            Discord = 3,

            /// <summary>
            /// Enum Apple for value: Apple
            /// </summary>
            Apple = 4
        }

        /// <summary>
        /// Returns a <see cref="AuthProviderEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static AuthProviderEnum AuthProviderEnumFromString(string value)
        {
            if (value.Equals("Any"))
                return AuthProviderEnum.Any;

            if (value.Equals("Google"))
                return AuthProviderEnum.Google;

            if (value.Equals("Discord"))
                return AuthProviderEnum.Discord;

            if (value.Equals("Apple"))
                return AuthProviderEnum.Apple;

            throw new NotImplementedException($"Could not convert value to type AuthProviderEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="AuthProviderEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static AuthProviderEnum? AuthProviderEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Any"))
                return AuthProviderEnum.Any;

            if (value.Equals("Google"))
                return AuthProviderEnum.Google;

            if (value.Equals("Discord"))
                return AuthProviderEnum.Discord;

            if (value.Equals("Apple"))
                return AuthProviderEnum.Apple;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="AuthProviderEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string AuthProviderEnumToJsonValue(AuthProviderEnum value)
        {
            if (value == null)
                return null;

            if (value == AuthProviderEnum.Any)
                return "Any";

            if (value == AuthProviderEnum.Google)
                return "Google";

            if (value == AuthProviderEnum.Discord)
                return "Discord";

            if (value == AuthProviderEnum.Apple)
                return "Apple";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="AuthProviderEnum"/> to and from the JSON value
        /// </summary>
        public static class AuthProviderEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="AuthProviderEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static AuthProviderEnum FromString(string value)
            {
                    if (value.Equals("Any"))
                    return AuthProviderEnum.Any;

                    if (value.Equals("Google"))
                    return AuthProviderEnum.Google;

                    if (value.Equals("Discord"))
                    return AuthProviderEnum.Discord;

                    if (value.Equals("Apple"))
                    return AuthProviderEnum.Apple;

            throw new NotImplementedException($"Could not convert value to type AuthProviderEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="AuthProviderEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static AuthProviderEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("Any"))
                    return AuthProviderEnum.Any;

                    if (value.Equals("Google"))
                    return AuthProviderEnum.Google;

                    if (value.Equals("Discord"))
                    return AuthProviderEnum.Discord;

                    if (value.Equals("Apple"))
                    return AuthProviderEnum.Apple;

            return null;
            }

            /// <summary>
            /// Converts the <see cref="AuthProviderEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(AuthProviderEnum value)
            {
                        if (value == AuthProviderEnum.Any)
                        return "Any";

                        if (value == AuthProviderEnum.Google)
                        return "Google";

                        if (value == AuthProviderEnum.Discord)
                        return "Discord";

                        if (value == AuthProviderEnum.Apple)
                        return "Apple";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="AuthProviderEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class AuthProviderEnumJsonConverter : JsonConverter<AuthProviderEnum>
        {
            /// <summary>
            /// Returns a AuthProviderEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override AuthProviderEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string rawValue = reader.GetString();

                AuthProviderEnum? result = rawValue == null
                ? null
                : AuthProviderEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the AuthProviderEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="authProviderEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, AuthProviderEnum authProviderEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(AuthProviderEnumValueConverter.ToJsonValue(authProviderEnum));
            }
        }

        /// <summary>
        /// Gets or Sets AuthProvider
        /// </summary>
        [JsonPropertyName("authProvider")]
        public AuthProviderEnum AuthProvider { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [JsonPropertyName("gameId")]
        public string GameId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets EntityId
        /// </summary>
        [JsonPropertyName("entityId")]
        public string EntityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerGetConnectionRequestResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AuthProvider: ").Append(AuthProvider).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerGetConnectionRequestResponse" />
    /// </summary>
    public class PlayerGetConnectionRequestResponseJsonConverter : JsonConverter<PlayerGetConnectionRequestResponse>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="PlayerGetConnectionRequestResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerGetConnectionRequestResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PlayerGetConnectionRequestResponse.StatusEnum?> status = default;
            Option<PlayerGetConnectionRequestResponse.AuthProviderEnum?> authProvider = default;
            Option<string> id = default;
            Option<DateTime?> createdAt = default;
            Option<string> gameId = default;
            Option<DateTime?> updatedAt = default;
            Option<string> entityId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<PlayerGetConnectionRequestResponse.StatusEnum?>(PlayerGetConnectionRequestResponse.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "authProvider":
                            string authProviderRawValue = utf8JsonReader.GetString();
                            if (authProviderRawValue != null)
                                authProvider = new Option<PlayerGetConnectionRequestResponse.AuthProviderEnum?>(PlayerGetConnectionRequestResponse.AuthProviderEnumFromStringOrDefault(authProviderRawValue));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "gameId":
                            gameId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "entityId":
                            entityId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class PlayerGetConnectionRequestResponse.", nameof(status));

            if (!authProvider.IsSet)
                throw new ArgumentException("Property is required for class PlayerGetConnectionRequestResponse.", nameof(authProvider));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PlayerGetConnectionRequestResponse.", nameof(id));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class PlayerGetConnectionRequestResponse.", nameof(createdAt));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class PlayerGetConnectionRequestResponse.", nameof(gameId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class PlayerGetConnectionRequestResponse.", nameof(updatedAt));

            if (!entityId.IsSet)
                throw new ArgumentException("Property is required for class PlayerGetConnectionRequestResponse.", nameof(entityId));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class PlayerGetConnectionRequestResponse.");

            if (authProvider.IsSet && authProvider.Value == null)
                throw new ArgumentNullException(nameof(authProvider), "Property is not nullable for class PlayerGetConnectionRequestResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PlayerGetConnectionRequestResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class PlayerGetConnectionRequestResponse.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class PlayerGetConnectionRequestResponse.");

            return new PlayerGetConnectionRequestResponse(status.Value.Value, authProvider.Value.Value, id.Value, createdAt.Value.Value, gameId.Value, updatedAt.Value, entityId.Value);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerGetConnectionRequestResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerGetConnectionRequestResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerGetConnectionRequestResponse playerGetConnectionRequestResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerGetConnectionRequestResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerGetConnectionRequestResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerGetConnectionRequestResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerGetConnectionRequestResponse playerGetConnectionRequestResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerGetConnectionRequestResponse.Id == null)
                throw new ArgumentNullException(nameof(playerGetConnectionRequestResponse.Id), "Property is required for class PlayerGetConnectionRequestResponse.");

            if (playerGetConnectionRequestResponse.GameId == null)
                throw new ArgumentNullException(nameof(playerGetConnectionRequestResponse.GameId), "Property is required for class PlayerGetConnectionRequestResponse.");

            var statusRawValue = PlayerGetConnectionRequestResponse.StatusEnumToJsonValue(playerGetConnectionRequestResponse.Status);
            if (statusRawValue != null)
                writer.WriteString("status", statusRawValue);
            var authProviderRawValue = PlayerGetConnectionRequestResponse.AuthProviderEnumToJsonValue(playerGetConnectionRequestResponse.AuthProvider);
            if (authProviderRawValue != null)
                writer.WriteString("authProvider", authProviderRawValue);
            writer.WriteString("id", playerGetConnectionRequestResponse.Id);

            writer.WriteString("createdAt", playerGetConnectionRequestResponse.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("gameId", playerGetConnectionRequestResponse.GameId);

            if (playerGetConnectionRequestResponse.UpdatedAt != null)
            {
                writer.WriteString("updatedAt", playerGetConnectionRequestResponse.UpdatedAt.Value.ToString(UpdatedAtFormat));
            }
            else
            {
                writer.WriteNull("updatedAt");
            }

            if (playerGetConnectionRequestResponse.EntityId != null)
            {
                writer.WriteString("entityId", playerGetConnectionRequestResponse.EntityId);
            }
            else
            {
                writer.WriteNull("entityId");
            }
        }
    }
}