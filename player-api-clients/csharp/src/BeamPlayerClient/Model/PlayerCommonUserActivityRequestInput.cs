// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerCommonUserActivityRequestInput
    /// </summary>
    public partial class PlayerCommonUserActivityRequestInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerCommonUserActivityRequestInput" /> class.
        /// </summary>
        /// <param name="limit">limit (default to 20M)</param>
        /// <param name="types">types</param>
        /// <param name="chainId">chainId (default to 13337)</param>
        /// <param name="continuation">continuation</param>
        [JsonConstructor]
        public PlayerCommonUserActivityRequestInput(Option<decimal?> limit = default, Option<List<PlayerCommonUserActivityRequestInput.TypesEnum>> types = default, Option<long?> chainId = default, Option<string> continuation = default)
        {
            LimitOption = limit;
            TypesOption = types;
            ChainIdOption = chainId;
            ContinuationOption = continuation;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Types
        /// </summary>
        public enum TypesEnum
        {
            /// <summary>
            /// Enum Ask for value: ask
            /// </summary>
            Ask = 1,

            /// <summary>
            /// Enum AskCancel for value: ask_cancel
            /// </summary>
            AskCancel = 2,

            /// <summary>
            /// Enum Bid for value: bid
            /// </summary>
            Bid = 3,

            /// <summary>
            /// Enum BidCancel for value: bid_cancel
            /// </summary>
            BidCancel = 4,

            /// <summary>
            /// Enum Sale for value: sale
            /// </summary>
            Sale = 5,

            /// <summary>
            /// Enum Mint for value: mint
            /// </summary>
            Mint = 6,

            /// <summary>
            /// Enum Transfer for value: transfer
            /// </summary>
            Transfer = 7
        }

        /// <summary>
        /// Returns a <see cref="TypesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypesEnum TypesEnumFromString(string value)
        {
            if (value.Equals("ask"))
                return TypesEnum.Ask;

            if (value.Equals("ask_cancel"))
                return TypesEnum.AskCancel;

            if (value.Equals("bid"))
                return TypesEnum.Bid;

            if (value.Equals("bid_cancel"))
                return TypesEnum.BidCancel;

            if (value.Equals("sale"))
                return TypesEnum.Sale;

            if (value.Equals("mint"))
                return TypesEnum.Mint;

            if (value.Equals("transfer"))
                return TypesEnum.Transfer;

            throw new NotImplementedException($"Could not convert value to type TypesEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypesEnum? TypesEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ask"))
                return TypesEnum.Ask;

            if (value.Equals("ask_cancel"))
                return TypesEnum.AskCancel;

            if (value.Equals("bid"))
                return TypesEnum.Bid;

            if (value.Equals("bid_cancel"))
                return TypesEnum.BidCancel;

            if (value.Equals("sale"))
                return TypesEnum.Sale;

            if (value.Equals("mint"))
                return TypesEnum.Mint;

            if (value.Equals("transfer"))
                return TypesEnum.Transfer;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypesEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypesEnumToJsonValue(TypesEnum value)
        {
            if (value == null)
                return null;

            if (value == TypesEnum.Ask)
                return "ask";

            if (value == TypesEnum.AskCancel)
                return "ask_cancel";

            if (value == TypesEnum.Bid)
                return "bid";

            if (value == TypesEnum.BidCancel)
                return "bid_cancel";

            if (value == TypesEnum.Sale)
                return "sale";

            if (value == TypesEnum.Mint)
                return "mint";

            if (value == TypesEnum.Transfer)
                return "transfer";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [JsonPropertyName("limit")]
        public decimal? Limit { get { return this.LimitOption; } set { this.LimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of Types
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PlayerCommonUserActivityRequestInput.TypesEnum>> TypesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Types
        /// </summary>
        [JsonPropertyName("types")]
        public List<PlayerCommonUserActivityRequestInput.TypesEnum> Types { get { return this.TypesOption; } set { this.TypesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ChainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public long? ChainId { get { return this.ChainIdOption; } set { this.ChainIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Continuation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContinuationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Continuation
        /// </summary>
        [JsonPropertyName("continuation")]
        public string Continuation { get { return this.ContinuationOption; } set { this.ContinuationOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerCommonUserActivityRequestInput {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Continuation: ").Append(Continuation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Limit (decimal) maximum
            if (this.LimitOption.IsSet && this.LimitOption.Value > (decimal)20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value less than or equal to 20.", new [] { "Limit" });
            }

            // Limit (decimal) minimum
            if (this.LimitOption.IsSet && this.LimitOption.Value < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value greater than or equal to 1.", new [] { "Limit" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerCommonUserActivityRequestInput" />
    /// </summary>
    public class PlayerCommonUserActivityRequestInputJsonConverter : JsonConverter<PlayerCommonUserActivityRequestInput>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerCommonUserActivityRequestInput" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerCommonUserActivityRequestInput Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> limit = default;
            Option<List<PlayerCommonUserActivityRequestInput.TypesEnum>> types = default;
            Option<long?> chainId = default;
            Option<string> continuation = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "limit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                limit = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "types":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                types = new Option<List<PlayerCommonUserActivityRequestInput.TypesEnum>>(JsonSerializer.Deserialize<List<PlayerCommonUserActivityRequestInput.TypesEnum>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "continuation":
                            continuation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class PlayerCommonUserActivityRequestInput.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class PlayerCommonUserActivityRequestInput.");

            return new PlayerCommonUserActivityRequestInput(limit, types, chainId, continuation);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerCommonUserActivityRequestInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonUserActivityRequestInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerCommonUserActivityRequestInput playerCommonUserActivityRequestInput, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, playerCommonUserActivityRequestInput, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerCommonUserActivityRequestInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonUserActivityRequestInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PlayerCommonUserActivityRequestInput playerCommonUserActivityRequestInput, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerCommonUserActivityRequestInput.LimitOption.IsSet)
            {
                writer.WriteNumber("limit", playerCommonUserActivityRequestInput.LimitOption.Value.Value);
            }

            if (playerCommonUserActivityRequestInput.TypesOption.IsSet)
                if (playerCommonUserActivityRequestInput.TypesOption.Value != null)
                {
                    writer.WritePropertyName("types");
                    JsonSerializer.Serialize(writer, playerCommonUserActivityRequestInput.Types, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("types");
            if (playerCommonUserActivityRequestInput.ChainIdOption.IsSet)
            {
                writer.WriteNumber("chainId", playerCommonUserActivityRequestInput.ChainIdOption.Value.Value);
            }

            if (playerCommonUserActivityRequestInput.ContinuationOption.IsSet)
            {
                if (playerCommonUserActivityRequestInput.ContinuationOption.Value != null)
                {
                    writer.WriteString("continuation", playerCommonUserActivityRequestInput.Continuation);
                }
                else
                {
                    writer.WriteNull("continuation");
                }

            }
        }
    }
}