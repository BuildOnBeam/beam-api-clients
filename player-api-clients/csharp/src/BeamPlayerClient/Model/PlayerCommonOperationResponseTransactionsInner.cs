// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamPlayerClient.Client.ClientUtils;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerCommonOperationResponseTransactionsInner
    /// </summary>
    public partial class PlayerCommonOperationResponseTransactionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerCommonOperationResponseTransactionsInner" /> class.
        /// </summary>
        /// <param name="hash">hash</param>
        /// <param name="id">id</param>
        /// <param name="sponsored">sponsored</param>
        /// <param name="status">status</param>
        /// <param name="actionId">actionId</param>
        /// <param name="data">data</param>
        /// <param name="externalId">externalId</param>
        /// <param name="openfortId">openfortId</param>
        /// <param name="operationId">operationId</param>
        /// <param name="signature">signature</param>
        /// <param name="transactionHash">transactionHash</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public PlayerCommonOperationResponseTransactionsInner(string hash, string id, bool sponsored, StatusEnum status, string? actionId = default, Option<Object?> data = default, string? externalId = default, string? openfortId = default, string? operationId = default, string? signature = default, string? transactionHash = default, TypeEnum? type = default)
        {
            Hash = hash;
            Id = id;
            Sponsored = sponsored;
            Status = status;
            ActionId = actionId;
            DataOption = data;
            ExternalId = externalId;
            OpenfortId = openfortId;
            OperationId = operationId;
            Signature = signature;
            TransactionHash = transactionHash;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StatusEnumJsonConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: Pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum Signed for value: Signed
            /// </summary>
            Signed = 2,

            /// <summary>
            /// Enum Rejected for value: Rejected
            /// </summary>
            Rejected = 3,

            /// <summary>
            /// Enum Executed for value: Executed
            /// </summary>
            Executed = 4,

            /// <summary>
            /// Enum Error for value: Error
            /// </summary>
            Error = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Signed"))
                return StatusEnum.Signed;

            if (value.Equals("Rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("Executed"))
                return StatusEnum.Executed;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Pending"))
                return StatusEnum.Pending;

            if (value.Equals("Signed"))
                return StatusEnum.Signed;

            if (value.Equals("Rejected"))
                return StatusEnum.Rejected;

            if (value.Equals("Executed"))
                return StatusEnum.Executed;

            if (value.Equals("Error"))
                return StatusEnum.Error;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {
            if (value == StatusEnum.Pending)
                return "Pending";

            if (value == StatusEnum.Signed)
                return "Signed";

            if (value == StatusEnum.Rejected)
                return "Rejected";

            if (value == StatusEnum.Executed)
                return "Executed";

            if (value == StatusEnum.Error)
                return "Error";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="StatusEnum"/> to and from the JSON value
        /// </summary>
        public static class StatusEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="StatusEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static StatusEnum FromString(string value)
            {
                    if (value.Equals("Pending"))
                        return StatusEnum.Pending;

                    if (value.Equals("Signed"))
                        return StatusEnum.Signed;

                    if (value.Equals("Rejected"))
                        return StatusEnum.Rejected;

                    if (value.Equals("Executed"))
                        return StatusEnum.Executed;

                    if (value.Equals("Error"))
                        return StatusEnum.Error;

                throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="StatusEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static StatusEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("Pending"))
                        return StatusEnum.Pending;

                    if (value.Equals("Signed"))
                        return StatusEnum.Signed;

                    if (value.Equals("Rejected"))
                        return StatusEnum.Rejected;

                    if (value.Equals("Executed"))
                        return StatusEnum.Executed;

                    if (value.Equals("Error"))
                        return StatusEnum.Error;

                return null;
            }

            /// <summary>
            /// Converts the <see cref="StatusEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(StatusEnum value)
            {
                        if (value == StatusEnum.Pending)
                            return "Pending";

                        if (value == StatusEnum.Signed)
                            return "Signed";

                        if (value == StatusEnum.Rejected)
                            return "Rejected";

                        if (value == StatusEnum.Executed)
                            return "Executed";

                        if (value == StatusEnum.Error)
                            return "Error";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="StatusEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class StatusEnumJsonConverter : JsonConverter<StatusEnum>
        {
            /// <summary>
            /// Returns a StatusEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override StatusEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string? rawValue = reader.GetString();

                StatusEnum? result = rawValue == null
                    ? null
                    : StatusEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                    return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the StatusEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="statusEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, StatusEnum statusEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(StatusEnumValueConverter.ToJsonValue(statusEnum));
            }
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(TypeEnumJsonConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum OpenfortTransaction for value: OpenfortTransaction
            /// </summary>
            OpenfortTransaction = 1,

            /// <summary>
            /// Enum OpenfortReservoirOrder for value: OpenfortReservoirOrder
            /// </summary>
            OpenfortReservoirOrder = 2,

            /// <summary>
            /// Enum OpenfortRevokeSession for value: OpenfortRevokeSession
            /// </summary>
            OpenfortRevokeSession = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("OpenfortTransaction"))
                return TypeEnum.OpenfortTransaction;

            if (value.Equals("OpenfortReservoirOrder"))
                return TypeEnum.OpenfortReservoirOrder;

            if (value.Equals("OpenfortRevokeSession"))
                return TypeEnum.OpenfortRevokeSession;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("OpenfortTransaction"))
                return TypeEnum.OpenfortTransaction;

            if (value.Equals("OpenfortReservoirOrder"))
                return TypeEnum.OpenfortReservoirOrder;

            if (value.Equals("OpenfortRevokeSession"))
                return TypeEnum.OpenfortRevokeSession;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == TypeEnum.OpenfortTransaction)
                return "OpenfortTransaction";

            if (value == TypeEnum.OpenfortReservoirOrder)
                return "OpenfortReservoirOrder";

            if (value == TypeEnum.OpenfortRevokeSession)
                return "OpenfortRevokeSession";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="TypeEnum"/> to and from the JSON value
        /// </summary>
        public static class TypeEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="TypeEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static TypeEnum FromString(string value)
            {
                    if (value.Equals("OpenfortTransaction"))
                        return TypeEnum.OpenfortTransaction;

                    if (value.Equals("OpenfortReservoirOrder"))
                        return TypeEnum.OpenfortReservoirOrder;

                    if (value.Equals("OpenfortRevokeSession"))
                        return TypeEnum.OpenfortRevokeSession;

                throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="TypeEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static TypeEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("OpenfortTransaction"))
                        return TypeEnum.OpenfortTransaction;

                    if (value.Equals("OpenfortReservoirOrder"))
                        return TypeEnum.OpenfortReservoirOrder;

                    if (value.Equals("OpenfortRevokeSession"))
                        return TypeEnum.OpenfortRevokeSession;

                return null;
            }

            /// <summary>
            /// Converts the <see cref="TypeEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(TypeEnum value)
            {
                        if (value == TypeEnum.OpenfortTransaction)
                            return "OpenfortTransaction";

                        if (value == TypeEnum.OpenfortReservoirOrder)
                            return "OpenfortReservoirOrder";

                        if (value == TypeEnum.OpenfortRevokeSession)
                            return "OpenfortRevokeSession";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="TypeEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class TypeEnumJsonConverter : JsonConverter<TypeEnum>
        {
            /// <summary>
            /// Returns a TypeEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override TypeEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string? rawValue = reader.GetString();

                TypeEnum? result = rawValue == null
                    ? null
                    : TypeEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                    return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the TypeEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="typeEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, TypeEnum typeEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(TypeEnumValueConverter.ToJsonValue(typeEnum));
            }
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [JsonPropertyName("hash")]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Sponsored
        /// </summary>
        [JsonPropertyName("sponsored")]
        public bool Sponsored { get; set; }

        /// <summary>
        /// Gets or Sets ActionId
        /// </summary>
        [JsonPropertyName("actionId")]
        public string? ActionId { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object? Data { get { return this. DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [JsonPropertyName("externalId")]
        public string? ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets OpenfortId
        /// </summary>
        [JsonPropertyName("openfortId")]
        public string? OpenfortId { get; set; }

        /// <summary>
        /// Gets or Sets OperationId
        /// </summary>
        [JsonPropertyName("operationId")]
        public string? OperationId { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>
        [JsonPropertyName("signature")]
        public string? Signature { get; set; }

        /// <summary>
        /// Gets or Sets TransactionHash
        /// </summary>
        [JsonPropertyName("transactionHash")]
        public string? TransactionHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerCommonOperationResponseTransactionsInner {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Sponsored: ").Append(Sponsored).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  OpenfortId: ").Append(OpenfortId).Append("\n");
            sb.Append("  OperationId: ").Append(OperationId).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerCommonOperationResponseTransactionsInner" />
    /// </summary>
    public class PlayerCommonOperationResponseTransactionsInnerJsonConverter : JsonConverter<PlayerCommonOperationResponseTransactionsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerCommonOperationResponseTransactionsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerCommonOperationResponseTransactionsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> hash = default;
            Option<string?> id = default;
            Option<bool?> sponsored = default;
            Option<PlayerCommonOperationResponseTransactionsInner.StatusEnum?> status = default;
            Option<string?> actionId = default;
            Option<Object?> data = default;
            Option<string?> externalId = default;
            Option<string?> openfortId = default;
            Option<string?> operationId = default;
            Option<string?> signature = default;
            Option<string?> transactionHash = default;
            Option<PlayerCommonOperationResponseTransactionsInner.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hash":
                            hash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sponsored":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sponsored = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<PlayerCommonOperationResponseTransactionsInner.StatusEnum?>(PlayerCommonOperationResponseTransactionsInner.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "actionId":
                            actionId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "data":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "externalId":
                            externalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "openfortId":
                            openfortId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "operationId":
                            operationId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "signature":
                            signature = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "transactionHash":
                            transactionHash = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PlayerCommonOperationResponseTransactionsInner.TypeEnum?>(PlayerCommonOperationResponseTransactionsInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!hash.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(hash));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(id));

            if (!sponsored.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(sponsored));

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(status));

            if (!actionId.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(actionId));

            if (!externalId.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(externalId));

            if (!openfortId.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(openfortId));

            if (!operationId.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(operationId));

            if (!signature.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(signature));

            if (!transactionHash.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(transactionHash));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonOperationResponseTransactionsInner.", nameof(type));

            if (hash.IsSet && hash.Value == null)
                throw new ArgumentNullException(nameof(hash), "Property is not nullable for class PlayerCommonOperationResponseTransactionsInner.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PlayerCommonOperationResponseTransactionsInner.");

            if (sponsored.IsSet && sponsored.Value == null)
                throw new ArgumentNullException(nameof(sponsored), "Property is not nullable for class PlayerCommonOperationResponseTransactionsInner.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class PlayerCommonOperationResponseTransactionsInner.");

            return new PlayerCommonOperationResponseTransactionsInner(hash.Value!, id.Value!, sponsored.Value!.Value!, status.Value!.Value!, actionId.Value!, data, externalId.Value!, openfortId.Value!, operationId.Value!, signature.Value!, transactionHash.Value!, type.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerCommonOperationResponseTransactionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonOperationResponseTransactionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerCommonOperationResponseTransactionsInner playerCommonOperationResponseTransactionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, playerCommonOperationResponseTransactionsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerCommonOperationResponseTransactionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonOperationResponseTransactionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PlayerCommonOperationResponseTransactionsInner playerCommonOperationResponseTransactionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (playerCommonOperationResponseTransactionsInner.Hash == null)
                throw new ArgumentNullException(nameof(playerCommonOperationResponseTransactionsInner.Hash), "Property is required for class PlayerCommonOperationResponseTransactionsInner.");

            if (playerCommonOperationResponseTransactionsInner.Id == null)
                throw new ArgumentNullException(nameof(playerCommonOperationResponseTransactionsInner.Id), "Property is required for class PlayerCommonOperationResponseTransactionsInner.");

            writer.WriteString("hash", playerCommonOperationResponseTransactionsInner.Hash);

            writer.WriteString("id", playerCommonOperationResponseTransactionsInner.Id);

            writer.WriteBoolean("sponsored", playerCommonOperationResponseTransactionsInner.Sponsored);

            var statusRawValue = PlayerCommonOperationResponseTransactionsInner.StatusEnumToJsonValue(playerCommonOperationResponseTransactionsInner.Status);
            writer.WriteString("status", statusRawValue);
            if (playerCommonOperationResponseTransactionsInner.ActionId != null)
                writer.WriteString("actionId", playerCommonOperationResponseTransactionsInner.ActionId);
            else
                writer.WriteNull("actionId");

            if (playerCommonOperationResponseTransactionsInner.DataOption.IsSet)
                if (playerCommonOperationResponseTransactionsInner.DataOption.Value != null)
                {
                    writer.WritePropertyName("data");
                    JsonSerializer.Serialize(writer, playerCommonOperationResponseTransactionsInner.Data, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("data");
            if (playerCommonOperationResponseTransactionsInner.ExternalId != null)
                writer.WriteString("externalId", playerCommonOperationResponseTransactionsInner.ExternalId);
            else
                writer.WriteNull("externalId");

            if (playerCommonOperationResponseTransactionsInner.OpenfortId != null)
                writer.WriteString("openfortId", playerCommonOperationResponseTransactionsInner.OpenfortId);
            else
                writer.WriteNull("openfortId");

            if (playerCommonOperationResponseTransactionsInner.OperationId != null)
                writer.WriteString("operationId", playerCommonOperationResponseTransactionsInner.OperationId);
            else
                writer.WriteNull("operationId");

            if (playerCommonOperationResponseTransactionsInner.Signature != null)
                writer.WriteString("signature", playerCommonOperationResponseTransactionsInner.Signature);
            else
                writer.WriteNull("signature");

            if (playerCommonOperationResponseTransactionsInner.TransactionHash != null)
                writer.WriteString("transactionHash", playerCommonOperationResponseTransactionsInner.TransactionHash);
            else
                writer.WriteNull("transactionHash");

            var typeRawValue = PlayerCommonOperationResponseTransactionsInner.TypeEnumToJsonValue(playerCommonOperationResponseTransactionsInner.Type!.Value);
            if (typeRawValue != null)
                writer.WriteString("type", typeRawValue);
            else
                writer.WriteNull("type");
        }
    }
}