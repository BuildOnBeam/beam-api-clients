// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamPlayerClient.Client.ClientUtils;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerCommonStatsResponseCount
    /// </summary>
    public partial class PlayerCommonStatsResponseCount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerCommonStatsResponseCount" /> class.
        /// </summary>
        /// <param name="listed">listed</param>
        /// <param name="tokens">tokens</param>
        [JsonConstructor]
        public PlayerCommonStatsResponseCount(decimal listed, decimal tokens)
        {
            Listed = listed;
            Tokens = tokens;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Listed
        /// </summary>
        [JsonPropertyName("listed")]
        public decimal Listed { get; set; }

        /// <summary>
        /// Gets or Sets Tokens
        /// </summary>
        [JsonPropertyName("tokens")]
        public decimal Tokens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerCommonStatsResponseCount {\n");
            sb.Append("  Listed: ").Append(Listed).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerCommonStatsResponseCount" />
    /// </summary>
    public class PlayerCommonStatsResponseCountJsonConverter : JsonConverter<PlayerCommonStatsResponseCount>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerCommonStatsResponseCount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerCommonStatsResponseCount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> listed = default;
            Option<decimal?> tokens = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "listed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                listed = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "tokens":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tokens = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!listed.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonStatsResponseCount.", nameof(listed));

            if (!tokens.IsSet)
                throw new ArgumentException("Property is required for class PlayerCommonStatsResponseCount.", nameof(tokens));

            if (listed.IsSet && listed.Value == null)
                throw new ArgumentNullException(nameof(listed), "Property is not nullable for class PlayerCommonStatsResponseCount.");

            if (tokens.IsSet && tokens.Value == null)
                throw new ArgumentNullException(nameof(tokens), "Property is not nullable for class PlayerCommonStatsResponseCount.");

            return new PlayerCommonStatsResponseCount(listed.Value!.Value!, tokens.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerCommonStatsResponseCount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonStatsResponseCount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerCommonStatsResponseCount playerCommonStatsResponseCount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, playerCommonStatsResponseCount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerCommonStatsResponseCount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCommonStatsResponseCount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PlayerCommonStatsResponseCount playerCommonStatsResponseCount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("listed", playerCommonStatsResponseCount.Listed);

            writer.WriteNumber("tokens", playerCommonStatsResponseCount.Tokens);
        }
    }
}