// <auto-generated>
/*
 * Player API
 *
 * The Player API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamPlayerClient.Client.ClientUtils;
using BeamPlayerClient.Client;

namespace BeamPlayerClient.Model
{
    /// <summary>
    /// PlayerCreateOperationRequestInputTransactionsInner
    /// </summary>
    public partial class PlayerCreateOperationRequestInputTransactionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerCreateOperationRequestInputTransactionsInner" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="data">data</param>
        [JsonConstructor]
        public PlayerCreateOperationRequestInputTransactionsInner(TypeEnum type, Option<Object?> data = default)
        {
            Type = type;
            DataOption = data;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum OpenfortTransaction for value: OpenfortTransaction
            /// </summary>
            OpenfortTransaction = 1,

            /// <summary>
            /// Enum OpenfortReservoirOrder for value: OpenfortReservoirOrder
            /// </summary>
            OpenfortReservoirOrder = 2,

            /// <summary>
            /// Enum OpenfortRevokeSession for value: OpenfortRevokeSession
            /// </summary>
            OpenfortRevokeSession = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("OpenfortTransaction"))
                return TypeEnum.OpenfortTransaction;

            if (value.Equals("OpenfortReservoirOrder"))
                return TypeEnum.OpenfortReservoirOrder;

            if (value.Equals("OpenfortRevokeSession"))
                return TypeEnum.OpenfortRevokeSession;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("OpenfortTransaction"))
                return TypeEnum.OpenfortTransaction;

            if (value.Equals("OpenfortReservoirOrder"))
                return TypeEnum.OpenfortReservoirOrder;

            if (value.Equals("OpenfortRevokeSession"))
                return TypeEnum.OpenfortRevokeSession;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.OpenfortTransaction)
                return "OpenfortTransaction";

            if (value == TypeEnum.OpenfortReservoirOrder)
                return "OpenfortReservoirOrder";

            if (value == TypeEnum.OpenfortRevokeSession)
                return "OpenfortRevokeSession";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Used to track the state of Data
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [JsonPropertyName("data")]
        public Object? Data { get { return this. DataOption; } set { this.DataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerCreateOperationRequestInputTransactionsInner {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PlayerCreateOperationRequestInputTransactionsInner" />
    /// </summary>
    public class PlayerCreateOperationRequestInputTransactionsInnerJsonConverter : JsonConverter<PlayerCreateOperationRequestInputTransactionsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="PlayerCreateOperationRequestInputTransactionsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerCreateOperationRequestInputTransactionsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PlayerCreateOperationRequestInputTransactionsInner.TypeEnum?> type = default;
            Option<Object?> data = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<PlayerCreateOperationRequestInputTransactionsInner.TypeEnum?>(PlayerCreateOperationRequestInputTransactionsInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "data":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                data = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class PlayerCreateOperationRequestInputTransactionsInner.", nameof(type));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PlayerCreateOperationRequestInputTransactionsInner.");

            return new PlayerCreateOperationRequestInputTransactionsInner(type.Value!.Value!, data);
        }

        /// <summary>
        /// Serializes a <see cref="PlayerCreateOperationRequestInputTransactionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCreateOperationRequestInputTransactionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerCreateOperationRequestInputTransactionsInner playerCreateOperationRequestInputTransactionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, playerCreateOperationRequestInputTransactionsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PlayerCreateOperationRequestInputTransactionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerCreateOperationRequestInputTransactionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, PlayerCreateOperationRequestInputTransactionsInner playerCreateOperationRequestInputTransactionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            var typeRawValue = PlayerCreateOperationRequestInputTransactionsInner.TypeEnumToJsonValue(playerCreateOperationRequestInputTransactionsInner.Type);
            writer.WriteString("type", typeRawValue);
            if (playerCreateOperationRequestInputTransactionsInner.DataOption.IsSet)
                if (playerCreateOperationRequestInputTransactionsInner.DataOption.Value != null)
                {
                    writer.WritePropertyName("data");
                    JsonSerializer.Serialize(writer, playerCreateOperationRequestInputTransactionsInner.Data, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("data");
        }
    }
}