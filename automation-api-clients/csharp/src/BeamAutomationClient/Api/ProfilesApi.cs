// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamAutomationClient.Client;
using BeamAutomationClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamAutomationClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAutomationProfilesApi : IAutomationApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AutomationProfilesApiEvents Events { get; }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateLinkCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectionRequestApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<ICreateConnectionRequestApiResponse> CreateConnectionRequestAsync(string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateLinkCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectionRequestApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<ICreateConnectionRequestApiResponse> CreateConnectionRequestOrDefaultAsync(string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creating a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationCreateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProfileApiResponse"/>&gt;</returns>
        Task<ICreateProfileApiResponse> CreateProfileAsync(AutomationCreateProfileRequestInput automationCreateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creating a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="automationCreateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProfileApiResponse"/>&gt;</returns>
        Task<ICreateProfileApiResponse> CreateProfileOrDefaultAsync(AutomationCreateProfileRequestInput automationCreateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateSignInCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSignInRequestApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<ICreateSignInRequestApiResponse> CreateSignInRequestAsync(string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateSignInCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSignInRequestApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<ICreateSignInRequestApiResponse> CreateSignInRequestOrDefaultAsync(string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Getting all profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllProfilesApiResponse"/>&gt;</returns>
        Task<IGetAllProfilesApiResponse> GetAllProfilesAsync(Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Getting all profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllProfilesApiResponse"/>&gt;</returns>
        Task<IGetAllProfilesApiResponse> GetAllProfilesOrDefaultAsync(Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Getting information on a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileApiResponse"/>&gt;</returns>
        Task<IGetProfileApiResponse> GetProfileAsync(string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Getting information on a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileApiResponse"/>&gt;</returns>
        Task<IGetProfileApiResponse> GetProfileOrDefaultAsync(string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationUpdateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProfileApiResponse"/>&gt;</returns>
        Task<IUpdateProfileApiResponse> UpdateProfileAsync(string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Update a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationUpdateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProfileApiResponse"/>&gt;</returns>
        Task<IUpdateProfileApiResponse> UpdateProfileOrDefaultAsync(string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateConnectionRequestApiResponse"/>
    /// </summary>
    public interface ICreateConnectionRequestApiResponse : BeamAutomationClient.Client.IApiResponse, ICreated<BeamAutomationClient.Model.AutomationGenerateLinkCodeResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="ICreateProfileApiResponse"/>
    /// </summary>
    public interface ICreateProfileApiResponse : BeamAutomationClient.Client.IApiResponse, ICreated<BeamAutomationClient.Model.AutomationCreateProfileResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="ICreateSignInRequestApiResponse"/>
    /// </summary>
    public interface ICreateSignInRequestApiResponse : BeamAutomationClient.Client.IApiResponse, ICreated<BeamAutomationClient.Model.AutomationGenerateSignInCodeResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetAllProfilesApiResponse"/>
    /// </summary>
    public interface IGetAllProfilesApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetAllProfilesResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileApiResponse"/>
    /// </summary>
    public interface IGetProfileApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetProfileResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateProfileApiResponse"/>
    /// </summary>
    public interface IUpdateProfileApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationUpdateProfileResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AutomationProfilesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateConnectionRequest;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateConnectionRequest;

        internal void ExecuteOnCreateConnectionRequest(AutomationProfilesApi.CreateConnectionRequestApiResponse apiResponse)
        {
            OnCreateConnectionRequest?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateConnectionRequest(Exception exception)
        {
            OnErrorCreateConnectionRequest?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateProfile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateProfile;

        internal void ExecuteOnCreateProfile(AutomationProfilesApi.CreateProfileApiResponse apiResponse)
        {
            OnCreateProfile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateProfile(Exception exception)
        {
            OnErrorCreateProfile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateSignInRequest;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateSignInRequest;

        internal void ExecuteOnCreateSignInRequest(AutomationProfilesApi.CreateSignInRequestApiResponse apiResponse)
        {
            OnCreateSignInRequest?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateSignInRequest(Exception exception)
        {
            OnErrorCreateSignInRequest?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAllProfiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAllProfiles;

        internal void ExecuteOnGetAllProfiles(AutomationProfilesApi.GetAllProfilesApiResponse apiResponse)
        {
            OnGetAllProfiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAllProfiles(Exception exception)
        {
            OnErrorGetAllProfiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfile;

        internal void ExecuteOnGetProfile(AutomationProfilesApi.GetProfileApiResponse apiResponse)
        {
            OnGetProfile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfile(Exception exception)
        {
            OnErrorGetProfile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnUpdateProfile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorUpdateProfile;

        internal void ExecuteOnUpdateProfile(AutomationProfilesApi.UpdateProfileApiResponse apiResponse)
        {
            OnUpdateProfile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateProfile(Exception exception)
        {
            OnErrorUpdateProfile?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AutomationProfilesApi : IAutomationProfilesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AutomationProfilesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AutomationProfilesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<AutomationApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationProfilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationProfilesApi(ILogger<AutomationProfilesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, AutomationJsonSerializerOptionsProvider jsonSerializerOptionsProvider, AutomationProfilesApiEvents automationProfilesApiEvents,
            TokenProvider<AutomationApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AutomationProfilesApi>();
            HttpClient = httpClient;
            Events = automationProfilesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateConnectionRequest(ref string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateLinkCodeRequestInput"></param>
        /// <returns></returns>
        private void ValidateCreateConnectionRequest(string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationGenerateLinkCodeRequestInput == null)
                throw new ArgumentNullException(nameof(automationGenerateLinkCodeRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateLinkCodeRequestInput"></param>
        private void AfterCreateConnectionRequestDefaultImplementation(ICreateConnectionRequestApiResponse apiResponseLocalVar, string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterCreateConnectionRequest(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationGenerateLinkCodeRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateLinkCodeRequestInput"></param>
        partial void AfterCreateConnectionRequest(ref bool suppressDefaultLog, ICreateConnectionRequestApiResponse apiResponseLocalVar, string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateLinkCodeRequestInput"></param>
        private void OnErrorCreateConnectionRequestDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateConnectionRequest(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationGenerateLinkCodeRequestInput);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateLinkCodeRequestInput"></param>
        partial void OnErrorCreateConnectionRequest(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput);

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateLinkCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectionRequestApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectionRequestApiResponse> CreateConnectionRequestOrDefaultAsync(string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateConnectionRequestAsync(entityId, automationGenerateLinkCodeRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateLinkCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateConnectionRequestApiResponse"/>&gt;</returns>
        public async Task<ICreateConnectionRequestApiResponse> CreateConnectionRequestAsync(string entityId, AutomationGenerateLinkCodeRequestInput automationGenerateLinkCodeRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateConnectionRequest(entityId, automationGenerateLinkCodeRequestInput);

                FormatCreateConnectionRequest(ref entityId, automationGenerateLinkCodeRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/profiles/{entityId}/create-connection-request";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationGenerateLinkCodeRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationGenerateLinkCodeRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateConnectionRequestApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateConnectionRequestApiResponse>();

                        CreateConnectionRequestApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/profiles/{entityId}/create-connection-request", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateConnectionRequestDefaultImplementation(apiResponseLocalVar, entityId, automationGenerateLinkCodeRequestInput);

                        Events.ExecuteOnCreateConnectionRequest(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateConnectionRequestDefaultImplementation(e, "/v1/profiles/{entityId}/create-connection-request", uriBuilderLocalVar.Path, entityId, automationGenerateLinkCodeRequestInput);
                Events.ExecuteOnErrorCreateConnectionRequest(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateConnectionRequestApiResponse"/>
        /// </summary>
        public partial class CreateConnectionRequestApiResponse : BeamAutomationClient.Client.ApiResponse, ICreateConnectionRequestApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateConnectionRequestApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateConnectionRequestApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateConnectionRequestApiResponse(ILogger<CreateConnectionRequestApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGenerateLinkCodeResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGenerateLinkCodeResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGenerateLinkCodeResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateProfile(AutomationCreateProfileRequestInput automationCreateProfileRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="automationCreateProfileRequestInput"></param>
        /// <returns></returns>
        private void ValidateCreateProfile(AutomationCreateProfileRequestInput automationCreateProfileRequestInput)
        {
            if (automationCreateProfileRequestInput == null)
                throw new ArgumentNullException(nameof(automationCreateProfileRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="automationCreateProfileRequestInput"></param>
        private void AfterCreateProfileDefaultImplementation(ICreateProfileApiResponse apiResponseLocalVar, AutomationCreateProfileRequestInput automationCreateProfileRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterCreateProfile(ref suppressDefaultLog, apiResponseLocalVar, automationCreateProfileRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="automationCreateProfileRequestInput"></param>
        partial void AfterCreateProfile(ref bool suppressDefaultLog, ICreateProfileApiResponse apiResponseLocalVar, AutomationCreateProfileRequestInput automationCreateProfileRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="automationCreateProfileRequestInput"></param>
        private void OnErrorCreateProfileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AutomationCreateProfileRequestInput automationCreateProfileRequestInput)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateProfile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, automationCreateProfileRequestInput);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="automationCreateProfileRequestInput"></param>
        partial void OnErrorCreateProfile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AutomationCreateProfileRequestInput automationCreateProfileRequestInput);

        /// <summary>
        /// Creating a profile 
        /// </summary>
        /// <param name="automationCreateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProfileApiResponse"/>&gt;</returns>
        public async Task<ICreateProfileApiResponse> CreateProfileOrDefaultAsync(AutomationCreateProfileRequestInput automationCreateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateProfileAsync(automationCreateProfileRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creating a profile 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationCreateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProfileApiResponse"/>&gt;</returns>
        public async Task<ICreateProfileApiResponse> CreateProfileAsync(AutomationCreateProfileRequestInput automationCreateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateProfile(automationCreateProfileRequestInput);

                FormatCreateProfile(automationCreateProfileRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/profiles";

                    httpRequestMessageLocalVar.Content = (automationCreateProfileRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationCreateProfileRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateProfileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateProfileApiResponse>();

                        CreateProfileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/profiles", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateProfileDefaultImplementation(apiResponseLocalVar, automationCreateProfileRequestInput);

                        Events.ExecuteOnCreateProfile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateProfileDefaultImplementation(e, "/v1/profiles", uriBuilderLocalVar.Path, automationCreateProfileRequestInput);
                Events.ExecuteOnErrorCreateProfile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateProfileApiResponse"/>
        /// </summary>
        public partial class CreateProfileApiResponse : BeamAutomationClient.Client.ApiResponse, ICreateProfileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateProfileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateProfileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateProfileApiResponse(ILogger<CreateProfileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationCreateProfileResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationCreateProfileResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationCreateProfileResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateSignInRequest(ref string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateSignInCodeRequestInput"></param>
        /// <returns></returns>
        private void ValidateCreateSignInRequest(string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationGenerateSignInCodeRequestInput == null)
                throw new ArgumentNullException(nameof(automationGenerateSignInCodeRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateSignInCodeRequestInput"></param>
        private void AfterCreateSignInRequestDefaultImplementation(ICreateSignInRequestApiResponse apiResponseLocalVar, string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterCreateSignInRequest(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationGenerateSignInCodeRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateSignInCodeRequestInput"></param>
        partial void AfterCreateSignInRequest(ref bool suppressDefaultLog, ICreateSignInRequestApiResponse apiResponseLocalVar, string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateSignInCodeRequestInput"></param>
        private void OnErrorCreateSignInRequestDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateSignInRequest(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationGenerateSignInCodeRequestInput);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateSignInCodeRequestInput"></param>
        partial void OnErrorCreateSignInRequest(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput);

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateSignInCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSignInRequestApiResponse"/>&gt;</returns>
        public async Task<ICreateSignInRequestApiResponse> CreateSignInRequestOrDefaultAsync(string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateSignInRequestAsync(entityId, automationGenerateSignInCodeRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationGenerateSignInCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateSignInRequestApiResponse"/>&gt;</returns>
        public async Task<ICreateSignInRequestApiResponse> CreateSignInRequestAsync(string entityId, AutomationGenerateSignInCodeRequestInput automationGenerateSignInCodeRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateSignInRequest(entityId, automationGenerateSignInCodeRequestInput);

                FormatCreateSignInRequest(ref entityId, automationGenerateSignInCodeRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/profiles/{entityId}/create-sign-in-request";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationGenerateSignInCodeRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationGenerateSignInCodeRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateSignInRequestApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateSignInRequestApiResponse>();

                        CreateSignInRequestApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/profiles/{entityId}/create-sign-in-request", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateSignInRequestDefaultImplementation(apiResponseLocalVar, entityId, automationGenerateSignInCodeRequestInput);

                        Events.ExecuteOnCreateSignInRequest(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateSignInRequestDefaultImplementation(e, "/v1/profiles/{entityId}/create-sign-in-request", uriBuilderLocalVar.Path, entityId, automationGenerateSignInCodeRequestInput);
                Events.ExecuteOnErrorCreateSignInRequest(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateSignInRequestApiResponse"/>
        /// </summary>
        public partial class CreateSignInRequestApiResponse : BeamAutomationClient.Client.ApiResponse, ICreateSignInRequestApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateSignInRequestApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateSignInRequestApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateSignInRequestApiResponse(ILogger<CreateSignInRequestApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGenerateSignInCodeResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGenerateSignInCodeResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGenerateSignInCodeResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAllProfiles(ref Option<decimal> limit, ref Option<decimal> offset);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetAllProfilesDefaultImplementation(IGetAllProfilesApiResponse apiResponseLocalVar, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetAllProfiles(ref suppressDefaultLog, apiResponseLocalVar, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetAllProfiles(ref bool suppressDefaultLog, IGetAllProfilesApiResponse apiResponseLocalVar, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetAllProfilesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAllProfiles(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, limit, offset);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetAllProfiles(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Getting all profiles 
        /// </summary>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllProfilesApiResponse"/>&gt;</returns>
        public async Task<IGetAllProfilesApiResponse> GetAllProfilesOrDefaultAsync(Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAllProfilesAsync(limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Getting all profiles 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAllProfilesApiResponse"/>&gt;</returns>
        public async Task<IGetAllProfilesApiResponse> GetAllProfilesAsync(Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetAllProfiles(ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/profiles";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAllProfilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAllProfilesApiResponse>();

                        GetAllProfilesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/profiles", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAllProfilesDefaultImplementation(apiResponseLocalVar, limit, offset);

                        Events.ExecuteOnGetAllProfiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAllProfilesDefaultImplementation(e, "/v1/profiles", uriBuilderLocalVar.Path, limit, offset);
                Events.ExecuteOnErrorGetAllProfiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAllProfilesApiResponse"/>
        /// </summary>
        public partial class GetAllProfilesApiResponse : BeamAutomationClient.Client.ApiResponse, IGetAllProfilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAllProfilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAllProfilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAllProfilesApiResponse(ILogger<GetAllProfilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetAllProfilesResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetAllProfilesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetAllProfilesResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfile(ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfile(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        private void AfterGetProfileDefaultImplementation(IGetProfileApiResponse apiResponseLocalVar, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterGetProfile(ref suppressDefaultLog, apiResponseLocalVar, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        partial void AfterGetProfile(ref bool suppressDefaultLog, IGetProfileApiResponse apiResponseLocalVar, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        private void OnErrorGetProfileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProfile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        partial void OnErrorGetProfile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId);

        /// <summary>
        /// Getting information on a profile 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileApiResponse"/>&gt;</returns>
        public async Task<IGetProfileApiResponse> GetProfileOrDefaultAsync(string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileAsync(entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Getting information on a profile 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileApiResponse"/>&gt;</returns>
        public async Task<IGetProfileApiResponse> GetProfileAsync(string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfile(entityId);

                FormatGetProfile(ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileApiResponse>();

                        GetProfileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileDefaultImplementation(apiResponseLocalVar, entityId);

                        Events.ExecuteOnGetProfile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileDefaultImplementation(e, "/v1/profiles/{entityId}", uriBuilderLocalVar.Path, entityId);
                Events.ExecuteOnErrorGetProfile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileApiResponse"/>
        /// </summary>
        public partial class GetProfileApiResponse : BeamAutomationClient.Client.ApiResponse, IGetProfileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileApiResponse(ILogger<GetProfileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetProfileResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetProfileResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetProfileResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateProfile(ref string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationUpdateProfileRequestInput"></param>
        /// <returns></returns>
        private void ValidateUpdateProfile(string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationUpdateProfileRequestInput == null)
                throw new ArgumentNullException(nameof(automationUpdateProfileRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationUpdateProfileRequestInput"></param>
        private void AfterUpdateProfileDefaultImplementation(IUpdateProfileApiResponse apiResponseLocalVar, string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterUpdateProfile(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationUpdateProfileRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationUpdateProfileRequestInput"></param>
        partial void AfterUpdateProfile(ref bool suppressDefaultLog, IUpdateProfileApiResponse apiResponseLocalVar, string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationUpdateProfileRequestInput"></param>
        private void OnErrorUpdateProfileDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorUpdateProfile(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationUpdateProfileRequestInput);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationUpdateProfileRequestInput"></param>
        partial void OnErrorUpdateProfile(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput);

        /// <summary>
        /// Update a profile 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationUpdateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProfileApiResponse"/>&gt;</returns>
        public async Task<IUpdateProfileApiResponse> UpdateProfileOrDefaultAsync(string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateProfileAsync(entityId, automationUpdateProfileRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Update a profile 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationUpdateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateProfileApiResponse"/>&gt;</returns>
        public async Task<IUpdateProfileApiResponse> UpdateProfileAsync(string entityId, AutomationUpdateProfileRequestInput automationUpdateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateProfile(entityId, automationUpdateProfileRequestInput);

                FormatUpdateProfile(ref entityId, automationUpdateProfileRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationUpdateProfileRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationUpdateProfileRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateProfileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateProfileApiResponse>();

                        UpdateProfileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateProfileDefaultImplementation(apiResponseLocalVar, entityId, automationUpdateProfileRequestInput);

                        Events.ExecuteOnUpdateProfile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateProfileDefaultImplementation(e, "/v1/profiles/{entityId}", uriBuilderLocalVar.Path, entityId, automationUpdateProfileRequestInput);
                Events.ExecuteOnErrorUpdateProfile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateProfileApiResponse"/>
        /// </summary>
        public partial class UpdateProfileApiResponse : BeamAutomationClient.Client.ApiResponse, IUpdateProfileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateProfileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateProfileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateProfileApiResponse(ILogger<UpdateProfileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationUpdateProfileResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationUpdateProfileResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationUpdateProfileResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
