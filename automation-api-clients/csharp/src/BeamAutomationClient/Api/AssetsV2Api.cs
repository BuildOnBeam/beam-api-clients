// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamAutomationClient.Client;
using BeamAutomationClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamAutomationClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAutomationAssetsV2Api : IAutomationApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AutomationAssetsV2ApiEvents Events { get; }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetV2ApiResponse"/>&gt;</returns>
        Task<IGetAssetV2ApiResponse> GetAssetV2Async(string assetAddress, string assetId, Option<long> chainId = default, Option<string> entityId = default, Option<bool> owners = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetV2ApiResponse"/>&gt;</returns>
        Task<IGetAssetV2ApiResponse> GetAssetV2OrDefaultAsync(string assetAddress, string assetId, Option<long> chainId = default, Option<string> entityId = default, Option<bool> owners = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="automationGetAssetsForContractBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostV2ApiResponse"/>&gt;</returns>
        Task<IGetContractAssetsPostV2ApiResponse> GetContractAssetsPostV2Async(string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetAddress"></param>
        /// <param name="automationGetAssetsForContractBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostV2ApiResponse"/>&gt;</returns>
        Task<IGetContractAssetsPostV2ApiResponse> GetContractAssetsPostV2OrDefaultAsync(string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationGetAssetsForProfileBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostV2ApiResponse"/>&gt;</returns>
        Task<IGetProfileAssetsForGamePostV2ApiResponse> GetProfileAssetsForGamePostV2Async(string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationGetAssetsForProfileBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostV2ApiResponse"/>&gt;</returns>
        Task<IGetProfileAssetsForGamePostV2ApiResponse> GetProfileAssetsForGamePostV2OrDefaultAsync(string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesV2ApiResponse"/>&gt;</returns>
        Task<IGetProfileCurrenciesV2ApiResponse> GetProfileCurrenciesV2Async(string entityId, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesV2ApiResponse"/>&gt;</returns>
        Task<IGetProfileCurrenciesV2ApiResponse> GetProfileCurrenciesV2OrDefaultAsync(string entityId, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyV2ApiResponse"/>&gt;</returns>
        Task<IGetProfileNativeCurrencyV2ApiResponse> GetProfileNativeCurrencyV2Async(string entityId, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyV2ApiResponse"/>&gt;</returns>
        Task<IGetProfileNativeCurrencyV2ApiResponse> GetProfileNativeCurrencyV2OrDefaultAsync(string entityId, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationTransferAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetV2ApiResponse"/>&gt;</returns>
        Task<ITransferAssetV2ApiResponse> TransferAssetV2Async(string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationTransferAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetV2ApiResponse"/>&gt;</returns>
        Task<ITransferAssetV2ApiResponse> TransferAssetV2OrDefaultAsync(string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer the native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationTransferNativeTokenRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenV2ApiResponse"/>&gt;</returns>
        Task<ITransferNativeTokenV2ApiResponse> TransferNativeTokenV2Async(string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer the native token
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationTransferNativeTokenRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenV2ApiResponse"/>&gt;</returns>
        Task<ITransferNativeTokenV2ApiResponse> TransferNativeTokenV2OrDefaultAsync(string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationTransferTokenRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenV2ApiResponse"/>&gt;</returns>
        Task<ITransferTokenV2ApiResponse> TransferTokenV2Async(string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationTransferTokenRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenV2ApiResponse"/>&gt;</returns>
        Task<ITransferTokenV2ApiResponse> TransferTokenV2OrDefaultAsync(string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAssetV2ApiResponse"/>
    /// </summary>
    public interface IGetAssetV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetAssetResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetContractAssetsPostV2ApiResponse"/>
    /// </summary>
    public interface IGetContractAssetsPostV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetAssetsForContractResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileAssetsForGamePostV2ApiResponse"/>
    /// </summary>
    public interface IGetProfileAssetsForGamePostV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetAssetsForProfileResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileCurrenciesV2ApiResponse"/>
    /// </summary>
    public interface IGetProfileCurrenciesV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetProfileCurrenciesResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileNativeCurrencyV2ApiResponse"/>
    /// </summary>
    public interface IGetProfileNativeCurrencyV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetProfileNativeCurrencyResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="ITransferAssetV2ApiResponse"/>
    /// </summary>
    public interface ITransferAssetV2ApiResponse : BeamAutomationClient.Client.IApiResponse, ICreated<BeamAutomationClient.Model.AutomationTransactionResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="ITransferNativeTokenV2ApiResponse"/>
    /// </summary>
    public interface ITransferNativeTokenV2ApiResponse : BeamAutomationClient.Client.IApiResponse, ICreated<BeamAutomationClient.Model.AutomationTransactionResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="ITransferTokenV2ApiResponse"/>
    /// </summary>
    public interface ITransferTokenV2ApiResponse : BeamAutomationClient.Client.IApiResponse, ICreated<BeamAutomationClient.Model.AutomationTransactionResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AutomationAssetsV2ApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAssetV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAssetV2;

        internal void ExecuteOnGetAssetV2(AutomationAssetsV2Api.GetAssetV2ApiResponse apiResponse)
        {
            OnGetAssetV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetV2(Exception exception)
        {
            OnErrorGetAssetV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetContractAssetsPostV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetContractAssetsPostV2;

        internal void ExecuteOnGetContractAssetsPostV2(AutomationAssetsV2Api.GetContractAssetsPostV2ApiResponse apiResponse)
        {
            OnGetContractAssetsPostV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContractAssetsPostV2(Exception exception)
        {
            OnErrorGetContractAssetsPostV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfileAssetsForGamePostV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfileAssetsForGamePostV2;

        internal void ExecuteOnGetProfileAssetsForGamePostV2(AutomationAssetsV2Api.GetProfileAssetsForGamePostV2ApiResponse apiResponse)
        {
            OnGetProfileAssetsForGamePostV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileAssetsForGamePostV2(Exception exception)
        {
            OnErrorGetProfileAssetsForGamePostV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfileCurrenciesV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfileCurrenciesV2;

        internal void ExecuteOnGetProfileCurrenciesV2(AutomationAssetsV2Api.GetProfileCurrenciesV2ApiResponse apiResponse)
        {
            OnGetProfileCurrenciesV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileCurrenciesV2(Exception exception)
        {
            OnErrorGetProfileCurrenciesV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfileNativeCurrencyV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfileNativeCurrencyV2;

        internal void ExecuteOnGetProfileNativeCurrencyV2(AutomationAssetsV2Api.GetProfileNativeCurrencyV2ApiResponse apiResponse)
        {
            OnGetProfileNativeCurrencyV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileNativeCurrencyV2(Exception exception)
        {
            OnErrorGetProfileNativeCurrencyV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTransferAssetV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTransferAssetV2;

        internal void ExecuteOnTransferAssetV2(AutomationAssetsV2Api.TransferAssetV2ApiResponse apiResponse)
        {
            OnTransferAssetV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferAssetV2(Exception exception)
        {
            OnErrorTransferAssetV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTransferNativeTokenV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTransferNativeTokenV2;

        internal void ExecuteOnTransferNativeTokenV2(AutomationAssetsV2Api.TransferNativeTokenV2ApiResponse apiResponse)
        {
            OnTransferNativeTokenV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferNativeTokenV2(Exception exception)
        {
            OnErrorTransferNativeTokenV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTransferTokenV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTransferTokenV2;

        internal void ExecuteOnTransferTokenV2(AutomationAssetsV2Api.TransferTokenV2ApiResponse apiResponse)
        {
            OnTransferTokenV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferTokenV2(Exception exception)
        {
            OnErrorTransferTokenV2?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AutomationAssetsV2Api : IAutomationAssetsV2Api
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AutomationAssetsV2Api> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AutomationAssetsV2ApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<AutomationApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationAssetsV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationAssetsV2Api(ILogger<AutomationAssetsV2Api> logger, ILoggerFactory loggerFactory, HttpClient httpClient, AutomationJsonSerializerOptionsProvider jsonSerializerOptionsProvider, AutomationAssetsV2ApiEvents automationAssetsV2ApiEvents,
            TokenProvider<AutomationApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AutomationAssetsV2Api>();
            HttpClient = httpClient;
            Events = automationAssetsV2ApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetAssetV2(ref string assetAddress, ref string assetId, ref Option<long> chainId, ref Option<string> entityId, ref Option<bool> owners);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetAssetV2(string assetAddress, string assetId, Option<string> entityId)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));

            if (entityId.IsSet && entityId.Value == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        /// <param name="owners"></param>
        private void AfterGetAssetV2DefaultImplementation(IGetAssetV2ApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<long> chainId, Option<string> entityId, Option<bool> owners)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetV2(ref suppressDefaultLog, apiResponseLocalVar, assetAddress, assetId, chainId, entityId, owners);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        /// <param name="owners"></param>
        partial void AfterGetAssetV2(ref bool suppressDefaultLog, IGetAssetV2ApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<long> chainId, Option<string> entityId, Option<bool> owners);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        /// <param name="owners"></param>
        private void OnErrorGetAssetV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, string assetId, Option<long> chainId, Option<string> entityId, Option<bool> owners)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssetV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetAddress, assetId, chainId, entityId, owners);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        /// <param name="owners"></param>
        partial void OnErrorGetAssetV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, string assetId, Option<long> chainId, Option<string> entityId, Option<bool> owners);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetV2ApiResponse"/>&gt;</returns>
        public async Task<IGetAssetV2ApiResponse> GetAssetV2OrDefaultAsync(string assetAddress, string assetId, Option<long> chainId = default, Option<string> entityId = default, Option<bool> owners = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetV2Async(assetAddress, assetId, chainId, entityId, owners, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="owners">If true, will return owners of the token (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetV2ApiResponse"/>&gt;</returns>
        public async Task<IGetAssetV2ApiResponse> GetAssetV2Async(string assetAddress, string assetId, Option<long> chainId = default, Option<string> entityId = default, Option<bool> owners = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetV2(assetAddress, assetId, entityId);

                FormatGetAssetV2(ref assetAddress, ref assetId, ref chainId, ref entityId, ref owners);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/assets/{assetAddress}/{assetId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetId%7D", Uri.EscapeDataString(assetId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = ClientUtils.ParameterToString(chainId.Value);

                    if (entityId.IsSet)
                        parseQueryStringLocalVar["entityId"] = ClientUtils.ParameterToString(entityId.Value);

                    if (owners.IsSet)
                        parseQueryStringLocalVar["owners"] = ClientUtils.ParameterToString(owners.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetV2ApiResponse>();

                        GetAssetV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/assets/{assetAddress}/{assetId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetV2DefaultImplementation(apiResponseLocalVar, assetAddress, assetId, chainId, entityId, owners);

                        Events.ExecuteOnGetAssetV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetV2DefaultImplementation(e, "/v2/assets/{assetAddress}/{assetId}", uriBuilderLocalVar.Path, assetAddress, assetId, chainId, entityId, owners);
                Events.ExecuteOnErrorGetAssetV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetV2ApiResponse"/>
        /// </summary>
        public partial class GetAssetV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetAssetV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetV2ApiResponse(ILogger<GetAssetV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetAssetResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetAssetResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetAssetResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContractAssetsPostV2(ref string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="automationGetAssetsForContractBodyInputV2"></param>
        /// <returns></returns>
        private void ValidateGetContractAssetsPostV2(string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (automationGetAssetsForContractBodyInputV2 == null)
                throw new ArgumentNullException(nameof(automationGetAssetsForContractBodyInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="automationGetAssetsForContractBodyInputV2"></param>
        private void AfterGetContractAssetsPostV2DefaultImplementation(IGetContractAssetsPostV2ApiResponse apiResponseLocalVar, string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2)
        {
            bool suppressDefaultLog = false;
            AfterGetContractAssetsPostV2(ref suppressDefaultLog, apiResponseLocalVar, assetAddress, automationGetAssetsForContractBodyInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="automationGetAssetsForContractBodyInputV2"></param>
        partial void AfterGetContractAssetsPostV2(ref bool suppressDefaultLog, IGetContractAssetsPostV2ApiResponse apiResponseLocalVar, string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="automationGetAssetsForContractBodyInputV2"></param>
        private void OnErrorGetContractAssetsPostV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContractAssetsPostV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetAddress, automationGetAssetsForContractBodyInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="automationGetAssetsForContractBodyInputV2"></param>
        partial void OnErrorGetContractAssetsPostV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="automationGetAssetsForContractBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostV2ApiResponse"/>&gt;</returns>
        public async Task<IGetContractAssetsPostV2ApiResponse> GetContractAssetsPostV2OrDefaultAsync(string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContractAssetsPostV2Async(assetAddress, automationGetAssetsForContractBodyInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="automationGetAssetsForContractBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostV2ApiResponse"/>&gt;</returns>
        public async Task<IGetContractAssetsPostV2ApiResponse> GetContractAssetsPostV2Async(string assetAddress, AutomationGetAssetsForContractBodyInputV2 automationGetAssetsForContractBodyInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContractAssetsPostV2(assetAddress, automationGetAssetsForContractBodyInputV2);

                FormatGetContractAssetsPostV2(ref assetAddress, automationGetAssetsForContractBodyInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/assets/{assetAddress}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));

                    httpRequestMessageLocalVar.Content = (automationGetAssetsForContractBodyInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationGetAssetsForContractBodyInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContractAssetsPostV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContractAssetsPostV2ApiResponse>();

                        GetContractAssetsPostV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/assets/{assetAddress}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContractAssetsPostV2DefaultImplementation(apiResponseLocalVar, assetAddress, automationGetAssetsForContractBodyInputV2);

                        Events.ExecuteOnGetContractAssetsPostV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContractAssetsPostV2DefaultImplementation(e, "/v2/assets/{assetAddress}", uriBuilderLocalVar.Path, assetAddress, automationGetAssetsForContractBodyInputV2);
                Events.ExecuteOnErrorGetContractAssetsPostV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContractAssetsPostV2ApiResponse"/>
        /// </summary>
        public partial class GetContractAssetsPostV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetContractAssetsPostV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContractAssetsPostV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContractAssetsPostV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContractAssetsPostV2ApiResponse(ILogger<GetContractAssetsPostV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetAssetsForContractResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetAssetsForContractResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetAssetsForContractResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileAssetsForGamePostV2(ref string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationGetAssetsForProfileBodyInputV2"></param>
        /// <returns></returns>
        private void ValidateGetProfileAssetsForGamePostV2(string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationGetAssetsForProfileBodyInputV2 == null)
                throw new ArgumentNullException(nameof(automationGetAssetsForProfileBodyInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGetAssetsForProfileBodyInputV2"></param>
        private void AfterGetProfileAssetsForGamePostV2DefaultImplementation(IGetProfileAssetsForGamePostV2ApiResponse apiResponseLocalVar, string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileAssetsForGamePostV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationGetAssetsForProfileBodyInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGetAssetsForProfileBodyInputV2"></param>
        partial void AfterGetProfileAssetsForGamePostV2(ref bool suppressDefaultLog, IGetProfileAssetsForGamePostV2ApiResponse apiResponseLocalVar, string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGetAssetsForProfileBodyInputV2"></param>
        private void OnErrorGetProfileAssetsForGamePostV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProfileAssetsForGamePostV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationGetAssetsForProfileBodyInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGetAssetsForProfileBodyInputV2"></param>
        partial void OnErrorGetProfileAssetsForGamePostV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationGetAssetsForProfileBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostV2ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileAssetsForGamePostV2ApiResponse> GetProfileAssetsForGamePostV2OrDefaultAsync(string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileAssetsForGamePostV2Async(entityId, automationGetAssetsForProfileBodyInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationGetAssetsForProfileBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostV2ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileAssetsForGamePostV2ApiResponse> GetProfileAssetsForGamePostV2Async(string entityId, AutomationGetAssetsForProfileBodyInputV2 automationGetAssetsForProfileBodyInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileAssetsForGamePostV2(entityId, automationGetAssetsForProfileBodyInputV2);

                FormatGetProfileAssetsForGamePostV2(ref entityId, automationGetAssetsForProfileBodyInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/assets/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationGetAssetsForProfileBodyInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationGetAssetsForProfileBodyInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileAssetsForGamePostV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileAssetsForGamePostV2ApiResponse>();

                        GetProfileAssetsForGamePostV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/assets/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileAssetsForGamePostV2DefaultImplementation(apiResponseLocalVar, entityId, automationGetAssetsForProfileBodyInputV2);

                        Events.ExecuteOnGetProfileAssetsForGamePostV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileAssetsForGamePostV2DefaultImplementation(e, "/v2/assets/profiles/{entityId}", uriBuilderLocalVar.Path, entityId, automationGetAssetsForProfileBodyInputV2);
                Events.ExecuteOnErrorGetProfileAssetsForGamePostV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileAssetsForGamePostV2ApiResponse"/>
        /// </summary>
        public partial class GetProfileAssetsForGamePostV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetProfileAssetsForGamePostV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileAssetsForGamePostV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileAssetsForGamePostV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileAssetsForGamePostV2ApiResponse(ILogger<GetProfileAssetsForGamePostV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetAssetsForProfileResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetAssetsForProfileResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetAssetsForProfileResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileCurrenciesV2(ref string entityId, ref Option<long> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfileCurrenciesV2(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetProfileCurrenciesV2DefaultImplementation(IGetProfileCurrenciesV2ApiResponse apiResponseLocalVar, string entityId, Option<long> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileCurrenciesV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetProfileCurrenciesV2(ref bool suppressDefaultLog, IGetProfileCurrenciesV2ApiResponse apiResponseLocalVar, string entityId, Option<long> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetProfileCurrenciesV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, Option<long> chainId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProfileCurrenciesV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, chainId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetProfileCurrenciesV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, Option<long> chainId);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesV2ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileCurrenciesV2ApiResponse> GetProfileCurrenciesV2OrDefaultAsync(string entityId, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileCurrenciesV2Async(entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesV2ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileCurrenciesV2ApiResponse> GetProfileCurrenciesV2Async(string entityId, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileCurrenciesV2(entityId);

                FormatGetProfileCurrenciesV2(ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/assets/profiles/{entityId}/currencies";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = ClientUtils.ParameterToString(chainId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileCurrenciesV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileCurrenciesV2ApiResponse>();

                        GetProfileCurrenciesV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/assets/profiles/{entityId}/currencies", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileCurrenciesV2DefaultImplementation(apiResponseLocalVar, entityId, chainId);

                        Events.ExecuteOnGetProfileCurrenciesV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileCurrenciesV2DefaultImplementation(e, "/v2/assets/profiles/{entityId}/currencies", uriBuilderLocalVar.Path, entityId, chainId);
                Events.ExecuteOnErrorGetProfileCurrenciesV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileCurrenciesV2ApiResponse"/>
        /// </summary>
        public partial class GetProfileCurrenciesV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetProfileCurrenciesV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileCurrenciesV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileCurrenciesV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileCurrenciesV2ApiResponse(ILogger<GetProfileCurrenciesV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetProfileCurrenciesResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetProfileCurrenciesResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetProfileCurrenciesResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileNativeCurrencyV2(ref string entityId, ref Option<long> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfileNativeCurrencyV2(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetProfileNativeCurrencyV2DefaultImplementation(IGetProfileNativeCurrencyV2ApiResponse apiResponseLocalVar, string entityId, Option<long> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileNativeCurrencyV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetProfileNativeCurrencyV2(ref bool suppressDefaultLog, IGetProfileNativeCurrencyV2ApiResponse apiResponseLocalVar, string entityId, Option<long> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetProfileNativeCurrencyV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, Option<long> chainId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProfileNativeCurrencyV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, chainId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetProfileNativeCurrencyV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, Option<long> chainId);

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyV2ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileNativeCurrencyV2ApiResponse> GetProfileNativeCurrencyV2OrDefaultAsync(string entityId, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileNativeCurrencyV2Async(entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyV2ApiResponse"/>&gt;</returns>
        public async Task<IGetProfileNativeCurrencyV2ApiResponse> GetProfileNativeCurrencyV2Async(string entityId, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileNativeCurrencyV2(entityId);

                FormatGetProfileNativeCurrencyV2(ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/assets/profiles/{entityId}/native";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = ClientUtils.ParameterToString(chainId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileNativeCurrencyV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileNativeCurrencyV2ApiResponse>();

                        GetProfileNativeCurrencyV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/assets/profiles/{entityId}/native", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileNativeCurrencyV2DefaultImplementation(apiResponseLocalVar, entityId, chainId);

                        Events.ExecuteOnGetProfileNativeCurrencyV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileNativeCurrencyV2DefaultImplementation(e, "/v2/assets/profiles/{entityId}/native", uriBuilderLocalVar.Path, entityId, chainId);
                Events.ExecuteOnErrorGetProfileNativeCurrencyV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileNativeCurrencyV2ApiResponse"/>
        /// </summary>
        public partial class GetProfileNativeCurrencyV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetProfileNativeCurrencyV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileNativeCurrencyV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileNativeCurrencyV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileNativeCurrencyV2ApiResponse(ILogger<GetProfileNativeCurrencyV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetProfileNativeCurrencyResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetProfileNativeCurrencyResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetProfileNativeCurrencyResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferAssetV2(ref string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationTransferAssetRequestInputV2"></param>
        /// <returns></returns>
        private void ValidateTransferAssetV2(string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationTransferAssetRequestInputV2 == null)
                throw new ArgumentNullException(nameof(automationTransferAssetRequestInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferAssetRequestInputV2"></param>
        private void AfterTransferAssetV2DefaultImplementation(ITransferAssetV2ApiResponse apiResponseLocalVar, string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2)
        {
            bool suppressDefaultLog = false;
            AfterTransferAssetV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationTransferAssetRequestInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferAssetRequestInputV2"></param>
        partial void AfterTransferAssetV2(ref bool suppressDefaultLog, ITransferAssetV2ApiResponse apiResponseLocalVar, string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferAssetRequestInputV2"></param>
        private void OnErrorTransferAssetV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTransferAssetV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationTransferAssetRequestInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferAssetRequestInputV2"></param>
        partial void OnErrorTransferAssetV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationTransferAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetV2ApiResponse"/>&gt;</returns>
        public async Task<ITransferAssetV2ApiResponse> TransferAssetV2OrDefaultAsync(string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferAssetV2Async(entityId, automationTransferAssetRequestInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationTransferAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetV2ApiResponse"/>&gt;</returns>
        public async Task<ITransferAssetV2ApiResponse> TransferAssetV2Async(string entityId, AutomationTransferAssetRequestInputV2 automationTransferAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferAssetV2(entityId, automationTransferAssetRequestInputV2);

                FormatTransferAssetV2(ref entityId, automationTransferAssetRequestInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/assets/profiles/{entityId}/transfer-asset";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationTransferAssetRequestInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationTransferAssetRequestInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferAssetV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferAssetV2ApiResponse>();

                        TransferAssetV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/assets/profiles/{entityId}/transfer-asset", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferAssetV2DefaultImplementation(apiResponseLocalVar, entityId, automationTransferAssetRequestInputV2);

                        Events.ExecuteOnTransferAssetV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferAssetV2DefaultImplementation(e, "/v2/assets/profiles/{entityId}/transfer-asset", uriBuilderLocalVar.Path, entityId, automationTransferAssetRequestInputV2);
                Events.ExecuteOnErrorTransferAssetV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferAssetV2ApiResponse"/>
        /// </summary>
        public partial class TransferAssetV2ApiResponse : BeamAutomationClient.Client.ApiResponse, ITransferAssetV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferAssetV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferAssetV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferAssetV2ApiResponse(ILogger<TransferAssetV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationTransactionResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationTransactionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationTransactionResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferNativeTokenV2(ref string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationTransferNativeTokenRequestInputV2"></param>
        /// <returns></returns>
        private void ValidateTransferNativeTokenV2(string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationTransferNativeTokenRequestInputV2 == null)
                throw new ArgumentNullException(nameof(automationTransferNativeTokenRequestInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferNativeTokenRequestInputV2"></param>
        private void AfterTransferNativeTokenV2DefaultImplementation(ITransferNativeTokenV2ApiResponse apiResponseLocalVar, string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2)
        {
            bool suppressDefaultLog = false;
            AfterTransferNativeTokenV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationTransferNativeTokenRequestInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferNativeTokenRequestInputV2"></param>
        partial void AfterTransferNativeTokenV2(ref bool suppressDefaultLog, ITransferNativeTokenV2ApiResponse apiResponseLocalVar, string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferNativeTokenRequestInputV2"></param>
        private void OnErrorTransferNativeTokenV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTransferNativeTokenV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationTransferNativeTokenRequestInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferNativeTokenRequestInputV2"></param>
        partial void OnErrorTransferNativeTokenV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2);

        /// <summary>
        /// Transfer the native token 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationTransferNativeTokenRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenV2ApiResponse"/>&gt;</returns>
        public async Task<ITransferNativeTokenV2ApiResponse> TransferNativeTokenV2OrDefaultAsync(string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferNativeTokenV2Async(entityId, automationTransferNativeTokenRequestInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer the native token 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationTransferNativeTokenRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenV2ApiResponse"/>&gt;</returns>
        public async Task<ITransferNativeTokenV2ApiResponse> TransferNativeTokenV2Async(string entityId, AutomationTransferNativeTokenRequestInputV2 automationTransferNativeTokenRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferNativeTokenV2(entityId, automationTransferNativeTokenRequestInputV2);

                FormatTransferNativeTokenV2(ref entityId, automationTransferNativeTokenRequestInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/assets/profiles/{entityId}/transfer-native";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationTransferNativeTokenRequestInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationTransferNativeTokenRequestInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferNativeTokenV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferNativeTokenV2ApiResponse>();

                        TransferNativeTokenV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/assets/profiles/{entityId}/transfer-native", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferNativeTokenV2DefaultImplementation(apiResponseLocalVar, entityId, automationTransferNativeTokenRequestInputV2);

                        Events.ExecuteOnTransferNativeTokenV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferNativeTokenV2DefaultImplementation(e, "/v2/assets/profiles/{entityId}/transfer-native", uriBuilderLocalVar.Path, entityId, automationTransferNativeTokenRequestInputV2);
                Events.ExecuteOnErrorTransferNativeTokenV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferNativeTokenV2ApiResponse"/>
        /// </summary>
        public partial class TransferNativeTokenV2ApiResponse : BeamAutomationClient.Client.ApiResponse, ITransferNativeTokenV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferNativeTokenV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferNativeTokenV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferNativeTokenV2ApiResponse(ILogger<TransferNativeTokenV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationTransactionResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationTransactionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationTransactionResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferTokenV2(ref string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationTransferTokenRequestInputV2"></param>
        /// <returns></returns>
        private void ValidateTransferTokenV2(string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationTransferTokenRequestInputV2 == null)
                throw new ArgumentNullException(nameof(automationTransferTokenRequestInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferTokenRequestInputV2"></param>
        private void AfterTransferTokenV2DefaultImplementation(ITransferTokenV2ApiResponse apiResponseLocalVar, string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2)
        {
            bool suppressDefaultLog = false;
            AfterTransferTokenV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationTransferTokenRequestInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferTokenRequestInputV2"></param>
        partial void AfterTransferTokenV2(ref bool suppressDefaultLog, ITransferTokenV2ApiResponse apiResponseLocalVar, string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferTokenRequestInputV2"></param>
        private void OnErrorTransferTokenV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorTransferTokenV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationTransferTokenRequestInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationTransferTokenRequestInputV2"></param>
        partial void OnErrorTransferTokenV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2);

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationTransferTokenRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenV2ApiResponse"/>&gt;</returns>
        public async Task<ITransferTokenV2ApiResponse> TransferTokenV2OrDefaultAsync(string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferTokenV2Async(entityId, automationTransferTokenRequestInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationTransferTokenRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenV2ApiResponse"/>&gt;</returns>
        public async Task<ITransferTokenV2ApiResponse> TransferTokenV2Async(string entityId, AutomationTransferTokenRequestInputV2 automationTransferTokenRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferTokenV2(entityId, automationTransferTokenRequestInputV2);

                FormatTransferTokenV2(ref entityId, automationTransferTokenRequestInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/assets/profiles/{entityId}/transfer-token";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationTransferTokenRequestInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationTransferTokenRequestInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferTokenV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferTokenV2ApiResponse>();

                        TransferTokenV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/assets/profiles/{entityId}/transfer-token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferTokenV2DefaultImplementation(apiResponseLocalVar, entityId, automationTransferTokenRequestInputV2);

                        Events.ExecuteOnTransferTokenV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferTokenV2DefaultImplementation(e, "/v2/assets/profiles/{entityId}/transfer-token", uriBuilderLocalVar.Path, entityId, automationTransferTokenRequestInputV2);
                Events.ExecuteOnErrorTransferTokenV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferTokenV2ApiResponse"/>
        /// </summary>
        public partial class TransferTokenV2ApiResponse : BeamAutomationClient.Client.ApiResponse, ITransferTokenV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferTokenV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferTokenV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferTokenV2ApiResponse(ILogger<TransferTokenV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationTransactionResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationTransactionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationTransactionResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
