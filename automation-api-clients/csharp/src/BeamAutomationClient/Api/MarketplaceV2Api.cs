// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamAutomationClient.Client;
using BeamAutomationClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamAutomationClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAutomationMarketplaceV2Api : IAutomationApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AutomationMarketplaceV2ApiEvents Events { get; }

        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationAcceptAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptAssetOfferV2ApiResponse"/>&gt;</returns>
        Task<IAcceptAssetOfferV2ApiResponse> AcceptAssetOfferV2Async(string entityId, string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationAcceptAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptAssetOfferV2ApiResponse"/>&gt;</returns>
        Task<IAcceptAssetOfferV2ApiResponse> AcceptAssetOfferV2OrDefaultAsync(string entityId, string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationBuyAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBuyListedAssetV2ApiResponse"/>&gt;</returns>
        Task<IBuyListedAssetV2ApiResponse> BuyListedAssetV2Async(string entityId, string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationBuyAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBuyListedAssetV2ApiResponse"/>&gt;</returns>
        Task<IBuyListedAssetV2ApiResponse> BuyListedAssetV2OrDefaultAsync(string entityId, string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationCancelAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelAssetOfferV2ApiResponse"/>&gt;</returns>
        Task<ICancelAssetOfferV2ApiResponse> CancelAssetOfferV2Async(string entityId, string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationCancelAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelAssetOfferV2ApiResponse"/>&gt;</returns>
        Task<ICancelAssetOfferV2ApiResponse> CancelAssetOfferV2OrDefaultAsync(string entityId, string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationCancelAssetListingRequestInputV2"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelListingV2ApiResponse"/>&gt;</returns>
        Task<ICancelListingV2ApiResponse> CancelListingV2Async(string entityId, string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationCancelAssetListingRequestInputV2"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelListingV2ApiResponse"/>&gt;</returns>
        Task<ICancelListingV2ApiResponse> CancelListingV2OrDefaultAsync(string entityId, string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAssetOfferV2ApiResponse"/>&gt;</returns>
        Task<ICreateAssetOfferV2ApiResponse> CreateAssetOfferV2Async(string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAssetOfferV2ApiResponse"/>&gt;</returns>
        Task<ICreateAssetOfferV2ApiResponse> CreateAssetOfferV2OrDefaultAsync(string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetOffersV2ApiResponse"/>&gt;</returns>
        Task<IGetAssetOffersV2ApiResponse> GetAssetOffersV2Async(string assetAddress, string assetId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetOffersV2ApiResponse"/>&gt;</returns>
        Task<IGetAssetOffersV2ApiResponse> GetAssetOffersV2OrDefaultAsync(string assetAddress, string assetId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get available currencies for given chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChainCurrenciesV2ApiResponse"/>&gt;</returns>
        Task<IGetChainCurrenciesV2ApiResponse> GetChainCurrenciesV2Async(decimal chainId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get available currencies for given chain
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChainCurrenciesV2ApiResponse"/>&gt;</returns>
        Task<IGetChainCurrenciesV2ApiResponse> GetChainCurrenciesV2OrDefaultAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfilePostV2ApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsForProfilePostV2ApiResponse> GetListedAssetsForProfilePostV2Async(string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfilePostV2ApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsForProfilePostV2ApiResponse> GetListedAssetsForProfilePostV2OrDefaultAsync(string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsPostV2ApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsPostV2ApiResponse> GetListedAssetsPostV2Async(AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsPostV2ApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsPostV2ApiResponse> GetListedAssetsPostV2OrDefaultAsync(AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all asset offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerAssetOffersV2ApiResponse"/>&gt;</returns>
        Task<IGetPlayerAssetOffersV2ApiResponse> GetPlayerAssetOffersV2Async(string entityId, string assetAddress, string assetId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all asset offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerAssetOffersV2ApiResponse"/>&gt;</returns>
        Task<IGetPlayerAssetOffersV2ApiResponse> GetPlayerAssetOffersV2OrDefaultAsync(string entityId, string assetAddress, string assetId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all offers that a profile created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerOffersV2ApiResponse"/>&gt;</returns>
        Task<IGetPlayerOffersV2ApiResponse> GetPlayerOffersV2Async(string entityId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all offers that a profile created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerOffersV2ApiResponse"/>&gt;</returns>
        Task<IGetPlayerOffersV2ApiResponse> GetPlayerOffersV2OrDefaultAsync(string entityId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationSellAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAssetV2ApiResponse"/>&gt;</returns>
        Task<IListAssetV2ApiResponse> ListAssetV2Async(string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationSellAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAssetV2ApiResponse"/>&gt;</returns>
        Task<IListAssetV2ApiResponse> ListAssetV2OrDefaultAsync(string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Schedule a contract refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationRefreshContractRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRefreshContractApiResponse"/>&gt;</returns>
        Task<IRefreshContractApiResponse> RefreshContractAsync(AutomationRefreshContractRequestBody automationRefreshContractRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Schedule a contract refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="automationRefreshContractRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRefreshContractApiResponse"/>&gt;</returns>
        Task<IRefreshContractApiResponse> RefreshContractOrDefaultAsync(AutomationRefreshContractRequestBody automationRefreshContractRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Schedule a token refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationRefreshTokenRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRefreshTokenApiResponse"/>&gt;</returns>
        Task<IRefreshTokenApiResponse> RefreshTokenAsync(AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Schedule a token refresh in the indexer
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="automationRefreshTokenRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRefreshTokenApiResponse"/>&gt;</returns>
        Task<IRefreshTokenApiResponse> RefreshTokenOrDefaultAsync(AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAcceptAssetOfferV2ApiResponse"/>
    /// </summary>
    public interface IAcceptAssetOfferV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationTransactionResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IBuyListedAssetV2ApiResponse"/>
    /// </summary>
    public interface IBuyListedAssetV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationTransactionResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="ICancelAssetOfferV2ApiResponse"/>
    /// </summary>
    public interface ICancelAssetOfferV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationTransactionResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="ICancelListingV2ApiResponse"/>
    /// </summary>
    public interface ICancelListingV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationTransactionResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="ICreateAssetOfferV2ApiResponse"/>
    /// </summary>
    public interface ICreateAssetOfferV2ApiResponse : BeamAutomationClient.Client.IApiResponse, ICreated<BeamAutomationClient.Model.AutomationCreateOfferResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssetOffersV2ApiResponse"/>
    /// </summary>
    public interface IGetAssetOffersV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetChainCurrenciesV2ApiResponse"/>
    /// </summary>
    public interface IGetChainCurrenciesV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetChainCurrenciesResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetListedAssetsForProfilePostV2ApiResponse"/>
    /// </summary>
    public interface IGetListedAssetsForProfilePostV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetListedAssetsPostV2ApiResponse"/>
    /// </summary>
    public interface IGetListedAssetsPostV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlayerAssetOffersV2ApiResponse"/>
    /// </summary>
    public interface IGetPlayerAssetOffersV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlayerOffersV2ApiResponse"/>
    /// </summary>
    public interface IGetPlayerOffersV2ApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IListAssetV2ApiResponse"/>
    /// </summary>
    public interface IListAssetV2ApiResponse : BeamAutomationClient.Client.IApiResponse, ICreated<BeamAutomationClient.Model.AutomationSellAssetResponseV2>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IRefreshContractApiResponse"/>
    /// </summary>
    public interface IRefreshContractApiResponse : BeamAutomationClient.Client.IApiResponse, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IRefreshTokenApiResponse"/>
    /// </summary>
    public interface IRefreshTokenApiResponse : BeamAutomationClient.Client.IApiResponse, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AutomationMarketplaceV2ApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAcceptAssetOfferV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAcceptAssetOfferV2;

        internal void ExecuteOnAcceptAssetOfferV2(AutomationMarketplaceV2Api.AcceptAssetOfferV2ApiResponse apiResponse)
        {
            OnAcceptAssetOfferV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAcceptAssetOfferV2(Exception exception)
        {
            OnErrorAcceptAssetOfferV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnBuyListedAssetV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorBuyListedAssetV2;

        internal void ExecuteOnBuyListedAssetV2(AutomationMarketplaceV2Api.BuyListedAssetV2ApiResponse apiResponse)
        {
            OnBuyListedAssetV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorBuyListedAssetV2(Exception exception)
        {
            OnErrorBuyListedAssetV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCancelAssetOfferV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCancelAssetOfferV2;

        internal void ExecuteOnCancelAssetOfferV2(AutomationMarketplaceV2Api.CancelAssetOfferV2ApiResponse apiResponse)
        {
            OnCancelAssetOfferV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCancelAssetOfferV2(Exception exception)
        {
            OnErrorCancelAssetOfferV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCancelListingV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCancelListingV2;

        internal void ExecuteOnCancelListingV2(AutomationMarketplaceV2Api.CancelListingV2ApiResponse apiResponse)
        {
            OnCancelListingV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCancelListingV2(Exception exception)
        {
            OnErrorCancelListingV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateAssetOfferV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateAssetOfferV2;

        internal void ExecuteOnCreateAssetOfferV2(AutomationMarketplaceV2Api.CreateAssetOfferV2ApiResponse apiResponse)
        {
            OnCreateAssetOfferV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateAssetOfferV2(Exception exception)
        {
            OnErrorCreateAssetOfferV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAssetOffersV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAssetOffersV2;

        internal void ExecuteOnGetAssetOffersV2(AutomationMarketplaceV2Api.GetAssetOffersV2ApiResponse apiResponse)
        {
            OnGetAssetOffersV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetOffersV2(Exception exception)
        {
            OnErrorGetAssetOffersV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetChainCurrenciesV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetChainCurrenciesV2;

        internal void ExecuteOnGetChainCurrenciesV2(AutomationMarketplaceV2Api.GetChainCurrenciesV2ApiResponse apiResponse)
        {
            OnGetChainCurrenciesV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChainCurrenciesV2(Exception exception)
        {
            OnErrorGetChainCurrenciesV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetListedAssetsForProfilePostV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetListedAssetsForProfilePostV2;

        internal void ExecuteOnGetListedAssetsForProfilePostV2(AutomationMarketplaceV2Api.GetListedAssetsForProfilePostV2ApiResponse apiResponse)
        {
            OnGetListedAssetsForProfilePostV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetListedAssetsForProfilePostV2(Exception exception)
        {
            OnErrorGetListedAssetsForProfilePostV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetListedAssetsPostV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetListedAssetsPostV2;

        internal void ExecuteOnGetListedAssetsPostV2(AutomationMarketplaceV2Api.GetListedAssetsPostV2ApiResponse apiResponse)
        {
            OnGetListedAssetsPostV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetListedAssetsPostV2(Exception exception)
        {
            OnErrorGetListedAssetsPostV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPlayerAssetOffersV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPlayerAssetOffersV2;

        internal void ExecuteOnGetPlayerAssetOffersV2(AutomationMarketplaceV2Api.GetPlayerAssetOffersV2ApiResponse apiResponse)
        {
            OnGetPlayerAssetOffersV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlayerAssetOffersV2(Exception exception)
        {
            OnErrorGetPlayerAssetOffersV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPlayerOffersV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPlayerOffersV2;

        internal void ExecuteOnGetPlayerOffersV2(AutomationMarketplaceV2Api.GetPlayerOffersV2ApiResponse apiResponse)
        {
            OnGetPlayerOffersV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlayerOffersV2(Exception exception)
        {
            OnErrorGetPlayerOffersV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListAssetV2;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListAssetV2;

        internal void ExecuteOnListAssetV2(AutomationMarketplaceV2Api.ListAssetV2ApiResponse apiResponse)
        {
            OnListAssetV2?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListAssetV2(Exception exception)
        {
            OnErrorListAssetV2?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRefreshContract;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRefreshContract;

        internal void ExecuteOnRefreshContract(AutomationMarketplaceV2Api.RefreshContractApiResponse apiResponse)
        {
            OnRefreshContract?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRefreshContract(Exception exception)
        {
            OnErrorRefreshContract?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnRefreshToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorRefreshToken;

        internal void ExecuteOnRefreshToken(AutomationMarketplaceV2Api.RefreshTokenApiResponse apiResponse)
        {
            OnRefreshToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRefreshToken(Exception exception)
        {
            OnErrorRefreshToken?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AutomationMarketplaceV2Api : IAutomationMarketplaceV2Api
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AutomationMarketplaceV2Api> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AutomationMarketplaceV2ApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<AutomationApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationMarketplaceV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationMarketplaceV2Api(ILogger<AutomationMarketplaceV2Api> logger, ILoggerFactory loggerFactory, HttpClient httpClient, AutomationJsonSerializerOptionsProvider jsonSerializerOptionsProvider, AutomationMarketplaceV2ApiEvents automationMarketplaceV2ApiEvents,
            TokenProvider<AutomationApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AutomationMarketplaceV2Api>();
            HttpClient = httpClient;
            Events = automationMarketplaceV2ApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAcceptAssetOfferV2(ref string entityId, ref string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationAcceptAssetOfferRequestInputV2"></param>
        /// <returns></returns>
        private void ValidateAcceptAssetOfferV2(string entityId, string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (offerId == null)
                throw new ArgumentNullException(nameof(offerId));

            if (automationAcceptAssetOfferRequestInputV2 == null)
                throw new ArgumentNullException(nameof(automationAcceptAssetOfferRequestInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationAcceptAssetOfferRequestInputV2"></param>
        private void AfterAcceptAssetOfferV2DefaultImplementation(IAcceptAssetOfferV2ApiResponse apiResponseLocalVar, string entityId, string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2)
        {
            bool suppressDefaultLog = false;
            AfterAcceptAssetOfferV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, offerId, automationAcceptAssetOfferRequestInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationAcceptAssetOfferRequestInputV2"></param>
        partial void AfterAcceptAssetOfferV2(ref bool suppressDefaultLog, IAcceptAssetOfferV2ApiResponse apiResponseLocalVar, string entityId, string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationAcceptAssetOfferRequestInputV2"></param>
        private void OnErrorAcceptAssetOfferV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorAcceptAssetOfferV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, offerId, automationAcceptAssetOfferRequestInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationAcceptAssetOfferRequestInputV2"></param>
        partial void OnErrorAcceptAssetOfferV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2);

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationAcceptAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptAssetOfferV2ApiResponse"/>&gt;</returns>
        public async Task<IAcceptAssetOfferV2ApiResponse> AcceptAssetOfferV2OrDefaultAsync(string entityId, string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AcceptAssetOfferV2Async(entityId, offerId, automationAcceptAssetOfferRequestInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationAcceptAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptAssetOfferV2ApiResponse"/>&gt;</returns>
        public async Task<IAcceptAssetOfferV2ApiResponse> AcceptAssetOfferV2Async(string entityId, string offerId, AutomationAcceptAssetOfferRequestInputV2 automationAcceptAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAcceptAssetOfferV2(entityId, offerId, automationAcceptAssetOfferRequestInputV2);

                FormatAcceptAssetOfferV2(ref entityId, ref offerId, automationAcceptAssetOfferRequestInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/profiles/{entityId}/offers/{offerId}/accept";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BofferId%7D", Uri.EscapeDataString(offerId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationAcceptAssetOfferRequestInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationAcceptAssetOfferRequestInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AcceptAssetOfferV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AcceptAssetOfferV2ApiResponse>();

                        AcceptAssetOfferV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/profiles/{entityId}/offers/{offerId}/accept", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAcceptAssetOfferV2DefaultImplementation(apiResponseLocalVar, entityId, offerId, automationAcceptAssetOfferRequestInputV2);

                        Events.ExecuteOnAcceptAssetOfferV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAcceptAssetOfferV2DefaultImplementation(e, "/v2/marketplace/profiles/{entityId}/offers/{offerId}/accept", uriBuilderLocalVar.Path, entityId, offerId, automationAcceptAssetOfferRequestInputV2);
                Events.ExecuteOnErrorAcceptAssetOfferV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AcceptAssetOfferV2ApiResponse"/>
        /// </summary>
        public partial class AcceptAssetOfferV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IAcceptAssetOfferV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AcceptAssetOfferV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AcceptAssetOfferV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AcceptAssetOfferV2ApiResponse(ILogger<AcceptAssetOfferV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationTransactionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationTransactionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationTransactionResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatBuyListedAssetV2(ref string entityId, ref string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationBuyAssetRequestInputV2"></param>
        /// <returns></returns>
        private void ValidateBuyListedAssetV2(string entityId, string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId));

            if (automationBuyAssetRequestInputV2 == null)
                throw new ArgumentNullException(nameof(automationBuyAssetRequestInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationBuyAssetRequestInputV2"></param>
        private void AfterBuyListedAssetV2DefaultImplementation(IBuyListedAssetV2ApiResponse apiResponseLocalVar, string entityId, string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2)
        {
            bool suppressDefaultLog = false;
            AfterBuyListedAssetV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, orderId, automationBuyAssetRequestInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationBuyAssetRequestInputV2"></param>
        partial void AfterBuyListedAssetV2(ref bool suppressDefaultLog, IBuyListedAssetV2ApiResponse apiResponseLocalVar, string entityId, string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationBuyAssetRequestInputV2"></param>
        private void OnErrorBuyListedAssetV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorBuyListedAssetV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, orderId, automationBuyAssetRequestInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationBuyAssetRequestInputV2"></param>
        partial void OnErrorBuyListedAssetV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2);

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationBuyAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBuyListedAssetV2ApiResponse"/>&gt;</returns>
        public async Task<IBuyListedAssetV2ApiResponse> BuyListedAssetV2OrDefaultAsync(string entityId, string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await BuyListedAssetV2Async(entityId, orderId, automationBuyAssetRequestInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationBuyAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBuyListedAssetV2ApiResponse"/>&gt;</returns>
        public async Task<IBuyListedAssetV2ApiResponse> BuyListedAssetV2Async(string entityId, string orderId, AutomationBuyAssetRequestInputV2 automationBuyAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateBuyListedAssetV2(entityId, orderId, automationBuyAssetRequestInputV2);

                FormatBuyListedAssetV2(ref entityId, ref orderId, automationBuyAssetRequestInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/profiles/{entityId}/listing/{orderId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BorderId%7D", Uri.EscapeDataString(orderId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationBuyAssetRequestInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationBuyAssetRequestInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<BuyListedAssetV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<BuyListedAssetV2ApiResponse>();

                        BuyListedAssetV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/profiles/{entityId}/listing/{orderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterBuyListedAssetV2DefaultImplementation(apiResponseLocalVar, entityId, orderId, automationBuyAssetRequestInputV2);

                        Events.ExecuteOnBuyListedAssetV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorBuyListedAssetV2DefaultImplementation(e, "/v2/marketplace/profiles/{entityId}/listing/{orderId}", uriBuilderLocalVar.Path, entityId, orderId, automationBuyAssetRequestInputV2);
                Events.ExecuteOnErrorBuyListedAssetV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="BuyListedAssetV2ApiResponse"/>
        /// </summary>
        public partial class BuyListedAssetV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IBuyListedAssetV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<BuyListedAssetV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="BuyListedAssetV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BuyListedAssetV2ApiResponse(ILogger<BuyListedAssetV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationTransactionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationTransactionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationTransactionResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCancelAssetOfferV2(ref string entityId, ref string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationCancelAssetOfferRequestInputV2"></param>
        /// <returns></returns>
        private void ValidateCancelAssetOfferV2(string entityId, string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (offerId == null)
                throw new ArgumentNullException(nameof(offerId));

            if (automationCancelAssetOfferRequestInputV2 == null)
                throw new ArgumentNullException(nameof(automationCancelAssetOfferRequestInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationCancelAssetOfferRequestInputV2"></param>
        private void AfterCancelAssetOfferV2DefaultImplementation(ICancelAssetOfferV2ApiResponse apiResponseLocalVar, string entityId, string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2)
        {
            bool suppressDefaultLog = false;
            AfterCancelAssetOfferV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, offerId, automationCancelAssetOfferRequestInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationCancelAssetOfferRequestInputV2"></param>
        partial void AfterCancelAssetOfferV2(ref bool suppressDefaultLog, ICancelAssetOfferV2ApiResponse apiResponseLocalVar, string entityId, string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationCancelAssetOfferRequestInputV2"></param>
        private void OnErrorCancelAssetOfferV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCancelAssetOfferV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, offerId, automationCancelAssetOfferRequestInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationCancelAssetOfferRequestInputV2"></param>
        partial void OnErrorCancelAssetOfferV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2);

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationCancelAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelAssetOfferV2ApiResponse"/>&gt;</returns>
        public async Task<ICancelAssetOfferV2ApiResponse> CancelAssetOfferV2OrDefaultAsync(string entityId, string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CancelAssetOfferV2Async(entityId, offerId, automationCancelAssetOfferRequestInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="automationCancelAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelAssetOfferV2ApiResponse"/>&gt;</returns>
        public async Task<ICancelAssetOfferV2ApiResponse> CancelAssetOfferV2Async(string entityId, string offerId, AutomationCancelAssetOfferRequestInputV2 automationCancelAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCancelAssetOfferV2(entityId, offerId, automationCancelAssetOfferRequestInputV2);

                FormatCancelAssetOfferV2(ref entityId, ref offerId, automationCancelAssetOfferRequestInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/profiles/{entityId}/offers/{offerId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BofferId%7D", Uri.EscapeDataString(offerId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationCancelAssetOfferRequestInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationCancelAssetOfferRequestInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CancelAssetOfferV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CancelAssetOfferV2ApiResponse>();

                        CancelAssetOfferV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/profiles/{entityId}/offers/{offerId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCancelAssetOfferV2DefaultImplementation(apiResponseLocalVar, entityId, offerId, automationCancelAssetOfferRequestInputV2);

                        Events.ExecuteOnCancelAssetOfferV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCancelAssetOfferV2DefaultImplementation(e, "/v2/marketplace/profiles/{entityId}/offers/{offerId}", uriBuilderLocalVar.Path, entityId, offerId, automationCancelAssetOfferRequestInputV2);
                Events.ExecuteOnErrorCancelAssetOfferV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CancelAssetOfferV2ApiResponse"/>
        /// </summary>
        public partial class CancelAssetOfferV2ApiResponse : BeamAutomationClient.Client.ApiResponse, ICancelAssetOfferV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CancelAssetOfferV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CancelAssetOfferV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CancelAssetOfferV2ApiResponse(ILogger<CancelAssetOfferV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationTransactionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationTransactionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationTransactionResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCancelListingV2(ref string entityId, ref string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2, ref Option<long> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationCancelAssetListingRequestInputV2"></param>
        /// <returns></returns>
        private void ValidateCancelListingV2(string entityId, string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId));

            if (automationCancelAssetListingRequestInputV2 == null)
                throw new ArgumentNullException(nameof(automationCancelAssetListingRequestInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationCancelAssetListingRequestInputV2"></param>
        /// <param name="chainId"></param>
        private void AfterCancelListingV2DefaultImplementation(ICancelListingV2ApiResponse apiResponseLocalVar, string entityId, string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2, Option<long> chainId)
        {
            bool suppressDefaultLog = false;
            AfterCancelListingV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, orderId, automationCancelAssetListingRequestInputV2, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationCancelAssetListingRequestInputV2"></param>
        /// <param name="chainId"></param>
        partial void AfterCancelListingV2(ref bool suppressDefaultLog, ICancelListingV2ApiResponse apiResponseLocalVar, string entityId, string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2, Option<long> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationCancelAssetListingRequestInputV2"></param>
        /// <param name="chainId"></param>
        private void OnErrorCancelListingV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2, Option<long> chainId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCancelListingV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, orderId, automationCancelAssetListingRequestInputV2, chainId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationCancelAssetListingRequestInputV2"></param>
        /// <param name="chainId"></param>
        partial void OnErrorCancelListingV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2, Option<long> chainId);

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationCancelAssetListingRequestInputV2"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelListingV2ApiResponse"/>&gt;</returns>
        public async Task<ICancelListingV2ApiResponse> CancelListingV2OrDefaultAsync(string entityId, string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CancelListingV2Async(entityId, orderId, automationCancelAssetListingRequestInputV2, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="automationCancelAssetListingRequestInputV2"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelListingV2ApiResponse"/>&gt;</returns>
        public async Task<ICancelListingV2ApiResponse> CancelListingV2Async(string entityId, string orderId, AutomationCancelAssetListingRequestInputV2 automationCancelAssetListingRequestInputV2, Option<long> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCancelListingV2(entityId, orderId, automationCancelAssetListingRequestInputV2);

                FormatCancelListingV2(ref entityId, ref orderId, automationCancelAssetListingRequestInputV2, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/profiles/{entityId}/listing/{orderId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BorderId%7D", Uri.EscapeDataString(orderId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = ClientUtils.ParameterToString(chainId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (automationCancelAssetListingRequestInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationCancelAssetListingRequestInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CancelListingV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CancelListingV2ApiResponse>();

                        CancelListingV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/profiles/{entityId}/listing/{orderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCancelListingV2DefaultImplementation(apiResponseLocalVar, entityId, orderId, automationCancelAssetListingRequestInputV2, chainId);

                        Events.ExecuteOnCancelListingV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCancelListingV2DefaultImplementation(e, "/v2/marketplace/profiles/{entityId}/listing/{orderId}", uriBuilderLocalVar.Path, entityId, orderId, automationCancelAssetListingRequestInputV2, chainId);
                Events.ExecuteOnErrorCancelListingV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CancelListingV2ApiResponse"/>
        /// </summary>
        public partial class CancelListingV2ApiResponse : BeamAutomationClient.Client.ApiResponse, ICancelListingV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CancelListingV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CancelListingV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CancelListingV2ApiResponse(ILogger<CancelListingV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationTransactionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationTransactionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationTransactionResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateAssetOfferV2(ref string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        /// <returns></returns>
        private void ValidateCreateAssetOfferV2(string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationCreateAssetOfferRequestInputV2 == null)
                throw new ArgumentNullException(nameof(automationCreateAssetOfferRequestInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        private void AfterCreateAssetOfferV2DefaultImplementation(ICreateAssetOfferV2ApiResponse apiResponseLocalVar, string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2)
        {
            bool suppressDefaultLog = false;
            AfterCreateAssetOfferV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationCreateAssetOfferRequestInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        partial void AfterCreateAssetOfferV2(ref bool suppressDefaultLog, ICreateAssetOfferV2ApiResponse apiResponseLocalVar, string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        private void OnErrorCreateAssetOfferV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorCreateAssetOfferV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationCreateAssetOfferRequestInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        partial void OnErrorCreateAssetOfferV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2);

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAssetOfferV2ApiResponse"/>&gt;</returns>
        public async Task<ICreateAssetOfferV2ApiResponse> CreateAssetOfferV2OrDefaultAsync(string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateAssetOfferV2Async(entityId, automationCreateAssetOfferRequestInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAssetOfferV2ApiResponse"/>&gt;</returns>
        public async Task<ICreateAssetOfferV2ApiResponse> CreateAssetOfferV2Async(string entityId, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateAssetOfferV2(entityId, automationCreateAssetOfferRequestInputV2);

                FormatCreateAssetOfferV2(ref entityId, automationCreateAssetOfferRequestInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/profiles/{entityId}/offers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationCreateAssetOfferRequestInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationCreateAssetOfferRequestInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateAssetOfferV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateAssetOfferV2ApiResponse>();

                        CreateAssetOfferV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/profiles/{entityId}/offers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateAssetOfferV2DefaultImplementation(apiResponseLocalVar, entityId, automationCreateAssetOfferRequestInputV2);

                        Events.ExecuteOnCreateAssetOfferV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateAssetOfferV2DefaultImplementation(e, "/v2/marketplace/profiles/{entityId}/offers", uriBuilderLocalVar.Path, entityId, automationCreateAssetOfferRequestInputV2);
                Events.ExecuteOnErrorCreateAssetOfferV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateAssetOfferV2ApiResponse"/>
        /// </summary>
        public partial class CreateAssetOfferV2ApiResponse : BeamAutomationClient.Client.ApiResponse, ICreateAssetOfferV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateAssetOfferV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateAssetOfferV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateAssetOfferV2ApiResponse(ILogger<CreateAssetOfferV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationCreateOfferResponseV2 Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationCreateOfferResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationCreateOfferResponseV2 result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssetOffersV2(ref string assetAddress, ref string assetId, ref Option<long> chainId, ref Option<string> continuation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="continuation"></param>
        /// <returns></returns>
        private void ValidateGetAssetOffersV2(string assetAddress, string assetId, Option<string> continuation)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));

            if (continuation.IsSet && continuation.Value == null)
                throw new ArgumentNullException(nameof(continuation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        private void AfterGetAssetOffersV2DefaultImplementation(IGetAssetOffersV2ApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<long> chainId, Option<string> continuation)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetOffersV2(ref suppressDefaultLog, apiResponseLocalVar, assetAddress, assetId, chainId, continuation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        partial void AfterGetAssetOffersV2(ref bool suppressDefaultLog, IGetAssetOffersV2ApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<long> chainId, Option<string> continuation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        private void OnErrorGetAssetOffersV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, string assetId, Option<long> chainId, Option<string> continuation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssetOffersV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetAddress, assetId, chainId, continuation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        partial void OnErrorGetAssetOffersV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, string assetId, Option<long> chainId, Option<string> continuation);

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetOffersV2ApiResponse"/>&gt;</returns>
        public async Task<IGetAssetOffersV2ApiResponse> GetAssetOffersV2OrDefaultAsync(string assetAddress, string assetId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetOffersV2Async(assetAddress, assetId, chainId, continuation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetOffersV2ApiResponse"/>&gt;</returns>
        public async Task<IGetAssetOffersV2ApiResponse> GetAssetOffersV2Async(string assetAddress, string assetId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetOffersV2(assetAddress, assetId, continuation);

                FormatGetAssetOffersV2(ref assetAddress, ref assetId, ref chainId, ref continuation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/offers/asset/{assetAddress}/{assetId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetId%7D", Uri.EscapeDataString(assetId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = ClientUtils.ParameterToString(chainId.Value);

                    if (continuation.IsSet)
                        parseQueryStringLocalVar["continuation"] = ClientUtils.ParameterToString(continuation.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetOffersV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetOffersV2ApiResponse>();

                        GetAssetOffersV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/offers/asset/{assetAddress}/{assetId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetOffersV2DefaultImplementation(apiResponseLocalVar, assetAddress, assetId, chainId, continuation);

                        Events.ExecuteOnGetAssetOffersV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetOffersV2DefaultImplementation(e, "/v2/marketplace/offers/asset/{assetAddress}/{assetId}", uriBuilderLocalVar.Path, assetAddress, assetId, chainId, continuation);
                Events.ExecuteOnErrorGetAssetOffersV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetOffersV2ApiResponse"/>
        /// </summary>
        public partial class GetAssetOffersV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetAssetOffersV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetOffersV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetOffersV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetOffersV2ApiResponse(ILogger<GetAssetOffersV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChainCurrenciesV2(ref decimal chainId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        private void AfterGetChainCurrenciesV2DefaultImplementation(IGetChainCurrenciesV2ApiResponse apiResponseLocalVar, decimal chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetChainCurrenciesV2(ref suppressDefaultLog, apiResponseLocalVar, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        partial void AfterGetChainCurrenciesV2(ref bool suppressDefaultLog, IGetChainCurrenciesV2ApiResponse apiResponseLocalVar, decimal chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetChainCurrenciesV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, decimal chainId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetChainCurrenciesV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, chainId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetChainCurrenciesV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, decimal chainId);

        /// <summary>
        /// Get available currencies for given chain 
        /// </summary>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChainCurrenciesV2ApiResponse"/>&gt;</returns>
        public async Task<IGetChainCurrenciesV2ApiResponse> GetChainCurrenciesV2OrDefaultAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChainCurrenciesV2Async(chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get available currencies for given chain 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChainCurrenciesV2ApiResponse"/>&gt;</returns>
        public async Task<IGetChainCurrenciesV2ApiResponse> GetChainCurrenciesV2Async(decimal chainId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChainCurrenciesV2(ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/chain-currencies/{chainId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchainId%7D", Uri.EscapeDataString(chainId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChainCurrenciesV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChainCurrenciesV2ApiResponse>();

                        GetChainCurrenciesV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/chain-currencies/{chainId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChainCurrenciesV2DefaultImplementation(apiResponseLocalVar, chainId);

                        Events.ExecuteOnGetChainCurrenciesV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChainCurrenciesV2DefaultImplementation(e, "/v2/marketplace/chain-currencies/{chainId}", uriBuilderLocalVar.Path, chainId);
                Events.ExecuteOnErrorGetChainCurrenciesV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChainCurrenciesV2ApiResponse"/>
        /// </summary>
        public partial class GetChainCurrenciesV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetChainCurrenciesV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChainCurrenciesV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChainCurrenciesV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChainCurrenciesV2ApiResponse(ILogger<GetChainCurrenciesV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetChainCurrenciesResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetChainCurrenciesResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetChainCurrenciesResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetListedAssetsForProfilePostV2(ref string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <returns></returns>
        private void ValidateGetListedAssetsForProfilePostV2(string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationGetListedAssetsBodyInputV2 == null)
                throw new ArgumentNullException(nameof(automationGetListedAssetsBodyInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        private void AfterGetListedAssetsForProfilePostV2DefaultImplementation(IGetListedAssetsForProfilePostV2ApiResponse apiResponseLocalVar, string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2)
        {
            bool suppressDefaultLog = false;
            AfterGetListedAssetsForProfilePostV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationGetListedAssetsBodyInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        partial void AfterGetListedAssetsForProfilePostV2(ref bool suppressDefaultLog, IGetListedAssetsForProfilePostV2ApiResponse apiResponseLocalVar, string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        private void OnErrorGetListedAssetsForProfilePostV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetListedAssetsForProfilePostV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationGetListedAssetsBodyInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        partial void OnErrorGetListedAssetsForProfilePostV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfilePostV2ApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsForProfilePostV2ApiResponse> GetListedAssetsForProfilePostV2OrDefaultAsync(string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListedAssetsForProfilePostV2Async(entityId, automationGetListedAssetsBodyInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfilePostV2ApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsForProfilePostV2ApiResponse> GetListedAssetsForProfilePostV2Async(string entityId, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetListedAssetsForProfilePostV2(entityId, automationGetListedAssetsBodyInputV2);

                FormatGetListedAssetsForProfilePostV2(ref entityId, automationGetListedAssetsBodyInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationGetListedAssetsBodyInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationGetListedAssetsBodyInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetListedAssetsForProfilePostV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetListedAssetsForProfilePostV2ApiResponse>();

                        GetListedAssetsForProfilePostV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListedAssetsForProfilePostV2DefaultImplementation(apiResponseLocalVar, entityId, automationGetListedAssetsBodyInputV2);

                        Events.ExecuteOnGetListedAssetsForProfilePostV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListedAssetsForProfilePostV2DefaultImplementation(e, "/v2/marketplace/profiles/{entityId}", uriBuilderLocalVar.Path, entityId, automationGetListedAssetsBodyInputV2);
                Events.ExecuteOnErrorGetListedAssetsForProfilePostV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetListedAssetsForProfilePostV2ApiResponse"/>
        /// </summary>
        public partial class GetListedAssetsForProfilePostV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetListedAssetsForProfilePostV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetListedAssetsForProfilePostV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetListedAssetsForProfilePostV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetListedAssetsForProfilePostV2ApiResponse(ILogger<GetListedAssetsForProfilePostV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetListedAssetsPostV2(AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <returns></returns>
        private void ValidateGetListedAssetsPostV2(AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2)
        {
            if (automationGetListedAssetsBodyInputV2 == null)
                throw new ArgumentNullException(nameof(automationGetListedAssetsBodyInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        private void AfterGetListedAssetsPostV2DefaultImplementation(IGetListedAssetsPostV2ApiResponse apiResponseLocalVar, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2)
        {
            bool suppressDefaultLog = false;
            AfterGetListedAssetsPostV2(ref suppressDefaultLog, apiResponseLocalVar, automationGetListedAssetsBodyInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        partial void AfterGetListedAssetsPostV2(ref bool suppressDefaultLog, IGetListedAssetsPostV2ApiResponse apiResponseLocalVar, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        private void OnErrorGetListedAssetsPostV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetListedAssetsPostV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, automationGetListedAssetsBodyInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        partial void OnErrorGetListedAssetsPostV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsPostV2ApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsPostV2ApiResponse> GetListedAssetsPostV2OrDefaultAsync(AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListedAssetsPostV2Async(automationGetListedAssetsBodyInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationGetListedAssetsBodyInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsPostV2ApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsPostV2ApiResponse> GetListedAssetsPostV2Async(AutomationGetListedAssetsBodyInputV2 automationGetListedAssetsBodyInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetListedAssetsPostV2(automationGetListedAssetsBodyInputV2);

                FormatGetListedAssetsPostV2(automationGetListedAssetsBodyInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace";

                    httpRequestMessageLocalVar.Content = (automationGetListedAssetsBodyInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationGetListedAssetsBodyInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetListedAssetsPostV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetListedAssetsPostV2ApiResponse>();

                        GetListedAssetsPostV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListedAssetsPostV2DefaultImplementation(apiResponseLocalVar, automationGetListedAssetsBodyInputV2);

                        Events.ExecuteOnGetListedAssetsPostV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListedAssetsPostV2DefaultImplementation(e, "/v2/marketplace", uriBuilderLocalVar.Path, automationGetListedAssetsBodyInputV2);
                Events.ExecuteOnErrorGetListedAssetsPostV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetListedAssetsPostV2ApiResponse"/>
        /// </summary>
        public partial class GetListedAssetsPostV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetListedAssetsPostV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetListedAssetsPostV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetListedAssetsPostV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetListedAssetsPostV2ApiResponse(ILogger<GetListedAssetsPostV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPlayerAssetOffersV2(ref string entityId, ref string assetAddress, ref string assetId, ref Option<long> chainId, ref Option<string> continuation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="continuation"></param>
        /// <returns></returns>
        private void ValidateGetPlayerAssetOffersV2(string entityId, string assetAddress, string assetId, Option<string> continuation)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));

            if (continuation.IsSet && continuation.Value == null)
                throw new ArgumentNullException(nameof(continuation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        private void AfterGetPlayerAssetOffersV2DefaultImplementation(IGetPlayerAssetOffersV2ApiResponse apiResponseLocalVar, string entityId, string assetAddress, string assetId, Option<long> chainId, Option<string> continuation)
        {
            bool suppressDefaultLog = false;
            AfterGetPlayerAssetOffersV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, assetAddress, assetId, chainId, continuation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        partial void AfterGetPlayerAssetOffersV2(ref bool suppressDefaultLog, IGetPlayerAssetOffersV2ApiResponse apiResponseLocalVar, string entityId, string assetAddress, string assetId, Option<long> chainId, Option<string> continuation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        private void OnErrorGetPlayerAssetOffersV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string assetAddress, string assetId, Option<long> chainId, Option<string> continuation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPlayerAssetOffersV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, assetAddress, assetId, chainId, continuation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        partial void OnErrorGetPlayerAssetOffersV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, string assetAddress, string assetId, Option<long> chainId, Option<string> continuation);

        /// <summary>
        /// Get all asset offers that player created 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerAssetOffersV2ApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerAssetOffersV2ApiResponse> GetPlayerAssetOffersV2OrDefaultAsync(string entityId, string assetAddress, string assetId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlayerAssetOffersV2Async(entityId, assetAddress, assetId, chainId, continuation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all asset offers that player created 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerAssetOffersV2ApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerAssetOffersV2ApiResponse> GetPlayerAssetOffersV2Async(string entityId, string assetAddress, string assetId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPlayerAssetOffersV2(entityId, assetAddress, assetId, continuation);

                FormatGetPlayerAssetOffersV2(ref entityId, ref assetAddress, ref assetId, ref chainId, ref continuation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/profiles/{entityId}/offers/asset/{assetAddress}/{assetId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetId%7D", Uri.EscapeDataString(assetId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = ClientUtils.ParameterToString(chainId.Value);

                    if (continuation.IsSet)
                        parseQueryStringLocalVar["continuation"] = ClientUtils.ParameterToString(continuation.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlayerAssetOffersV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlayerAssetOffersV2ApiResponse>();

                        GetPlayerAssetOffersV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/profiles/{entityId}/offers/asset/{assetAddress}/{assetId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlayerAssetOffersV2DefaultImplementation(apiResponseLocalVar, entityId, assetAddress, assetId, chainId, continuation);

                        Events.ExecuteOnGetPlayerAssetOffersV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlayerAssetOffersV2DefaultImplementation(e, "/v2/marketplace/profiles/{entityId}/offers/asset/{assetAddress}/{assetId}", uriBuilderLocalVar.Path, entityId, assetAddress, assetId, chainId, continuation);
                Events.ExecuteOnErrorGetPlayerAssetOffersV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlayerAssetOffersV2ApiResponse"/>
        /// </summary>
        public partial class GetPlayerAssetOffersV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetPlayerAssetOffersV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlayerAssetOffersV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlayerAssetOffersV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlayerAssetOffersV2ApiResponse(ILogger<GetPlayerAssetOffersV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPlayerOffersV2(ref string entityId, ref Option<long> chainId, ref Option<string> continuation);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="continuation"></param>
        /// <returns></returns>
        private void ValidateGetPlayerOffersV2(string entityId, Option<string> continuation)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (continuation.IsSet && continuation.Value == null)
                throw new ArgumentNullException(nameof(continuation));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        private void AfterGetPlayerOffersV2DefaultImplementation(IGetPlayerOffersV2ApiResponse apiResponseLocalVar, string entityId, Option<long> chainId, Option<string> continuation)
        {
            bool suppressDefaultLog = false;
            AfterGetPlayerOffersV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId, continuation);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        partial void AfterGetPlayerOffersV2(ref bool suppressDefaultLog, IGetPlayerOffersV2ApiResponse apiResponseLocalVar, string entityId, Option<long> chainId, Option<string> continuation);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        private void OnErrorGetPlayerOffersV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, Option<long> chainId, Option<string> continuation)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPlayerOffersV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, chainId, continuation);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        /// <param name="continuation"></param>
        partial void OnErrorGetPlayerOffersV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, Option<long> chainId, Option<string> continuation);

        /// <summary>
        /// Get all offers that a profile created 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerOffersV2ApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerOffersV2ApiResponse> GetPlayerOffersV2OrDefaultAsync(string entityId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlayerOffersV2Async(entityId, chainId, continuation, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all offers that a profile created 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="continuation"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerOffersV2ApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerOffersV2ApiResponse> GetPlayerOffersV2Async(string entityId, Option<long> chainId = default, Option<string> continuation = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPlayerOffersV2(entityId, continuation);

                FormatGetPlayerOffersV2(ref entityId, ref chainId, ref continuation);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/profiles/{entityId}/offers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = ClientUtils.ParameterToString(chainId.Value);

                    if (continuation.IsSet)
                        parseQueryStringLocalVar["continuation"] = ClientUtils.ParameterToString(continuation.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlayerOffersV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlayerOffersV2ApiResponse>();

                        GetPlayerOffersV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/profiles/{entityId}/offers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlayerOffersV2DefaultImplementation(apiResponseLocalVar, entityId, chainId, continuation);

                        Events.ExecuteOnGetPlayerOffersV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlayerOffersV2DefaultImplementation(e, "/v2/marketplace/profiles/{entityId}/offers", uriBuilderLocalVar.Path, entityId, chainId, continuation);
                Events.ExecuteOnErrorGetPlayerOffersV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlayerOffersV2ApiResponse"/>
        /// </summary>
        public partial class GetPlayerOffersV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IGetPlayerOffersV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlayerOffersV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlayerOffersV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlayerOffersV2ApiResponse(ILogger<GetPlayerOffersV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationGetAssetListingsResponseV2 result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListAssetV2(ref string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationSellAssetRequestInputV2"></param>
        /// <returns></returns>
        private void ValidateListAssetV2(string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationSellAssetRequestInputV2 == null)
                throw new ArgumentNullException(nameof(automationSellAssetRequestInputV2));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationSellAssetRequestInputV2"></param>
        private void AfterListAssetV2DefaultImplementation(IListAssetV2ApiResponse apiResponseLocalVar, string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2)
        {
            bool suppressDefaultLog = false;
            AfterListAssetV2(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationSellAssetRequestInputV2);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationSellAssetRequestInputV2"></param>
        partial void AfterListAssetV2(ref bool suppressDefaultLog, IListAssetV2ApiResponse apiResponseLocalVar, string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationSellAssetRequestInputV2"></param>
        private void OnErrorListAssetV2DefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorListAssetV2(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationSellAssetRequestInputV2);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationSellAssetRequestInputV2"></param>
        partial void OnErrorListAssetV2(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2);

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationSellAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAssetV2ApiResponse"/>&gt;</returns>
        public async Task<IListAssetV2ApiResponse> ListAssetV2OrDefaultAsync(string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListAssetV2Async(entityId, automationSellAssetRequestInputV2, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationSellAssetRequestInputV2"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAssetV2ApiResponse"/>&gt;</returns>
        public async Task<IListAssetV2ApiResponse> ListAssetV2Async(string entityId, AutomationSellAssetRequestInputV2 automationSellAssetRequestInputV2, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListAssetV2(entityId, automationSellAssetRequestInputV2);

                FormatListAssetV2(ref entityId, automationSellAssetRequestInputV2);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/profiles/{entityId}/listing";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationSellAssetRequestInputV2 as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationSellAssetRequestInputV2, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListAssetV2ApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListAssetV2ApiResponse>();

                        ListAssetV2ApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/profiles/{entityId}/listing", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListAssetV2DefaultImplementation(apiResponseLocalVar, entityId, automationSellAssetRequestInputV2);

                        Events.ExecuteOnListAssetV2(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListAssetV2DefaultImplementation(e, "/v2/marketplace/profiles/{entityId}/listing", uriBuilderLocalVar.Path, entityId, automationSellAssetRequestInputV2);
                Events.ExecuteOnErrorListAssetV2(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListAssetV2ApiResponse"/>
        /// </summary>
        public partial class ListAssetV2ApiResponse : BeamAutomationClient.Client.ApiResponse, IListAssetV2ApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListAssetV2ApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListAssetV2ApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListAssetV2ApiResponse(ILogger<ListAssetV2ApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationSellAssetResponseV2 Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationSellAssetResponseV2>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationSellAssetResponseV2 result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRefreshContract(AutomationRefreshContractRequestBody automationRefreshContractRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="automationRefreshContractRequestBody"></param>
        /// <returns></returns>
        private void ValidateRefreshContract(AutomationRefreshContractRequestBody automationRefreshContractRequestBody)
        {
            if (automationRefreshContractRequestBody == null)
                throw new ArgumentNullException(nameof(automationRefreshContractRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="automationRefreshContractRequestBody"></param>
        private void AfterRefreshContractDefaultImplementation(IRefreshContractApiResponse apiResponseLocalVar, AutomationRefreshContractRequestBody automationRefreshContractRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterRefreshContract(ref suppressDefaultLog, apiResponseLocalVar, automationRefreshContractRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="automationRefreshContractRequestBody"></param>
        partial void AfterRefreshContract(ref bool suppressDefaultLog, IRefreshContractApiResponse apiResponseLocalVar, AutomationRefreshContractRequestBody automationRefreshContractRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="automationRefreshContractRequestBody"></param>
        private void OnErrorRefreshContractDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AutomationRefreshContractRequestBody automationRefreshContractRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRefreshContract(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, automationRefreshContractRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="automationRefreshContractRequestBody"></param>
        partial void OnErrorRefreshContract(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AutomationRefreshContractRequestBody automationRefreshContractRequestBody);

        /// <summary>
        /// Schedule a contract refresh in the indexer 
        /// </summary>
        /// <param name="automationRefreshContractRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRefreshContractApiResponse"/>&gt;</returns>
        public async Task<IRefreshContractApiResponse> RefreshContractOrDefaultAsync(AutomationRefreshContractRequestBody automationRefreshContractRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RefreshContractAsync(automationRefreshContractRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Schedule a contract refresh in the indexer 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationRefreshContractRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRefreshContractApiResponse"/>&gt;</returns>
        public async Task<IRefreshContractApiResponse> RefreshContractAsync(AutomationRefreshContractRequestBody automationRefreshContractRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRefreshContract(automationRefreshContractRequestBody);

                FormatRefreshContract(automationRefreshContractRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/refresh/contract";

                    httpRequestMessageLocalVar.Content = (automationRefreshContractRequestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationRefreshContractRequestBody, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RefreshContractApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RefreshContractApiResponse>();

                        RefreshContractApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/refresh/contract", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRefreshContractDefaultImplementation(apiResponseLocalVar, automationRefreshContractRequestBody);

                        Events.ExecuteOnRefreshContract(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRefreshContractDefaultImplementation(e, "/v2/marketplace/refresh/contract", uriBuilderLocalVar.Path, automationRefreshContractRequestBody);
                Events.ExecuteOnErrorRefreshContract(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RefreshContractApiResponse"/>
        /// </summary>
        public partial class RefreshContractApiResponse : BeamAutomationClient.Client.ApiResponse, IRefreshContractApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RefreshContractApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RefreshContractApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RefreshContractApiResponse(ILogger<RefreshContractApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRefreshToken(AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="automationRefreshTokenRequestBody"></param>
        /// <returns></returns>
        private void ValidateRefreshToken(AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody)
        {
            if (automationRefreshTokenRequestBody == null)
                throw new ArgumentNullException(nameof(automationRefreshTokenRequestBody));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="automationRefreshTokenRequestBody"></param>
        private void AfterRefreshTokenDefaultImplementation(IRefreshTokenApiResponse apiResponseLocalVar, AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody)
        {
            bool suppressDefaultLog = false;
            AfterRefreshToken(ref suppressDefaultLog, apiResponseLocalVar, automationRefreshTokenRequestBody);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="automationRefreshTokenRequestBody"></param>
        partial void AfterRefreshToken(ref bool suppressDefaultLog, IRefreshTokenApiResponse apiResponseLocalVar, AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="automationRefreshTokenRequestBody"></param>
        private void OnErrorRefreshTokenDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorRefreshToken(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, automationRefreshTokenRequestBody);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="automationRefreshTokenRequestBody"></param>
        partial void OnErrorRefreshToken(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody);

        /// <summary>
        /// Schedule a token refresh in the indexer 
        /// </summary>
        /// <param name="automationRefreshTokenRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRefreshTokenApiResponse"/>&gt;</returns>
        public async Task<IRefreshTokenApiResponse> RefreshTokenOrDefaultAsync(AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RefreshTokenAsync(automationRefreshTokenRequestBody, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Schedule a token refresh in the indexer 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="automationRefreshTokenRequestBody"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRefreshTokenApiResponse"/>&gt;</returns>
        public async Task<IRefreshTokenApiResponse> RefreshTokenAsync(AutomationRefreshTokenRequestBody automationRefreshTokenRequestBody, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRefreshToken(automationRefreshTokenRequestBody);

                FormatRefreshToken(automationRefreshTokenRequestBody);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v2/marketplace/refresh/token";

                    httpRequestMessageLocalVar.Content = (automationRefreshTokenRequestBody as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationRefreshTokenRequestBody, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RefreshTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RefreshTokenApiResponse>();

                        RefreshTokenApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/marketplace/refresh/token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRefreshTokenDefaultImplementation(apiResponseLocalVar, automationRefreshTokenRequestBody);

                        Events.ExecuteOnRefreshToken(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRefreshTokenDefaultImplementation(e, "/v2/marketplace/refresh/token", uriBuilderLocalVar.Path, automationRefreshTokenRequestBody);
                Events.ExecuteOnErrorRefreshToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RefreshTokenApiResponse"/>
        /// </summary>
        public partial class RefreshTokenApiResponse : BeamAutomationClient.Client.ApiResponse, IRefreshTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RefreshTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RefreshTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RefreshTokenApiResponse(ILogger<RefreshTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
