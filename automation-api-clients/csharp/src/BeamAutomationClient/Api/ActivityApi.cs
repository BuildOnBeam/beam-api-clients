// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using BeamAutomationClient.Client;
using BeamAutomationClient.Model;
using System.Diagnostics.CodeAnalysis;

namespace BeamAutomationClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAutomationActivityApi : IAutomationApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AutomationActivityApiEvents Events { get; }

        /// <summary>
        /// Get asset activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="automationCommonAssetActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetActivityApiResponse"/>&gt;</returns>
        Task<IGetAssetActivityApiResponse> GetAssetActivityAsync(string assetAddress, string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get asset activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="automationCommonAssetActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetActivityApiResponse"/>&gt;</returns>
        Task<IGetAssetActivityApiResponse> GetAssetActivityOrDefaultAsync(string assetAddress, string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get contract activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="automationCommonContractActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractActivityApiResponse"/>&gt;</returns>
        Task<IGetContractActivityApiResponse> GetContractActivityAsync(string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get contract activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetAddress"></param>
        /// <param name="automationCommonContractActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractActivityApiResponse"/>&gt;</returns>
        Task<IGetContractActivityApiResponse> GetContractActivityOrDefaultAsync(string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get profile activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationCommonUserActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileActivityApiResponse"/>&gt;</returns>
        Task<IGetProfileActivityApiResponse> GetProfileActivityAsync(string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get profile activity
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="automationCommonUserActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileActivityApiResponse"/>&gt;</returns>
        Task<IGetProfileActivityApiResponse> GetProfileActivityOrDefaultAsync(string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAssetActivityApiResponse"/>
    /// </summary>
    public interface IGetAssetActivityApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationCommonActivityResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetContractActivityApiResponse"/>
    /// </summary>
    public interface IGetContractActivityApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationCommonActivityResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileActivityApiResponse"/>
    /// </summary>
    public interface IGetProfileActivityApiResponse : BeamAutomationClient.Client.IApiResponse, IOk<BeamAutomationClient.Model.AutomationCommonActivityResponse>, IHttpStatusCode4XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>, IHttpStatusCode5XX<BeamAutomationClient.Model.AutomationBeamErrorResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 4XX HttpStatusCode4XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode4XX { get; }

        /// <summary>
        /// Returns true if the response is 5XX HttpStatusCode5XX
        /// </summary>
        /// <returns></returns>
        bool IsHttpStatusCode5XX { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AutomationActivityApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAssetActivity;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAssetActivity;

        internal void ExecuteOnGetAssetActivity(AutomationActivityApi.GetAssetActivityApiResponse apiResponse)
        {
            OnGetAssetActivity?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetActivity(Exception exception)
        {
            OnErrorGetAssetActivity?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetContractActivity;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetContractActivity;

        internal void ExecuteOnGetContractActivity(AutomationActivityApi.GetContractActivityApiResponse apiResponse)
        {
            OnGetContractActivity?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContractActivity(Exception exception)
        {
            OnErrorGetContractActivity?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfileActivity;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfileActivity;

        internal void ExecuteOnGetProfileActivity(AutomationActivityApi.GetProfileActivityApiResponse apiResponse)
        {
            OnGetProfileActivity?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileActivity(Exception exception)
        {
            OnErrorGetProfileActivity?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AutomationActivityApi : IAutomationActivityApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AutomationActivityApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AutomationActivityApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<AutomationApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationActivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AutomationActivityApi(ILogger<AutomationActivityApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, AutomationJsonSerializerOptionsProvider jsonSerializerOptionsProvider, AutomationActivityApiEvents automationActivityApiEvents,
            TokenProvider<AutomationApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AutomationActivityApi>();
            HttpClient = httpClient;
            Events = automationActivityApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetAssetActivity(ref string assetAddress, ref string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="automationCommonAssetActivityRequestInput"></param>
        /// <returns></returns>
        private void ValidateGetAssetActivity(string assetAddress, string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));

            if (automationCommonAssetActivityRequestInput == null)
                throw new ArgumentNullException(nameof(automationCommonAssetActivityRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="automationCommonAssetActivityRequestInput"></param>
        private void AfterGetAssetActivityDefaultImplementation(IGetAssetActivityApiResponse apiResponseLocalVar, string assetAddress, string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetActivity(ref suppressDefaultLog, apiResponseLocalVar, assetAddress, assetId, automationCommonAssetActivityRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="automationCommonAssetActivityRequestInput"></param>
        partial void AfterGetAssetActivity(ref bool suppressDefaultLog, IGetAssetActivityApiResponse apiResponseLocalVar, string assetAddress, string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="automationCommonAssetActivityRequestInput"></param>
        private void OnErrorGetAssetActivityDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAssetActivity(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetAddress, assetId, automationCommonAssetActivityRequestInput);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="automationCommonAssetActivityRequestInput"></param>
        partial void OnErrorGetAssetActivity(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput);

        /// <summary>
        /// Get asset activity 
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="automationCommonAssetActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetActivityApiResponse"/>&gt;</returns>
        public async Task<IGetAssetActivityApiResponse> GetAssetActivityOrDefaultAsync(string assetAddress, string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetActivityAsync(assetAddress, assetId, automationCommonAssetActivityRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get asset activity 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="automationCommonAssetActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetActivityApiResponse"/>&gt;</returns>
        public async Task<IGetAssetActivityApiResponse> GetAssetActivityAsync(string assetAddress, string assetId, AutomationCommonAssetActivityRequestInput automationCommonAssetActivityRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetActivity(assetAddress, assetId, automationCommonAssetActivityRequestInput);

                FormatGetAssetActivity(ref assetAddress, ref assetId, automationCommonAssetActivityRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/automation/activity/assets/{assetAddress}/asset/{assetId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetId%7D", Uri.EscapeDataString(assetId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationCommonAssetActivityRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationCommonAssetActivityRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetActivityApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetActivityApiResponse>();

                        GetAssetActivityApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/automation/activity/assets/{assetAddress}/asset/{assetId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetActivityDefaultImplementation(apiResponseLocalVar, assetAddress, assetId, automationCommonAssetActivityRequestInput);

                        Events.ExecuteOnGetAssetActivity(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetActivityDefaultImplementation(e, "/v1/automation/activity/assets/{assetAddress}/asset/{assetId}", uriBuilderLocalVar.Path, assetAddress, assetId, automationCommonAssetActivityRequestInput);
                Events.ExecuteOnErrorGetAssetActivity(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetActivityApiResponse"/>
        /// </summary>
        public partial class GetAssetActivityApiResponse : BeamAutomationClient.Client.ApiResponse, IGetAssetActivityApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetActivityApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetActivityApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetActivityApiResponse(ILogger<GetAssetActivityApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationCommonActivityResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationCommonActivityResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationCommonActivityResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContractActivity(ref string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="automationCommonContractActivityRequestInput"></param>
        /// <returns></returns>
        private void ValidateGetContractActivity(string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (automationCommonContractActivityRequestInput == null)
                throw new ArgumentNullException(nameof(automationCommonContractActivityRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="automationCommonContractActivityRequestInput"></param>
        private void AfterGetContractActivityDefaultImplementation(IGetContractActivityApiResponse apiResponseLocalVar, string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterGetContractActivity(ref suppressDefaultLog, apiResponseLocalVar, assetAddress, automationCommonContractActivityRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="automationCommonContractActivityRequestInput"></param>
        partial void AfterGetContractActivity(ref bool suppressDefaultLog, IGetContractActivityApiResponse apiResponseLocalVar, string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="automationCommonContractActivityRequestInput"></param>
        private void OnErrorGetContractActivityDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetContractActivity(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, assetAddress, automationCommonContractActivityRequestInput);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="automationCommonContractActivityRequestInput"></param>
        partial void OnErrorGetContractActivity(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput);

        /// <summary>
        /// Get contract activity 
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="automationCommonContractActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractActivityApiResponse"/>&gt;</returns>
        public async Task<IGetContractActivityApiResponse> GetContractActivityOrDefaultAsync(string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContractActivityAsync(assetAddress, automationCommonContractActivityRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get contract activity 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="automationCommonContractActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractActivityApiResponse"/>&gt;</returns>
        public async Task<IGetContractActivityApiResponse> GetContractActivityAsync(string assetAddress, AutomationCommonContractActivityRequestInput automationCommonContractActivityRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContractActivity(assetAddress, automationCommonContractActivityRequestInput);

                FormatGetContractActivity(ref assetAddress, automationCommonContractActivityRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/automation/activity/assets/{assetAddress}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));

                    httpRequestMessageLocalVar.Content = (automationCommonContractActivityRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationCommonContractActivityRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContractActivityApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContractActivityApiResponse>();

                        GetContractActivityApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/automation/activity/assets/{assetAddress}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContractActivityDefaultImplementation(apiResponseLocalVar, assetAddress, automationCommonContractActivityRequestInput);

                        Events.ExecuteOnGetContractActivity(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContractActivityDefaultImplementation(e, "/v1/automation/activity/assets/{assetAddress}", uriBuilderLocalVar.Path, assetAddress, automationCommonContractActivityRequestInput);
                Events.ExecuteOnErrorGetContractActivity(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContractActivityApiResponse"/>
        /// </summary>
        public partial class GetContractActivityApiResponse : BeamAutomationClient.Client.ApiResponse, IGetContractActivityApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContractActivityApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContractActivityApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContractActivityApiResponse(ILogger<GetContractActivityApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationCommonActivityResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationCommonActivityResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationCommonActivityResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileActivity(ref string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationCommonUserActivityRequestInput"></param>
        /// <returns></returns>
        private void ValidateGetProfileActivity(string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (automationCommonUserActivityRequestInput == null)
                throw new ArgumentNullException(nameof(automationCommonUserActivityRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationCommonUserActivityRequestInput"></param>
        private void AfterGetProfileActivityDefaultImplementation(IGetProfileActivityApiResponse apiResponseLocalVar, string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileActivity(ref suppressDefaultLog, apiResponseLocalVar, entityId, automationCommonUserActivityRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationCommonUserActivityRequestInput"></param>
        partial void AfterGetProfileActivity(ref bool suppressDefaultLog, IGetProfileActivityApiResponse apiResponseLocalVar, string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationCommonUserActivityRequestInput"></param>
        private void OnErrorGetProfileActivityDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetProfileActivity(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, entityId, automationCommonUserActivityRequestInput);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="automationCommonUserActivityRequestInput"></param>
        partial void OnErrorGetProfileActivity(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput);

        /// <summary>
        /// Get profile activity 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="automationCommonUserActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileActivityApiResponse"/>&gt;</returns>
        public async Task<IGetProfileActivityApiResponse> GetProfileActivityOrDefaultAsync(string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileActivityAsync(entityId, automationCommonUserActivityRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get profile activity 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="automationCommonUserActivityRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileActivityApiResponse"/>&gt;</returns>
        public async Task<IGetProfileActivityApiResponse> GetProfileActivityAsync(string entityId, AutomationCommonUserActivityRequestInput automationCommonUserActivityRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileActivity(entityId, automationCommonUserActivityRequestInput);

                FormatGetProfileActivity(ref entityId, automationCommonUserActivityRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/automation/activity/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (automationCommonUserActivityRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(automationCommonUserActivityRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    AutomationApiKeyToken apiKeyTokenLocalVar1 = (AutomationApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileActivityApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileActivityApiResponse>();

                        GetProfileActivityApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/automation/activity/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileActivityDefaultImplementation(apiResponseLocalVar, entityId, automationCommonUserActivityRequestInput);

                        Events.ExecuteOnGetProfileActivity(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileActivityDefaultImplementation(e, "/v1/automation/activity/profiles/{entityId}", uriBuilderLocalVar.Path, entityId, automationCommonUserActivityRequestInput);
                Events.ExecuteOnErrorGetProfileActivity(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileActivityApiResponse"/>
        /// </summary>
        public partial class GetProfileActivityApiResponse : BeamAutomationClient.Client.ApiResponse, IGetProfileActivityApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileActivityApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileActivityApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileActivityApiResponse(ILogger<GetProfileActivityApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationCommonActivityResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationCommonActivityResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationCommonActivityResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode4XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 400 >= statusCode && 499 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 4XX HttpStatusCode4XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode4XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode4XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 4XX HttpStatusCode4XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode4XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode4XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)4);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public bool IsHttpStatusCode5XX
            {
                get
                {
                    int statusCode = (int)StatusCode;
                    return 500 >= statusCode && 599 <= statusCode;
                }
            }

            /// <summary>
            /// Deserializes the response if the response is 5XX HttpStatusCode5XX
            /// </summary>
            /// <returns></returns>
            public BeamAutomationClient.Model.AutomationBeamErrorResponse HttpStatusCode5XX()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsHttpStatusCode5XX
                    ? System.Text.Json.JsonSerializer.Deserialize<BeamAutomationClient.Model.AutomationBeamErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 5XX HttpStatusCode5XX and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryHttpStatusCode5XX([NotNullWhen(true)]out BeamAutomationClient.Model.AutomationBeamErrorResponse result)
            {
                result = null;

                try
                {
                    result = HttpStatusCode5XX();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)5);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
