// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// TradeTokensRequestInputInitiatorTokensInner
    /// </summary>
    public partial class TradeTokensRequestInputInitiatorTokensInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradeTokensRequestInputInitiatorTokensInner" /> class.
        /// </summary>
        /// <param name="amount">amount</param>
        /// <param name="assetAddress">assetAddress</param>
        /// <param name="tokenId">tokenId</param>
        [JsonConstructor]
        public TradeTokensRequestInputInitiatorTokensInner(string amount, string assetAddress, Option<string?> tokenId = default)
        {
            Amount = amount;
            AssetAddress = assetAddress;
            TokenIdOption = tokenId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets AssetAddress
        /// </summary>
        [JsonPropertyName("assetAddress")]
        public string AssetAddress { get; set; }

        /// <summary>
        /// Used to track the state of TokenId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TokenIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [JsonPropertyName("tokenId")]
        public string? TokenId { get { return this. TokenIdOption; } set { this.TokenIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradeTokensRequestInputInitiatorTokensInner {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AssetAddress: ").Append(AssetAddress).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TradeTokensRequestInputInitiatorTokensInner" />
    /// </summary>
    public class TradeTokensRequestInputInitiatorTokensInnerJsonConverter : JsonConverter<TradeTokensRequestInputInitiatorTokensInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="TradeTokensRequestInputInitiatorTokensInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TradeTokensRequestInputInitiatorTokensInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> amount = default;
            Option<string?> assetAddress = default;
            Option<string?> tokenId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amount":
                            amount = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assetAddress":
                            assetAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tokenId":
                            tokenId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class TradeTokensRequestInputInitiatorTokensInner.", nameof(amount));

            if (!assetAddress.IsSet)
                throw new ArgumentException("Property is required for class TradeTokensRequestInputInitiatorTokensInner.", nameof(assetAddress));

            if (amount.IsSet && amount.Value == null)
                throw new ArgumentNullException(nameof(amount), "Property is not nullable for class TradeTokensRequestInputInitiatorTokensInner.");

            if (assetAddress.IsSet && assetAddress.Value == null)
                throw new ArgumentNullException(nameof(assetAddress), "Property is not nullable for class TradeTokensRequestInputInitiatorTokensInner.");

            if (tokenId.IsSet && tokenId.Value == null)
                throw new ArgumentNullException(nameof(tokenId), "Property is not nullable for class TradeTokensRequestInputInitiatorTokensInner.");

            return new TradeTokensRequestInputInitiatorTokensInner(amount.Value!, assetAddress.Value!, tokenId);
        }

        /// <summary>
        /// Serializes a <see cref="TradeTokensRequestInputInitiatorTokensInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tradeTokensRequestInputInitiatorTokensInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TradeTokensRequestInputInitiatorTokensInner tradeTokensRequestInputInitiatorTokensInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, tradeTokensRequestInputInitiatorTokensInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TradeTokensRequestInputInitiatorTokensInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tradeTokensRequestInputInitiatorTokensInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TradeTokensRequestInputInitiatorTokensInner tradeTokensRequestInputInitiatorTokensInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tradeTokensRequestInputInitiatorTokensInner.Amount == null)
                throw new ArgumentNullException(nameof(tradeTokensRequestInputInitiatorTokensInner.Amount), "Property is required for class TradeTokensRequestInputInitiatorTokensInner.");

            if (tradeTokensRequestInputInitiatorTokensInner.AssetAddress == null)
                throw new ArgumentNullException(nameof(tradeTokensRequestInputInitiatorTokensInner.AssetAddress), "Property is required for class TradeTokensRequestInputInitiatorTokensInner.");

            if (tradeTokensRequestInputInitiatorTokensInner.TokenIdOption.IsSet && tradeTokensRequestInputInitiatorTokensInner.TokenId == null)
                throw new ArgumentNullException(nameof(tradeTokensRequestInputInitiatorTokensInner.TokenId), "Property is required for class TradeTokensRequestInputInitiatorTokensInner.");

            writer.WriteString("amount", tradeTokensRequestInputInitiatorTokensInner.Amount);

            writer.WriteString("assetAddress", tradeTokensRequestInputInitiatorTokensInner.AssetAddress);

            if (tradeTokensRequestInputInitiatorTokensInner.TokenIdOption.IsSet)
                writer.WriteString("tokenId", tradeTokensRequestInputInitiatorTokensInner.TokenId);
        }
    }
}