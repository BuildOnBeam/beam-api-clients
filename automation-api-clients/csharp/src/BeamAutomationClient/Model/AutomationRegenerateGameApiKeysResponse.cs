// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationRegenerateGameApiKeysResponse
    /// </summary>
    public partial class AutomationRegenerateGameApiKeysResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationRegenerateGameApiKeysResponse" /> class.
        /// </summary>
        /// <param name="pegiContent">pegiContent</param>
        /// <param name="id">id</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="name">name</param>
        /// <param name="chainIds">chainIds</param>
        /// <param name="apiKeys">apiKeys</param>
        /// <param name="pegiRating">pegiRating</param>
        /// <param name="description">description</param>
        /// <param name="coverImageUrl">coverImageUrl</param>
        /// <param name="logoImageUrl">logoImageUrl</param>
        /// <param name="backgroundImageUrl">backgroundImageUrl</param>
        /// <param name="androidCallbackDeepLink">androidCallbackDeepLink</param>
        /// <param name="connectionsWebhookUrl">connectionsWebhookUrl</param>
        [JsonConstructor]
        public AutomationRegenerateGameApiKeysResponse(List<AutomationRegenerateGameApiKeysResponse.PegiContentEnum> pegiContent, string id, DateTime createdAt, DateTime updatedAt, string name, List<int> chainIds, List<AutomationRegenerateGameApiKeysResponseApiKeysInner> apiKeys, PegiRatingEnum? pegiRating = default, string description = default, string coverImageUrl = default, string logoImageUrl = default, string backgroundImageUrl = default, string androidCallbackDeepLink = default, string connectionsWebhookUrl = default)
        {
            PegiContent = pegiContent;
            Id = id;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Name = name;
            ChainIds = chainIds;
            ApiKeys = apiKeys;
            PegiRating = pegiRating;
            Description = description;
            CoverImageUrl = coverImageUrl;
            LogoImageUrl = logoImageUrl;
            BackgroundImageUrl = backgroundImageUrl;
            AndroidCallbackDeepLink = androidCallbackDeepLink;
            ConnectionsWebhookUrl = connectionsWebhookUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines PegiContent
        /// </summary>
        [JsonConverter(typeof(PegiContentEnumJsonConverter))]
        public enum PegiContentEnum
        {
            /// <summary>
            /// Enum BadLanguage for value: BadLanguage
            /// </summary>
            BadLanguage = 1,

            /// <summary>
            /// Enum Discrimination for value: Discrimination
            /// </summary>
            Discrimination = 2,

            /// <summary>
            /// Enum Drugs for value: Drugs
            /// </summary>
            Drugs = 3,

            /// <summary>
            /// Enum Fear for value: Fear
            /// </summary>
            Fear = 4,

            /// <summary>
            /// Enum Gambling for value: Gambling
            /// </summary>
            Gambling = 5,

            /// <summary>
            /// Enum Sex for value: Sex
            /// </summary>
            Sex = 6,

            /// <summary>
            /// Enum Violence for value: Violence
            /// </summary>
            Violence = 7,

            /// <summary>
            /// Enum InGamePurchases for value: InGamePurchases
            /// </summary>
            InGamePurchases = 8
        }

        /// <summary>
        /// Returns a <see cref="PegiContentEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PegiContentEnum PegiContentEnumFromString(string value)
        {
            if (value.Equals("BadLanguage"))
                return PegiContentEnum.BadLanguage;

            if (value.Equals("Discrimination"))
                return PegiContentEnum.Discrimination;

            if (value.Equals("Drugs"))
                return PegiContentEnum.Drugs;

            if (value.Equals("Fear"))
                return PegiContentEnum.Fear;

            if (value.Equals("Gambling"))
                return PegiContentEnum.Gambling;

            if (value.Equals("Sex"))
                return PegiContentEnum.Sex;

            if (value.Equals("Violence"))
                return PegiContentEnum.Violence;

            if (value.Equals("InGamePurchases"))
                return PegiContentEnum.InGamePurchases;

            throw new NotImplementedException($"Could not convert value to type PegiContentEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PegiContentEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PegiContentEnum? PegiContentEnumFromStringOrDefault(string value)
        {
            if (value.Equals("BadLanguage"))
                return PegiContentEnum.BadLanguage;

            if (value.Equals("Discrimination"))
                return PegiContentEnum.Discrimination;

            if (value.Equals("Drugs"))
                return PegiContentEnum.Drugs;

            if (value.Equals("Fear"))
                return PegiContentEnum.Fear;

            if (value.Equals("Gambling"))
                return PegiContentEnum.Gambling;

            if (value.Equals("Sex"))
                return PegiContentEnum.Sex;

            if (value.Equals("Violence"))
                return PegiContentEnum.Violence;

            if (value.Equals("InGamePurchases"))
                return PegiContentEnum.InGamePurchases;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PegiContentEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PegiContentEnumToJsonValue(PegiContentEnum value)
        {
            if (value == null)
                return null;

            if (value == PegiContentEnum.BadLanguage)
                return "BadLanguage";

            if (value == PegiContentEnum.Discrimination)
                return "Discrimination";

            if (value == PegiContentEnum.Drugs)
                return "Drugs";

            if (value == PegiContentEnum.Fear)
                return "Fear";

            if (value == PegiContentEnum.Gambling)
                return "Gambling";

            if (value == PegiContentEnum.Sex)
                return "Sex";

            if (value == PegiContentEnum.Violence)
                return "Violence";

            if (value == PegiContentEnum.InGamePurchases)
                return "InGamePurchases";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="PegiContentEnum"/> to and from the JSON value
        /// </summary>
        public static class PegiContentEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="PegiContentEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static PegiContentEnum FromString(string value)
            {
                    if (value.Equals("BadLanguage"))
                    return PegiContentEnum.BadLanguage;

                    if (value.Equals("Discrimination"))
                    return PegiContentEnum.Discrimination;

                    if (value.Equals("Drugs"))
                    return PegiContentEnum.Drugs;

                    if (value.Equals("Fear"))
                    return PegiContentEnum.Fear;

                    if (value.Equals("Gambling"))
                    return PegiContentEnum.Gambling;

                    if (value.Equals("Sex"))
                    return PegiContentEnum.Sex;

                    if (value.Equals("Violence"))
                    return PegiContentEnum.Violence;

                    if (value.Equals("InGamePurchases"))
                    return PegiContentEnum.InGamePurchases;

            throw new NotImplementedException($"Could not convert value to type PegiContentEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="PegiContentEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static PegiContentEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("BadLanguage"))
                    return PegiContentEnum.BadLanguage;

                    if (value.Equals("Discrimination"))
                    return PegiContentEnum.Discrimination;

                    if (value.Equals("Drugs"))
                    return PegiContentEnum.Drugs;

                    if (value.Equals("Fear"))
                    return PegiContentEnum.Fear;

                    if (value.Equals("Gambling"))
                    return PegiContentEnum.Gambling;

                    if (value.Equals("Sex"))
                    return PegiContentEnum.Sex;

                    if (value.Equals("Violence"))
                    return PegiContentEnum.Violence;

                    if (value.Equals("InGamePurchases"))
                    return PegiContentEnum.InGamePurchases;

            return null;
            }

            /// <summary>
            /// Converts the <see cref="PegiContentEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(PegiContentEnum value)
            {
                        if (value == PegiContentEnum.BadLanguage)
                        return "BadLanguage";

                        if (value == PegiContentEnum.Discrimination)
                        return "Discrimination";

                        if (value == PegiContentEnum.Drugs)
                        return "Drugs";

                        if (value == PegiContentEnum.Fear)
                        return "Fear";

                        if (value == PegiContentEnum.Gambling)
                        return "Gambling";

                        if (value == PegiContentEnum.Sex)
                        return "Sex";

                        if (value == PegiContentEnum.Violence)
                        return "Violence";

                        if (value == PegiContentEnum.InGamePurchases)
                        return "InGamePurchases";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="PegiContentEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class PegiContentEnumJsonConverter : JsonConverter<PegiContentEnum>
        {
            /// <summary>
            /// Returns a PegiContentEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override PegiContentEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string rawValue = reader.GetString();

                PegiContentEnum? result = rawValue == null
                ? null
                : PegiContentEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the PegiContentEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="pegiContentEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, PegiContentEnum pegiContentEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(PegiContentEnumValueConverter.ToJsonValue(pegiContentEnum));
            }
        }

        /// <summary>
        /// Defines PegiRating
        /// </summary>
        [JsonConverter(typeof(PegiRatingEnumJsonConverter))]
        public enum PegiRatingEnum
        {
            /// <summary>
            /// Enum Three for value: Three
            /// </summary>
            Three = 1,

            /// <summary>
            /// Enum Seven for value: Seven
            /// </summary>
            Seven = 2,

            /// <summary>
            /// Enum Twelve for value: Twelve
            /// </summary>
            Twelve = 3,

            /// <summary>
            /// Enum Sixteen for value: Sixteen
            /// </summary>
            Sixteen = 4,

            /// <summary>
            /// Enum Eighteen for value: Eighteen
            /// </summary>
            Eighteen = 5
        }

        /// <summary>
        /// Returns a <see cref="PegiRatingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static PegiRatingEnum PegiRatingEnumFromString(string value)
        {
            if (value.Equals("Three"))
                return PegiRatingEnum.Three;

            if (value.Equals("Seven"))
                return PegiRatingEnum.Seven;

            if (value.Equals("Twelve"))
                return PegiRatingEnum.Twelve;

            if (value.Equals("Sixteen"))
                return PegiRatingEnum.Sixteen;

            if (value.Equals("Eighteen"))
                return PegiRatingEnum.Eighteen;

            throw new NotImplementedException($"Could not convert value to type PegiRatingEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="PegiRatingEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static PegiRatingEnum? PegiRatingEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Three"))
                return PegiRatingEnum.Three;

            if (value.Equals("Seven"))
                return PegiRatingEnum.Seven;

            if (value.Equals("Twelve"))
                return PegiRatingEnum.Twelve;

            if (value.Equals("Sixteen"))
                return PegiRatingEnum.Sixteen;

            if (value.Equals("Eighteen"))
                return PegiRatingEnum.Eighteen;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="PegiRatingEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string PegiRatingEnumToJsonValue(PegiRatingEnum? value)
        {
            if (value == null)
                return null;

            if (value == PegiRatingEnum.Three)
                return "Three";

            if (value == PegiRatingEnum.Seven)
                return "Seven";

            if (value == PegiRatingEnum.Twelve)
                return "Twelve";

            if (value == PegiRatingEnum.Sixteen)
                return "Sixteen";

            if (value == PegiRatingEnum.Eighteen)
                return "Eighteen";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="PegiRatingEnum"/> to and from the JSON value
        /// </summary>
        public static class PegiRatingEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="PegiRatingEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static PegiRatingEnum FromString(string value)
            {
                    if (value.Equals("Three"))
                    return PegiRatingEnum.Three;

                    if (value.Equals("Seven"))
                    return PegiRatingEnum.Seven;

                    if (value.Equals("Twelve"))
                    return PegiRatingEnum.Twelve;

                    if (value.Equals("Sixteen"))
                    return PegiRatingEnum.Sixteen;

                    if (value.Equals("Eighteen"))
                    return PegiRatingEnum.Eighteen;

            throw new NotImplementedException($"Could not convert value to type PegiRatingEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="PegiRatingEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static PegiRatingEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("Three"))
                    return PegiRatingEnum.Three;

                    if (value.Equals("Seven"))
                    return PegiRatingEnum.Seven;

                    if (value.Equals("Twelve"))
                    return PegiRatingEnum.Twelve;

                    if (value.Equals("Sixteen"))
                    return PegiRatingEnum.Sixteen;

                    if (value.Equals("Eighteen"))
                    return PegiRatingEnum.Eighteen;

            return null;
            }

            /// <summary>
            /// Converts the <see cref="PegiRatingEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(PegiRatingEnum value)
            {
                        if (value == PegiRatingEnum.Three)
                        return "Three";

                        if (value == PegiRatingEnum.Seven)
                        return "Seven";

                        if (value == PegiRatingEnum.Twelve)
                        return "Twelve";

                        if (value == PegiRatingEnum.Sixteen)
                        return "Sixteen";

                        if (value == PegiRatingEnum.Eighteen)
                        return "Eighteen";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="PegiRatingEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class PegiRatingEnumJsonConverter : JsonConverter<PegiRatingEnum>
        {
            /// <summary>
            /// Returns a PegiRatingEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override PegiRatingEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string rawValue = reader.GetString();

                PegiRatingEnum? result = rawValue == null
                ? null
                : PegiRatingEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the PegiRatingEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="pegiRatingEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, PegiRatingEnum pegiRatingEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(PegiRatingEnumValueConverter.ToJsonValue(pegiRatingEnum));
            }
        }

        /// <summary>
        /// Gets or Sets PegiRating
        /// </summary>
        [JsonPropertyName("pegiRating")]
        public PegiRatingEnum? PegiRating { get; set; }

        /// <summary>
        /// Gets or Sets PegiContent
        /// </summary>
        [JsonPropertyName("pegiContent")]
        public List<AutomationRegenerateGameApiKeysResponse.PegiContentEnum> PegiContent { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ChainIds
        /// </summary>
        [JsonPropertyName("chainIds")]
        public List<int> ChainIds { get; set; }

        /// <summary>
        /// Gets or Sets ApiKeys
        /// </summary>
        [JsonPropertyName("apiKeys")]
        public List<AutomationRegenerateGameApiKeysResponseApiKeysInner> ApiKeys { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets CoverImageUrl
        /// </summary>
        [JsonPropertyName("coverImageUrl")]
        public string CoverImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets LogoImageUrl
        /// </summary>
        [JsonPropertyName("logoImageUrl")]
        public string LogoImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundImageUrl
        /// </summary>
        [JsonPropertyName("backgroundImageUrl")]
        public string BackgroundImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets AndroidCallbackDeepLink
        /// </summary>
        [JsonPropertyName("androidCallbackDeepLink")]
        public string AndroidCallbackDeepLink { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionsWebhookUrl
        /// </summary>
        [JsonPropertyName("connectionsWebhookUrl")]
        public string ConnectionsWebhookUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationRegenerateGameApiKeysResponse {\n");
            sb.Append("  PegiContent: ").Append(PegiContent).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ChainIds: ").Append(ChainIds).Append("\n");
            sb.Append("  ApiKeys: ").Append(ApiKeys).Append("\n");
            sb.Append("  PegiRating: ").Append(PegiRating).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  CoverImageUrl: ").Append(CoverImageUrl).Append("\n");
            sb.Append("  LogoImageUrl: ").Append(LogoImageUrl).Append("\n");
            sb.Append("  BackgroundImageUrl: ").Append(BackgroundImageUrl).Append("\n");
            sb.Append("  AndroidCallbackDeepLink: ").Append(AndroidCallbackDeepLink).Append("\n");
            sb.Append("  ConnectionsWebhookUrl: ").Append(ConnectionsWebhookUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationRegenerateGameApiKeysResponse" />
    /// </summary>
    public class AutomationRegenerateGameApiKeysResponseJsonConverter : JsonConverter<AutomationRegenerateGameApiKeysResponse>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AutomationRegenerateGameApiKeysResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationRegenerateGameApiKeysResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<AutomationRegenerateGameApiKeysResponse.PegiContentEnum>> pegiContent = default;
            Option<string> id = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string> name = default;
            Option<List<int>> chainIds = default;
            Option<List<AutomationRegenerateGameApiKeysResponseApiKeysInner>> apiKeys = default;
            Option<AutomationRegenerateGameApiKeysResponse.PegiRatingEnum?> pegiRating = default;
            Option<string> description = default;
            Option<string> coverImageUrl = default;
            Option<string> logoImageUrl = default;
            Option<string> backgroundImageUrl = default;
            Option<string> androidCallbackDeepLink = default;
            Option<string> connectionsWebhookUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "pegiContent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pegiContent = new Option<List<AutomationRegenerateGameApiKeysResponse.PegiContentEnum>>(JsonSerializer.Deserialize<List<AutomationRegenerateGameApiKeysResponse.PegiContentEnum>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chainIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainIds = new Option<List<int>>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "apiKeys":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                apiKeys = new Option<List<AutomationRegenerateGameApiKeysResponseApiKeysInner>>(JsonSerializer.Deserialize<List<AutomationRegenerateGameApiKeysResponseApiKeysInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pegiRating":
                            string pegiRatingRawValue = utf8JsonReader.GetString();
                            if (pegiRatingRawValue != null)
                                pegiRating = new Option<AutomationRegenerateGameApiKeysResponse.PegiRatingEnum?>(AutomationRegenerateGameApiKeysResponse.PegiRatingEnumFromStringOrDefault(pegiRatingRawValue));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "coverImageUrl":
                            coverImageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "logoImageUrl":
                            logoImageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "backgroundImageUrl":
                            backgroundImageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "androidCallbackDeepLink":
                            androidCallbackDeepLink = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "connectionsWebhookUrl":
                            connectionsWebhookUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!pegiContent.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(pegiContent));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(id));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(updatedAt));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(name));

            if (!chainIds.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(chainIds));

            if (!apiKeys.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(apiKeys));

            if (!pegiRating.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(pegiRating));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(description));

            if (!coverImageUrl.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(coverImageUrl));

            if (!logoImageUrl.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(logoImageUrl));

            if (!backgroundImageUrl.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(backgroundImageUrl));

            if (!androidCallbackDeepLink.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(androidCallbackDeepLink));

            if (!connectionsWebhookUrl.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponse.", nameof(connectionsWebhookUrl));

            if (pegiContent.IsSet && pegiContent.Value == null)
                throw new ArgumentNullException(nameof(pegiContent), "Property is not nullable for class AutomationRegenerateGameApiKeysResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AutomationRegenerateGameApiKeysResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AutomationRegenerateGameApiKeysResponse.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AutomationRegenerateGameApiKeysResponse.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AutomationRegenerateGameApiKeysResponse.");

            if (chainIds.IsSet && chainIds.Value == null)
                throw new ArgumentNullException(nameof(chainIds), "Property is not nullable for class AutomationRegenerateGameApiKeysResponse.");

            if (apiKeys.IsSet && apiKeys.Value == null)
                throw new ArgumentNullException(nameof(apiKeys), "Property is not nullable for class AutomationRegenerateGameApiKeysResponse.");

            return new AutomationRegenerateGameApiKeysResponse(pegiContent.Value, id.Value, createdAt.Value.Value, updatedAt.Value.Value, name.Value, chainIds.Value, apiKeys.Value, pegiRating.Value, description.Value, coverImageUrl.Value, logoImageUrl.Value, backgroundImageUrl.Value, androidCallbackDeepLink.Value, connectionsWebhookUrl.Value);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationRegenerateGameApiKeysResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationRegenerateGameApiKeysResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationRegenerateGameApiKeysResponse automationRegenerateGameApiKeysResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automationRegenerateGameApiKeysResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationRegenerateGameApiKeysResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationRegenerateGameApiKeysResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutomationRegenerateGameApiKeysResponse automationRegenerateGameApiKeysResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationRegenerateGameApiKeysResponse.PegiContent == null)
                throw new ArgumentNullException(nameof(automationRegenerateGameApiKeysResponse.PegiContent), "Property is required for class AutomationRegenerateGameApiKeysResponse.");

            if (automationRegenerateGameApiKeysResponse.Id == null)
                throw new ArgumentNullException(nameof(automationRegenerateGameApiKeysResponse.Id), "Property is required for class AutomationRegenerateGameApiKeysResponse.");

            if (automationRegenerateGameApiKeysResponse.Name == null)
                throw new ArgumentNullException(nameof(automationRegenerateGameApiKeysResponse.Name), "Property is required for class AutomationRegenerateGameApiKeysResponse.");

            if (automationRegenerateGameApiKeysResponse.ChainIds == null)
                throw new ArgumentNullException(nameof(automationRegenerateGameApiKeysResponse.ChainIds), "Property is required for class AutomationRegenerateGameApiKeysResponse.");

            if (automationRegenerateGameApiKeysResponse.ApiKeys == null)
                throw new ArgumentNullException(nameof(automationRegenerateGameApiKeysResponse.ApiKeys), "Property is required for class AutomationRegenerateGameApiKeysResponse.");

            writer.WritePropertyName("pegiContent");
            JsonSerializer.Serialize(writer, automationRegenerateGameApiKeysResponse.PegiContent, jsonSerializerOptions);
            writer.WriteString("id", automationRegenerateGameApiKeysResponse.Id);

            writer.WriteString("createdAt", automationRegenerateGameApiKeysResponse.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", automationRegenerateGameApiKeysResponse.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("name", automationRegenerateGameApiKeysResponse.Name);

            writer.WritePropertyName("chainIds");
            JsonSerializer.Serialize(writer, automationRegenerateGameApiKeysResponse.ChainIds, jsonSerializerOptions);
            writer.WritePropertyName("apiKeys");
            JsonSerializer.Serialize(writer, automationRegenerateGameApiKeysResponse.ApiKeys, jsonSerializerOptions);
            var pegiRatingRawValue = AutomationRegenerateGameApiKeysResponse.PegiRatingEnumToJsonValue(automationRegenerateGameApiKeysResponse.PegiRating.Value);
            if (pegiRatingRawValue != null)
                writer.WriteString("pegiRating", pegiRatingRawValue);
            else
                writer.WriteNull("pegiRating");

            if (automationRegenerateGameApiKeysResponse.Description != null)
            {
                writer.WriteString("description", automationRegenerateGameApiKeysResponse.Description);
            }
            else
            {
                writer.WriteNull("description");
            }

            if (automationRegenerateGameApiKeysResponse.CoverImageUrl != null)
            {
                writer.WriteString("coverImageUrl", automationRegenerateGameApiKeysResponse.CoverImageUrl);
            }
            else
            {
                writer.WriteNull("coverImageUrl");
            }

            if (automationRegenerateGameApiKeysResponse.LogoImageUrl != null)
            {
                writer.WriteString("logoImageUrl", automationRegenerateGameApiKeysResponse.LogoImageUrl);
            }
            else
            {
                writer.WriteNull("logoImageUrl");
            }

            if (automationRegenerateGameApiKeysResponse.BackgroundImageUrl != null)
            {
                writer.WriteString("backgroundImageUrl", automationRegenerateGameApiKeysResponse.BackgroundImageUrl);
            }
            else
            {
                writer.WriteNull("backgroundImageUrl");
            }

            if (automationRegenerateGameApiKeysResponse.AndroidCallbackDeepLink != null)
            {
                writer.WriteString("androidCallbackDeepLink", automationRegenerateGameApiKeysResponse.AndroidCallbackDeepLink);
            }
            else
            {
                writer.WriteNull("androidCallbackDeepLink");
            }

            if (automationRegenerateGameApiKeysResponse.ConnectionsWebhookUrl != null)
            {
                writer.WriteString("connectionsWebhookUrl", automationRegenerateGameApiKeysResponse.ConnectionsWebhookUrl);
            }
            else
            {
                writer.WriteNull("connectionsWebhookUrl");
            }
        }
    }
}