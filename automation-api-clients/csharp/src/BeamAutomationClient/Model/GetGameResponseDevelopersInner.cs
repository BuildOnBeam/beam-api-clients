// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// GetGameResponseDevelopersInner
    /// </summary>
    public partial class GetGameResponseDevelopersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGameResponseDevelopersInner" /> class.
        /// </summary>
        /// <param name="developer">developer</param>
        /// <param name="developerId">developerId</param>
        /// <param name="gameId">gameId</param>
        /// <param name="id">id</param>
        /// <param name="role">role</param>
        [JsonConstructor]
        public GetGameResponseDevelopersInner(GetGameResponseDevelopersInnerDeveloper developer, string developerId, string gameId, string id, RoleEnum? role = default)
        {
            Developer = developer;
            DeveloperId = developerId;
            GameId = gameId;
            Id = id;
            Role = role;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Role
        /// </summary>
        public enum RoleEnum
        {
            /// <summary>
            /// Enum Owner for value: Owner
            /// </summary>
            Owner = 1,

            /// <summary>
            /// Enum Admin for value: Admin
            /// </summary>
            Admin = 2,

            /// <summary>
            /// Enum Viewer for value: Viewer
            /// </summary>
            Viewer = 3
        }

        /// <summary>
        /// Returns a <see cref="RoleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RoleEnum RoleEnumFromString(string value)
        {
            if (value.Equals("Owner"))
                return RoleEnum.Owner;

            if (value.Equals("Admin"))
                return RoleEnum.Admin;

            if (value.Equals("Viewer"))
                return RoleEnum.Viewer;

            throw new NotImplementedException($"Could not convert value to type RoleEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RoleEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RoleEnum? RoleEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Owner"))
                return RoleEnum.Owner;

            if (value.Equals("Admin"))
                return RoleEnum.Admin;

            if (value.Equals("Viewer"))
                return RoleEnum.Viewer;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RoleEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? RoleEnumToJsonValue(RoleEnum? value)
        {
            if (value == null)
                return null;

            if (value == RoleEnum.Owner)
                return "Owner";

            if (value == RoleEnum.Admin)
                return "Admin";

            if (value == RoleEnum.Viewer)
                return "Viewer";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public RoleEnum? Role { get; set; }

        /// <summary>
        /// Gets or Sets Developer
        /// </summary>
        [JsonPropertyName("developer")]
        public GetGameResponseDevelopersInnerDeveloper Developer { get; set; }

        /// <summary>
        /// Gets or Sets DeveloperId
        /// </summary>
        [JsonPropertyName("developerId")]
        public string DeveloperId { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [JsonPropertyName("gameId")]
        public string GameId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGameResponseDevelopersInner {\n");
            sb.Append("  Developer: ").Append(Developer).Append("\n");
            sb.Append("  DeveloperId: ").Append(DeveloperId).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetGameResponseDevelopersInner" />
    /// </summary>
    public class GetGameResponseDevelopersInnerJsonConverter : JsonConverter<GetGameResponseDevelopersInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetGameResponseDevelopersInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetGameResponseDevelopersInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetGameResponseDevelopersInnerDeveloper?> developer = default;
            Option<string?> developerId = default;
            Option<string?> gameId = default;
            Option<string?> id = default;
            Option<GetGameResponseDevelopersInner.RoleEnum?> role = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "developer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                developer = new Option<GetGameResponseDevelopersInnerDeveloper?>(JsonSerializer.Deserialize<GetGameResponseDevelopersInnerDeveloper>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "developerId":
                            developerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "gameId":
                            gameId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "role":
                            string? roleRawValue = utf8JsonReader.GetString();
                            if (roleRawValue != null)
                                role = new Option<GetGameResponseDevelopersInner.RoleEnum?>(GetGameResponseDevelopersInner.RoleEnumFromStringOrDefault(roleRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!developer.IsSet)
                throw new ArgumentException("Property is required for class GetGameResponseDevelopersInner.", nameof(developer));

            if (!developerId.IsSet)
                throw new ArgumentException("Property is required for class GetGameResponseDevelopersInner.", nameof(developerId));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class GetGameResponseDevelopersInner.", nameof(gameId));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetGameResponseDevelopersInner.", nameof(id));

            if (!role.IsSet)
                throw new ArgumentException("Property is required for class GetGameResponseDevelopersInner.", nameof(role));

            if (developer.IsSet && developer.Value == null)
                throw new ArgumentNullException(nameof(developer), "Property is not nullable for class GetGameResponseDevelopersInner.");

            if (developerId.IsSet && developerId.Value == null)
                throw new ArgumentNullException(nameof(developerId), "Property is not nullable for class GetGameResponseDevelopersInner.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class GetGameResponseDevelopersInner.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetGameResponseDevelopersInner.");

            return new GetGameResponseDevelopersInner(developer.Value!, developerId.Value!, gameId.Value!, id.Value!, role.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GetGameResponseDevelopersInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGameResponseDevelopersInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetGameResponseDevelopersInner getGameResponseDevelopersInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getGameResponseDevelopersInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetGameResponseDevelopersInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGameResponseDevelopersInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetGameResponseDevelopersInner getGameResponseDevelopersInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getGameResponseDevelopersInner.Developer == null)
                throw new ArgumentNullException(nameof(getGameResponseDevelopersInner.Developer), "Property is required for class GetGameResponseDevelopersInner.");

            if (getGameResponseDevelopersInner.DeveloperId == null)
                throw new ArgumentNullException(nameof(getGameResponseDevelopersInner.DeveloperId), "Property is required for class GetGameResponseDevelopersInner.");

            if (getGameResponseDevelopersInner.GameId == null)
                throw new ArgumentNullException(nameof(getGameResponseDevelopersInner.GameId), "Property is required for class GetGameResponseDevelopersInner.");

            if (getGameResponseDevelopersInner.Id == null)
                throw new ArgumentNullException(nameof(getGameResponseDevelopersInner.Id), "Property is required for class GetGameResponseDevelopersInner.");

            writer.WritePropertyName("developer");
            JsonSerializer.Serialize(writer, getGameResponseDevelopersInner.Developer, jsonSerializerOptions);
            writer.WriteString("developerId", getGameResponseDevelopersInner.DeveloperId);

            writer.WriteString("gameId", getGameResponseDevelopersInner.GameId);

            writer.WriteString("id", getGameResponseDevelopersInner.Id);

            var roleRawValue = GetGameResponseDevelopersInner.RoleEnumToJsonValue(getGameResponseDevelopersInner.Role!.Value);
            if (roleRawValue != null)
                writer.WriteString("role", roleRawValue);
            else
                writer.WriteNull("role");
        }
    }
}