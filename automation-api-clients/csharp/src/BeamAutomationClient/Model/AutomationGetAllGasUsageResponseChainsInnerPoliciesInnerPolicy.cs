// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy
    /// </summary>
    public partial class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="model">model</param>
        /// <param name="chainId">chainId</param>
        [JsonConstructor]
        public AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy(string id, string name, ModelEnum model, int chainId)
        {
            Id = id;
            Name = name;
            Model = model;
            ChainId = chainId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Model
        /// </summary>
        [JsonConverter(typeof(ModelEnumJsonConverter))]
        public enum ModelEnum
        {
            /// <summary>
            /// Enum ContractFunctions for value: ContractFunctions
            /// </summary>
            ContractFunctions = 1,

            /// <summary>
            /// Enum AccountFunctions for value: AccountFunctions
            /// </summary>
            AccountFunctions = 2
        }

        /// <summary>
        /// Returns a <see cref="ModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ModelEnum ModelEnumFromString(string value)
        {
            if (value.Equals("ContractFunctions"))
                return ModelEnum.ContractFunctions;

            if (value.Equals("AccountFunctions"))
                return ModelEnum.AccountFunctions;

            throw new NotImplementedException($"Could not convert value to type ModelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModelEnum? ModelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ContractFunctions"))
                return ModelEnum.ContractFunctions;

            if (value.Equals("AccountFunctions"))
                return ModelEnum.AccountFunctions;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ModelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ModelEnumToJsonValue(ModelEnum value)
        {
            if (value == null)
                return null;

            if (value == ModelEnum.ContractFunctions)
                return "ContractFunctions";

            if (value == ModelEnum.AccountFunctions)
                return "AccountFunctions";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="ModelEnum"/> to and from the JSON value
        /// </summary>
        public static class ModelEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="ModelEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static ModelEnum FromString(string value)
            {
                    if (value.Equals("ContractFunctions"))
                    return ModelEnum.ContractFunctions;

                    if (value.Equals("AccountFunctions"))
                    return ModelEnum.AccountFunctions;

            throw new NotImplementedException($"Could not convert value to type ModelEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="ModelEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static ModelEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("ContractFunctions"))
                    return ModelEnum.ContractFunctions;

                    if (value.Equals("AccountFunctions"))
                    return ModelEnum.AccountFunctions;

            return null;
            }

            /// <summary>
            /// Converts the <see cref="ModelEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(ModelEnum value)
            {
                        if (value == ModelEnum.ContractFunctions)
                        return "ContractFunctions";

                        if (value == ModelEnum.AccountFunctions)
                        return "AccountFunctions";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="ModelEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class ModelEnumJsonConverter : JsonConverter<ModelEnum>
        {
            /// <summary>
            /// Returns a ModelEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override ModelEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string rawValue = reader.GetString();

                ModelEnum? result = rawValue == null
                ? null
                : ModelEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the ModelEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="modelEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, ModelEnum modelEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(ModelEnumValueConverter.ToJsonValue(modelEnum));
            }
        }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonPropertyName("model")]
        public ModelEnum Model { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public int ChainId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy" />
    /// </summary>
    public class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicyJsonConverter : JsonConverter<AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> id = default;
            Option<string> name = default;
            Option<AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.ModelEnum?> model = default;
            Option<int?> chainId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "model":
                            string modelRawValue = utf8JsonReader.GetString();
                            if (modelRawValue != null)
                                model = new Option<AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.ModelEnum?>(AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.ModelEnumFromStringOrDefault(modelRawValue));
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.", nameof(name));

            if (!model.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.", nameof(model));

            if (!chainId.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.", nameof(chainId));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.");

            if (model.IsSet && model.Value == null)
                throw new ArgumentNullException(nameof(model), "Property is not nullable for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.");

            return new AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy(id.Value, name.Value, model.Value.Value, chainId.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.Id == null)
                throw new ArgumentNullException(nameof(automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.Id), "Property is required for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.");

            if (automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.Name == null)
                throw new ArgumentNullException(nameof(automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.Name), "Property is required for class AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.");

            writer.WriteString("id", automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.Id);

            writer.WriteString("name", automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.Name);

            var modelRawValue = AutomationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.ModelEnumToJsonValue(automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.Model);
            if (modelRawValue != null)
                writer.WriteString("model", modelRawValue);
            writer.WriteNumber("chainId", automationGetAllGasUsageResponseChainsInnerPoliciesInnerPolicy.ChainId);
        }
    }
}