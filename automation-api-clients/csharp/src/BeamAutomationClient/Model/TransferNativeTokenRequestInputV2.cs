// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// TransferNativeTokenRequestInputV2
    /// </summary>
    public partial class TransferNativeTokenRequestInputV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferNativeTokenRequestInputV2" /> class.
        /// </summary>
        /// <param name="amountToTransfer">amountToTransfer</param>
        /// <param name="chainId">chainId (default to 13337M)</param>
        /// <param name="optimistic">optimistic (default to false)</param>
        /// <param name="policyId">policyId</param>
        /// <param name="receiverEntityId">receiverEntityId</param>
        /// <param name="receiverWalletAddress">receiverWalletAddress</param>
        /// <param name="sponsor">sponsor (default to true)</param>
        [JsonConstructor]
        public TransferNativeTokenRequestInputV2(string amountToTransfer, Option<decimal?> chainId = default, Option<bool?> optimistic = default, Option<string?> policyId = default, Option<string?> receiverEntityId = default, Option<string?> receiverWalletAddress = default, Option<bool?> sponsor = default)
        {
            AmountToTransfer = amountToTransfer;
            ChainIdOption = chainId;
            OptimisticOption = optimistic;
            PolicyIdOption = policyId;
            ReceiverEntityIdOption = receiverEntityId;
            ReceiverWalletAddressOption = receiverWalletAddress;
            SponsorOption = sponsor;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AmountToTransfer
        /// </summary>
        [JsonPropertyName("amountToTransfer")]
        public string AmountToTransfer { get; set; }

        /// <summary>
        /// Used to track the state of ChainId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public decimal? ChainId { get { return this. ChainIdOption; } set { this.ChainIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Optimistic
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OptimisticOption { get; private set; }

        /// <summary>
        /// Gets or Sets Optimistic
        /// </summary>
        [JsonPropertyName("optimistic")]
        public bool? Optimistic { get { return this. OptimisticOption; } set { this.OptimisticOption = new(value); } }

        /// <summary>
        /// Used to track the state of PolicyId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PolicyIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PolicyId
        /// </summary>
        [JsonPropertyName("policyId")]
        public string? PolicyId { get { return this. PolicyIdOption; } set { this.PolicyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReceiverEntityId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReceiverEntityIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReceiverEntityId
        /// </summary>
        [JsonPropertyName("receiverEntityId")]
        public string? ReceiverEntityId { get { return this. ReceiverEntityIdOption; } set { this.ReceiverEntityIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReceiverWalletAddress
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReceiverWalletAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ReceiverWalletAddress
        /// </summary>
        [JsonPropertyName("receiverWalletAddress")]
        public string? ReceiverWalletAddress { get { return this. ReceiverWalletAddressOption; } set { this.ReceiverWalletAddressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sponsor
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SponsorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sponsor
        /// </summary>
        [JsonPropertyName("sponsor")]
        public bool? Sponsor { get { return this. SponsorOption; } set { this.SponsorOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferNativeTokenRequestInputV2 {\n");
            sb.Append("  AmountToTransfer: ").Append(AmountToTransfer).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Optimistic: ").Append(Optimistic).Append("\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  ReceiverEntityId: ").Append(ReceiverEntityId).Append("\n");
            sb.Append("  ReceiverWalletAddress: ").Append(ReceiverWalletAddress).Append("\n");
            sb.Append("  Sponsor: ").Append(Sponsor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransferNativeTokenRequestInputV2" />
    /// </summary>
    public class TransferNativeTokenRequestInputV2JsonConverter : JsonConverter<TransferNativeTokenRequestInputV2>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransferNativeTokenRequestInputV2" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransferNativeTokenRequestInputV2 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> amountToTransfer = default;
            Option<decimal?> chainId = default;
            Option<bool?> optimistic = default;
            Option<string?> policyId = default;
            Option<string?> receiverEntityId = default;
            Option<string?> receiverWalletAddress = default;
            Option<bool?> sponsor = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "amountToTransfer":
                            amountToTransfer = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "optimistic":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                optimistic = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "policyId":
                            policyId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "receiverEntityId":
                            receiverEntityId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "receiverWalletAddress":
                            receiverWalletAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "sponsor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sponsor = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!amountToTransfer.IsSet)
                throw new ArgumentException("Property is required for class TransferNativeTokenRequestInputV2.", nameof(amountToTransfer));

            if (amountToTransfer.IsSet && amountToTransfer.Value == null)
                throw new ArgumentNullException(nameof(amountToTransfer), "Property is not nullable for class TransferNativeTokenRequestInputV2.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class TransferNativeTokenRequestInputV2.");

            if (optimistic.IsSet && optimistic.Value == null)
                throw new ArgumentNullException(nameof(optimistic), "Property is not nullable for class TransferNativeTokenRequestInputV2.");

            if (receiverEntityId.IsSet && receiverEntityId.Value == null)
                throw new ArgumentNullException(nameof(receiverEntityId), "Property is not nullable for class TransferNativeTokenRequestInputV2.");

            if (receiverWalletAddress.IsSet && receiverWalletAddress.Value == null)
                throw new ArgumentNullException(nameof(receiverWalletAddress), "Property is not nullable for class TransferNativeTokenRequestInputV2.");

            if (sponsor.IsSet && sponsor.Value == null)
                throw new ArgumentNullException(nameof(sponsor), "Property is not nullable for class TransferNativeTokenRequestInputV2.");

            return new TransferNativeTokenRequestInputV2(amountToTransfer.Value!, chainId, optimistic, policyId, receiverEntityId, receiverWalletAddress, sponsor);
        }

        /// <summary>
        /// Serializes a <see cref="TransferNativeTokenRequestInputV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transferNativeTokenRequestInputV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransferNativeTokenRequestInputV2 transferNativeTokenRequestInputV2, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, transferNativeTokenRequestInputV2, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransferNativeTokenRequestInputV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transferNativeTokenRequestInputV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TransferNativeTokenRequestInputV2 transferNativeTokenRequestInputV2, JsonSerializerOptions jsonSerializerOptions)
        {
            if (transferNativeTokenRequestInputV2.AmountToTransfer == null)
                throw new ArgumentNullException(nameof(transferNativeTokenRequestInputV2.AmountToTransfer), "Property is required for class TransferNativeTokenRequestInputV2.");

            if (transferNativeTokenRequestInputV2.ReceiverEntityIdOption.IsSet && transferNativeTokenRequestInputV2.ReceiverEntityId == null)
                throw new ArgumentNullException(nameof(transferNativeTokenRequestInputV2.ReceiverEntityId), "Property is required for class TransferNativeTokenRequestInputV2.");

            if (transferNativeTokenRequestInputV2.ReceiverWalletAddressOption.IsSet && transferNativeTokenRequestInputV2.ReceiverWalletAddress == null)
                throw new ArgumentNullException(nameof(transferNativeTokenRequestInputV2.ReceiverWalletAddress), "Property is required for class TransferNativeTokenRequestInputV2.");

            writer.WriteString("amountToTransfer", transferNativeTokenRequestInputV2.AmountToTransfer);

            if (transferNativeTokenRequestInputV2.ChainIdOption.IsSet)
                writer.WriteNumber("chainId", transferNativeTokenRequestInputV2.ChainIdOption.Value!.Value);

            if (transferNativeTokenRequestInputV2.OptimisticOption.IsSet)
                writer.WriteBoolean("optimistic", transferNativeTokenRequestInputV2.OptimisticOption.Value!.Value);

            if (transferNativeTokenRequestInputV2.PolicyIdOption.IsSet)
                if (transferNativeTokenRequestInputV2.PolicyIdOption.Value != null)
                    writer.WriteString("policyId", transferNativeTokenRequestInputV2.PolicyId);
                else
                    writer.WriteNull("policyId");

            if (transferNativeTokenRequestInputV2.ReceiverEntityIdOption.IsSet)
                writer.WriteString("receiverEntityId", transferNativeTokenRequestInputV2.ReceiverEntityId);

            if (transferNativeTokenRequestInputV2.ReceiverWalletAddressOption.IsSet)
                writer.WriteString("receiverWalletAddress", transferNativeTokenRequestInputV2.ReceiverWalletAddress);

            if (transferNativeTokenRequestInputV2.SponsorOption.IsSet)
                writer.WriteBoolean("sponsor", transferNativeTokenRequestInputV2.SponsorOption.Value!.Value);
        }
    }
}