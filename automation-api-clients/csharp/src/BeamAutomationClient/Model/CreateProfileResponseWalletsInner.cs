// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// CreateProfileResponseWalletsInner
    /// </summary>
    public partial class CreateProfileResponseWalletsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProfileResponseWalletsInner" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="chainId">chainId</param>
        /// <param name="externalId">externalId</param>
        /// <param name="id">id</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="profileId">profileId</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="userId">userId</param>
        [JsonConstructor]
        public CreateProfileResponseWalletsInner(string address, int chainId, string externalId, string id, Object? createdAt = default, string? profileId = default, Object? updatedAt = default, string? userId = default)
        {
            Address = address;
            ChainId = chainId;
            ExternalId = externalId;
            Id = id;
            CreatedAt = createdAt;
            ProfileId = profileId;
            UpdatedAt = updatedAt;
            UserId = userId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public int ChainId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public Object? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ProfileId
        /// </summary>
        [JsonPropertyName("profileId")]
        public string? ProfileId { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public Object? UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public string? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateProfileResponseWalletsInner {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateProfileResponseWalletsInner" />
    /// </summary>
    public class CreateProfileResponseWalletsInnerJsonConverter : JsonConverter<CreateProfileResponseWalletsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateProfileResponseWalletsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateProfileResponseWalletsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> address = default;
            Option<int?> chainId = default;
            Option<string?> externalId = default;
            Option<string?> id = default;
            Option<Object?> createdAt = default;
            Option<string?> profileId = default;
            Option<Object?> updatedAt = default;
            Option<string?> userId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "externalId":
                            externalId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "profileId":
                            profileId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "userId":
                            userId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!address.IsSet)
                throw new ArgumentException("Property is required for class CreateProfileResponseWalletsInner.", nameof(address));

            if (!chainId.IsSet)
                throw new ArgumentException("Property is required for class CreateProfileResponseWalletsInner.", nameof(chainId));

            if (!externalId.IsSet)
                throw new ArgumentException("Property is required for class CreateProfileResponseWalletsInner.", nameof(externalId));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CreateProfileResponseWalletsInner.", nameof(id));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class CreateProfileResponseWalletsInner.", nameof(createdAt));

            if (!profileId.IsSet)
                throw new ArgumentException("Property is required for class CreateProfileResponseWalletsInner.", nameof(profileId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class CreateProfileResponseWalletsInner.", nameof(updatedAt));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class CreateProfileResponseWalletsInner.", nameof(userId));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class CreateProfileResponseWalletsInner.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class CreateProfileResponseWalletsInner.");

            if (externalId.IsSet && externalId.Value == null)
                throw new ArgumentNullException(nameof(externalId), "Property is not nullable for class CreateProfileResponseWalletsInner.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CreateProfileResponseWalletsInner.");

            return new CreateProfileResponseWalletsInner(address.Value!, chainId.Value!.Value!, externalId.Value!, id.Value!, createdAt.Value!, profileId.Value!, updatedAt.Value!, userId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="CreateProfileResponseWalletsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createProfileResponseWalletsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateProfileResponseWalletsInner createProfileResponseWalletsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createProfileResponseWalletsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateProfileResponseWalletsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createProfileResponseWalletsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateProfileResponseWalletsInner createProfileResponseWalletsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createProfileResponseWalletsInner.Address == null)
                throw new ArgumentNullException(nameof(createProfileResponseWalletsInner.Address), "Property is required for class CreateProfileResponseWalletsInner.");

            if (createProfileResponseWalletsInner.ExternalId == null)
                throw new ArgumentNullException(nameof(createProfileResponseWalletsInner.ExternalId), "Property is required for class CreateProfileResponseWalletsInner.");

            if (createProfileResponseWalletsInner.Id == null)
                throw new ArgumentNullException(nameof(createProfileResponseWalletsInner.Id), "Property is required for class CreateProfileResponseWalletsInner.");

            writer.WriteString("address", createProfileResponseWalletsInner.Address);

            writer.WriteNumber("chainId", createProfileResponseWalletsInner.ChainId);

            writer.WriteString("externalId", createProfileResponseWalletsInner.ExternalId);

            writer.WriteString("id", createProfileResponseWalletsInner.Id);

            if (createProfileResponseWalletsInner.CreatedAt != null)
            {
                writer.WritePropertyName("createdAt");
                JsonSerializer.Serialize(writer, createProfileResponseWalletsInner.CreatedAt, jsonSerializerOptions);
            }
            else
                writer.WriteNull("createdAt");
            if (createProfileResponseWalletsInner.ProfileId != null)
                writer.WriteString("profileId", createProfileResponseWalletsInner.ProfileId);
            else
                writer.WriteNull("profileId");

            if (createProfileResponseWalletsInner.UpdatedAt != null)
            {
                writer.WritePropertyName("updatedAt");
                JsonSerializer.Serialize(writer, createProfileResponseWalletsInner.UpdatedAt, jsonSerializerOptions);
            }
            else
                writer.WriteNull("updatedAt");
            if (createProfileResponseWalletsInner.UserId != null)
                writer.WriteString("userId", createProfileResponseWalletsInner.UserId);
            else
                writer.WriteNull("userId");
        }
    }
}