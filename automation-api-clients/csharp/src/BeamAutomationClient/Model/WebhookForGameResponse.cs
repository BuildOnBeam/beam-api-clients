// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// WebhookForGameResponse
    /// </summary>
    public partial class WebhookForGameResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookForGameResponse" /> class.
        /// </summary>
        /// <param name="contract">contract</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="events">events</param>
        /// <param name="id">id</param>
        /// <param name="signature">Signature that can be used to validate whether data comes from Beam API</param>
        /// <param name="url">url</param>
        /// <param name="chainId">chainId (default to 13337M)</param>
        [JsonConstructor]
        public WebhookForGameResponse(string contract, DateTime createdAt, List<WebhookForGameResponse.EventsEnum> events, string id, string signature, string url, Option<decimal?> chainId = default)
        {
            Contract = contract;
            CreatedAt = createdAt;
            Events = events;
            Id = id;
            Signature = signature;
            Url = url;
            ChainIdOption = chainId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Events
        /// </summary>
        public enum EventsEnum
        {
            /// <summary>
            /// Enum TokenTransfers for value: TokenTransfers
            /// </summary>
            TokenTransfers = 1
        }

        /// <summary>
        /// Returns a <see cref="EventsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventsEnum EventsEnumFromString(string value)
        {
            if (value.Equals("TokenTransfers"))
                return EventsEnum.TokenTransfers;

            throw new NotImplementedException($"Could not convert value to type EventsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventsEnum? EventsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TokenTransfers"))
                return EventsEnum.TokenTransfers;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventsEnumToJsonValue(EventsEnum? value)
        {
            if (value == EventsEnum.TokenTransfers)
                return "TokenTransfers";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [JsonPropertyName("contract")]
        public string Contract { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [JsonPropertyName("events")]
        public List<WebhookForGameResponse.EventsEnum> Events { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Signature that can be used to validate whether data comes from Beam API
        /// </summary>
        /// <value>Signature that can be used to validate whether data comes from Beam API</value>
        [JsonPropertyName("signature")]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Used to track the state of ChainId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public decimal? ChainId { get { return this. ChainIdOption; } set { this.ChainIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookForGameResponse {\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebhookForGameResponse" />
    /// </summary>
    public class WebhookForGameResponseJsonConverter : JsonConverter<WebhookForGameResponse>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="WebhookForGameResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebhookForGameResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> contract = default;
            Option<DateTime?> createdAt = default;
            Option<List<WebhookForGameResponse.EventsEnum>?> events = default;
            Option<string?> id = default;
            Option<string?> signature = default;
            Option<string?> url = default;
            Option<decimal?> chainId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contract":
                            contract = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "events":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                events = new Option<List<WebhookForGameResponse.EventsEnum>?>(JsonSerializer.Deserialize<List<WebhookForGameResponse.EventsEnum>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "signature":
                            signature = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contract.IsSet)
                throw new ArgumentException("Property is required for class WebhookForGameResponse.", nameof(contract));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class WebhookForGameResponse.", nameof(createdAt));

            if (!events.IsSet)
                throw new ArgumentException("Property is required for class WebhookForGameResponse.", nameof(events));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class WebhookForGameResponse.", nameof(id));

            if (!signature.IsSet)
                throw new ArgumentException("Property is required for class WebhookForGameResponse.", nameof(signature));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class WebhookForGameResponse.", nameof(url));

            if (contract.IsSet && contract.Value == null)
                throw new ArgumentNullException(nameof(contract), "Property is not nullable for class WebhookForGameResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class WebhookForGameResponse.");

            if (events.IsSet && events.Value == null)
                throw new ArgumentNullException(nameof(events), "Property is not nullable for class WebhookForGameResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class WebhookForGameResponse.");

            if (signature.IsSet && signature.Value == null)
                throw new ArgumentNullException(nameof(signature), "Property is not nullable for class WebhookForGameResponse.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class WebhookForGameResponse.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class WebhookForGameResponse.");

            return new WebhookForGameResponse(contract.Value!, createdAt.Value!.Value!, events.Value!, id.Value!, signature.Value!, url.Value!, chainId);
        }

        /// <summary>
        /// Serializes a <see cref="WebhookForGameResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookForGameResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebhookForGameResponse webhookForGameResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, webhookForGameResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebhookForGameResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhookForGameResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, WebhookForGameResponse webhookForGameResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhookForGameResponse.Contract == null)
                throw new ArgumentNullException(nameof(webhookForGameResponse.Contract), "Property is required for class WebhookForGameResponse.");

            if (webhookForGameResponse.Events == null)
                throw new ArgumentNullException(nameof(webhookForGameResponse.Events), "Property is required for class WebhookForGameResponse.");

            if (webhookForGameResponse.Id == null)
                throw new ArgumentNullException(nameof(webhookForGameResponse.Id), "Property is required for class WebhookForGameResponse.");

            if (webhookForGameResponse.Signature == null)
                throw new ArgumentNullException(nameof(webhookForGameResponse.Signature), "Property is required for class WebhookForGameResponse.");

            if (webhookForGameResponse.Url == null)
                throw new ArgumentNullException(nameof(webhookForGameResponse.Url), "Property is required for class WebhookForGameResponse.");

            writer.WriteString("contract", webhookForGameResponse.Contract);

            writer.WriteString("createdAt", webhookForGameResponse.CreatedAt.ToString(CreatedAtFormat));

            writer.WritePropertyName("events");
            JsonSerializer.Serialize(writer, webhookForGameResponse.Events, jsonSerializerOptions);
            writer.WriteString("id", webhookForGameResponse.Id);

            writer.WriteString("signature", webhookForGameResponse.Signature);

            writer.WriteString("url", webhookForGameResponse.Url);

            if (webhookForGameResponse.ChainIdOption.IsSet)
                writer.WriteNumber("chainId", webhookForGameResponse.ChainIdOption.Value!.Value);
        }
    }
}