// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationRegenerateGameApiKeysResponseApiKeysInner
    /// </summary>
    public partial class AutomationRegenerateGameApiKeysResponseApiKeysInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationRegenerateGameApiKeysResponseApiKeysInner" /> class.
        /// </summary>
        /// <param name="apiKey">apiKey</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="gameId">gameId</param>
        /// <param name="id">id</param>
        /// <param name="type">type</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public AutomationRegenerateGameApiKeysResponseApiKeysInner(string apiKey, DateTime createdAt, string gameId, string id, TypeEnum type, DateTime updatedAt)
        {
            ApiKey = apiKey;
            CreatedAt = createdAt;
            GameId = gameId;
            Id = id;
            Type = type;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Regenerate for value: Regenerate
            /// </summary>
            Regenerate = 1,

            /// <summary>
            /// Enum Publishable for value: Publishable
            /// </summary>
            Publishable = 2,

            /// <summary>
            /// Enum Secret for value: Secret
            /// </summary>
            Secret = 3
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("Regenerate"))
                return TypeEnum.Regenerate;

            if (value.Equals("Publishable"))
                return TypeEnum.Publishable;

            if (value.Equals("Secret"))
                return TypeEnum.Secret;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Regenerate"))
                return TypeEnum.Regenerate;

            if (value.Equals("Publishable"))
                return TypeEnum.Publishable;

            if (value.Equals("Secret"))
                return TypeEnum.Secret;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Regenerate)
                return "Regenerate";

            if (value == TypeEnum.Publishable)
                return "Publishable";

            if (value == TypeEnum.Secret)
                return "Secret";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [JsonPropertyName("apiKey")]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [JsonPropertyName("gameId")]
        public string GameId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationRegenerateGameApiKeysResponseApiKeysInner {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationRegenerateGameApiKeysResponseApiKeysInner" />
    /// </summary>
    public class AutomationRegenerateGameApiKeysResponseApiKeysInnerJsonConverter : JsonConverter<AutomationRegenerateGameApiKeysResponseApiKeysInner>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AutomationRegenerateGameApiKeysResponseApiKeysInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationRegenerateGameApiKeysResponseApiKeysInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> apiKey = default;
            Option<DateTime?> createdAt = default;
            Option<string?> gameId = default;
            Option<string?> id = default;
            Option<AutomationRegenerateGameApiKeysResponseApiKeysInner.TypeEnum?> type = default;
            Option<DateTime?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "apiKey":
                            apiKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "gameId":
                            gameId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<AutomationRegenerateGameApiKeysResponseApiKeysInner.TypeEnum?>(AutomationRegenerateGameApiKeysResponseApiKeysInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!apiKey.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponseApiKeysInner.", nameof(apiKey));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponseApiKeysInner.", nameof(createdAt));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponseApiKeysInner.", nameof(gameId));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponseApiKeysInner.", nameof(id));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponseApiKeysInner.", nameof(type));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class AutomationRegenerateGameApiKeysResponseApiKeysInner.", nameof(updatedAt));

            if (apiKey.IsSet && apiKey.Value == null)
                throw new ArgumentNullException(nameof(apiKey), "Property is not nullable for class AutomationRegenerateGameApiKeysResponseApiKeysInner.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AutomationRegenerateGameApiKeysResponseApiKeysInner.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class AutomationRegenerateGameApiKeysResponseApiKeysInner.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AutomationRegenerateGameApiKeysResponseApiKeysInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AutomationRegenerateGameApiKeysResponseApiKeysInner.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AutomationRegenerateGameApiKeysResponseApiKeysInner.");

            return new AutomationRegenerateGameApiKeysResponseApiKeysInner(apiKey.Value!, createdAt.Value!.Value!, gameId.Value!, id.Value!, type.Value!.Value!, updatedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationRegenerateGameApiKeysResponseApiKeysInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationRegenerateGameApiKeysResponseApiKeysInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationRegenerateGameApiKeysResponseApiKeysInner automationRegenerateGameApiKeysResponseApiKeysInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, automationRegenerateGameApiKeysResponseApiKeysInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationRegenerateGameApiKeysResponseApiKeysInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationRegenerateGameApiKeysResponseApiKeysInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AutomationRegenerateGameApiKeysResponseApiKeysInner automationRegenerateGameApiKeysResponseApiKeysInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationRegenerateGameApiKeysResponseApiKeysInner.ApiKey == null)
                throw new ArgumentNullException(nameof(automationRegenerateGameApiKeysResponseApiKeysInner.ApiKey), "Property is required for class AutomationRegenerateGameApiKeysResponseApiKeysInner.");

            if (automationRegenerateGameApiKeysResponseApiKeysInner.GameId == null)
                throw new ArgumentNullException(nameof(automationRegenerateGameApiKeysResponseApiKeysInner.GameId), "Property is required for class AutomationRegenerateGameApiKeysResponseApiKeysInner.");

            if (automationRegenerateGameApiKeysResponseApiKeysInner.Id == null)
                throw new ArgumentNullException(nameof(automationRegenerateGameApiKeysResponseApiKeysInner.Id), "Property is required for class AutomationRegenerateGameApiKeysResponseApiKeysInner.");

            writer.WriteString("apiKey", automationRegenerateGameApiKeysResponseApiKeysInner.ApiKey);

            writer.WriteString("createdAt", automationRegenerateGameApiKeysResponseApiKeysInner.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("gameId", automationRegenerateGameApiKeysResponseApiKeysInner.GameId);

            writer.WriteString("id", automationRegenerateGameApiKeysResponseApiKeysInner.Id);

            var typeRawValue = AutomationRegenerateGameApiKeysResponseApiKeysInner.TypeEnumToJsonValue(automationRegenerateGameApiKeysResponseApiKeysInner.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("updatedAt", automationRegenerateGameApiKeysResponseApiKeysInner.UpdatedAt.ToString(UpdatedAtFormat));
        }
    }
}