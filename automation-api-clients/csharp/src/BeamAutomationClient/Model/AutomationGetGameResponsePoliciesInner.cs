// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationGetGameResponsePoliciesInner
    /// </summary>
    public partial class AutomationGetGameResponsePoliciesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationGetGameResponsePoliciesInner" /> class.
        /// </summary>
        /// <param name="model">model</param>
        /// <param name="type">type</param>
        /// <param name="id">id</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="externalId">externalId</param>
        /// <param name="name">name</param>
        /// <param name="chainId">chainId</param>
        /// <param name="gameId">gameId</param>
        /// <param name="rateType">rateType</param>
        /// <param name="paymasterId">paymasterId</param>
        /// <param name="token">token</param>
        /// <param name="amount">amount</param>
        /// <param name="depositorId">depositorId</param>
        [JsonConstructor]
        public AutomationGetGameResponsePoliciesInner(ModelEnum model, TypeEnum type, string id, DateTime createdAt, DateTime updatedAt, string externalId, string name, int chainId, string gameId, Option<RateTypeEnum?> rateType = default, string paymasterId = default, string token = default, string amount = default, string depositorId = default)
        {
            Model = model;
            Type = type;
            Id = id;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            ExternalId = externalId;
            Name = name;
            ChainId = chainId;
            GameId = gameId;
            RateTypeOption = rateType;
            PaymasterId = paymasterId;
            Token = token;
            Amount = amount;
            DepositorId = depositorId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Model
        /// </summary>
        public enum ModelEnum
        {
            /// <summary>
            /// Enum ContractFunctions for value: ContractFunctions
            /// </summary>
            ContractFunctions = 1,

            /// <summary>
            /// Enum AccountFunctions for value: AccountFunctions
            /// </summary>
            AccountFunctions = 2
        }

        /// <summary>
        /// Returns a <see cref="ModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ModelEnum ModelEnumFromString(string value)
        {
            if (value.Equals("ContractFunctions"))
                return ModelEnum.ContractFunctions;

            if (value.Equals("AccountFunctions"))
                return ModelEnum.AccountFunctions;

            throw new NotImplementedException($"Could not convert value to type ModelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ModelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ModelEnum? ModelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ContractFunctions"))
                return ModelEnum.ContractFunctions;

            if (value.Equals("AccountFunctions"))
                return ModelEnum.AccountFunctions;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ModelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ModelEnumToJsonValue(ModelEnum value)
        {
            if (value == null)
                return null;

            if (value == ModelEnum.ContractFunctions)
                return "ContractFunctions";

            if (value == ModelEnum.AccountFunctions)
                return "AccountFunctions";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [JsonPropertyName("model")]
        public ModelEnum Model { get; set; }

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PayForUser for value: PayForUser
            /// </summary>
            PayForUser = 1,

            /// <summary>
            /// Enum ChargeCustomToken for value: ChargeCustomToken
            /// </summary>
            ChargeCustomToken = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("PayForUser"))
                return TypeEnum.PayForUser;

            if (value.Equals("ChargeCustomToken"))
                return TypeEnum.ChargeCustomToken;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("PayForUser"))
                return TypeEnum.PayForUser;

            if (value.Equals("ChargeCustomToken"))
                return TypeEnum.ChargeCustomToken;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == null)
                return null;

            if (value == TypeEnum.PayForUser)
                return "PayForUser";

            if (value == TypeEnum.ChargeCustomToken)
                return "ChargeCustomToken";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Defines RateType
        /// </summary>
        public enum RateTypeEnum
        {
            /// <summary>
            /// Enum Fixed for value: Fixed
            /// </summary>
            Fixed = 1,

            /// <summary>
            /// Enum Dynamic for value: Dynamic
            /// </summary>
            Dynamic = 2
        }

        /// <summary>
        /// Returns a <see cref="RateTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RateTypeEnum RateTypeEnumFromString(string value)
        {
            if (value.Equals("Fixed"))
                return RateTypeEnum.Fixed;

            if (value.Equals("Dynamic"))
                return RateTypeEnum.Dynamic;

            throw new NotImplementedException($"Could not convert value to type RateTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RateTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RateTypeEnum? RateTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Fixed"))
                return RateTypeEnum.Fixed;

            if (value.Equals("Dynamic"))
                return RateTypeEnum.Dynamic;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RateTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RateTypeEnumToJsonValue(RateTypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == RateTypeEnum.Fixed)
                return "Fixed";

            if (value == RateTypeEnum.Dynamic)
                return "Dynamic";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RateType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RateTypeEnum?> RateTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets RateType
        /// </summary>
        [JsonPropertyName("rateType")]
        public RateTypeEnum? RateType { get { return this.RateTypeOption; } set { this.RateTypeOption = new(value); } }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public int ChainId { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [JsonPropertyName("gameId")]
        public string GameId { get; set; }

        /// <summary>
        /// Gets or Sets PaymasterId
        /// </summary>
        [JsonPropertyName("paymasterId")]
        public string PaymasterId { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [JsonPropertyName("token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [JsonPropertyName("amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or Sets DepositorId
        /// </summary>
        [JsonPropertyName("depositorId")]
        public string DepositorId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationGetGameResponsePoliciesInner {\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  RateType: ").Append(RateType).Append("\n");
            sb.Append("  PaymasterId: ").Append(PaymasterId).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  DepositorId: ").Append(DepositorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationGetGameResponsePoliciesInner" />
    /// </summary>
    public class AutomationGetGameResponsePoliciesInnerJsonConverter : JsonConverter<AutomationGetGameResponsePoliciesInner>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="AutomationGetGameResponsePoliciesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationGetGameResponsePoliciesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AutomationGetGameResponsePoliciesInner.ModelEnum?> model = default;
            Option<AutomationGetGameResponsePoliciesInner.TypeEnum?> type = default;
            Option<string> id = default;
            Option<DateTime?> createdAt = default;
            Option<DateTime?> updatedAt = default;
            Option<string> externalId = default;
            Option<string> name = default;
            Option<int?> chainId = default;
            Option<string> gameId = default;
            Option<AutomationGetGameResponsePoliciesInner.RateTypeEnum?> rateType = default;
            Option<string> paymasterId = default;
            Option<string> token = default;
            Option<string> amount = default;
            Option<string> depositorId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "model":
                            string modelRawValue = utf8JsonReader.GetString();
                            if (modelRawValue != null)
                                model = new Option<AutomationGetGameResponsePoliciesInner.ModelEnum?>(AutomationGetGameResponsePoliciesInner.ModelEnumFromStringOrDefault(modelRawValue));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<AutomationGetGameResponsePoliciesInner.TypeEnum?>(AutomationGetGameResponsePoliciesInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "externalId":
                            externalId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "gameId":
                            gameId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "rateType":
                            string rateTypeRawValue = utf8JsonReader.GetString();
                            if (rateTypeRawValue != null)
                                rateType = new Option<AutomationGetGameResponsePoliciesInner.RateTypeEnum?>(AutomationGetGameResponsePoliciesInner.RateTypeEnumFromStringOrDefault(rateTypeRawValue));
                            break;
                        case "paymasterId":
                            paymasterId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "token":
                            token = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "amount":
                            amount = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "depositorId":
                            depositorId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!model.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(model));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(type));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(id));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(updatedAt));

            if (!externalId.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(externalId));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(name));

            if (!chainId.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(chainId));

            if (!gameId.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(gameId));

            if (!paymasterId.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(paymasterId));

            if (!token.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(token));

            if (!amount.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(amount));

            if (!depositorId.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetGameResponsePoliciesInner.", nameof(depositorId));

            if (model.IsSet && model.Value == null)
                throw new ArgumentNullException(nameof(model), "Property is not nullable for class AutomationGetGameResponsePoliciesInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AutomationGetGameResponsePoliciesInner.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class AutomationGetGameResponsePoliciesInner.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class AutomationGetGameResponsePoliciesInner.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class AutomationGetGameResponsePoliciesInner.");

            if (externalId.IsSet && externalId.Value == null)
                throw new ArgumentNullException(nameof(externalId), "Property is not nullable for class AutomationGetGameResponsePoliciesInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AutomationGetGameResponsePoliciesInner.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class AutomationGetGameResponsePoliciesInner.");

            if (gameId.IsSet && gameId.Value == null)
                throw new ArgumentNullException(nameof(gameId), "Property is not nullable for class AutomationGetGameResponsePoliciesInner.");

            return new AutomationGetGameResponsePoliciesInner(model.Value.Value, type.Value.Value, id.Value, createdAt.Value.Value, updatedAt.Value.Value, externalId.Value, name.Value, chainId.Value.Value, gameId.Value, rateType, paymasterId.Value, token.Value, amount.Value, depositorId.Value);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationGetGameResponsePoliciesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationGetGameResponsePoliciesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationGetGameResponsePoliciesInner automationGetGameResponsePoliciesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automationGetGameResponsePoliciesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationGetGameResponsePoliciesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationGetGameResponsePoliciesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutomationGetGameResponsePoliciesInner automationGetGameResponsePoliciesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationGetGameResponsePoliciesInner.Id == null)
                throw new ArgumentNullException(nameof(automationGetGameResponsePoliciesInner.Id), "Property is required for class AutomationGetGameResponsePoliciesInner.");

            if (automationGetGameResponsePoliciesInner.ExternalId == null)
                throw new ArgumentNullException(nameof(automationGetGameResponsePoliciesInner.ExternalId), "Property is required for class AutomationGetGameResponsePoliciesInner.");

            if (automationGetGameResponsePoliciesInner.Name == null)
                throw new ArgumentNullException(nameof(automationGetGameResponsePoliciesInner.Name), "Property is required for class AutomationGetGameResponsePoliciesInner.");

            if (automationGetGameResponsePoliciesInner.GameId == null)
                throw new ArgumentNullException(nameof(automationGetGameResponsePoliciesInner.GameId), "Property is required for class AutomationGetGameResponsePoliciesInner.");

            var modelRawValue = AutomationGetGameResponsePoliciesInner.ModelEnumToJsonValue(automationGetGameResponsePoliciesInner.Model);
            if (modelRawValue != null)
                writer.WriteString("model", modelRawValue);
            var typeRawValue = AutomationGetGameResponsePoliciesInner.TypeEnumToJsonValue(automationGetGameResponsePoliciesInner.Type);
            if (typeRawValue != null)
                writer.WriteString("type", typeRawValue);
            writer.WriteString("id", automationGetGameResponsePoliciesInner.Id);

            writer.WriteString("createdAt", automationGetGameResponsePoliciesInner.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", automationGetGameResponsePoliciesInner.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("externalId", automationGetGameResponsePoliciesInner.ExternalId);

            writer.WriteString("name", automationGetGameResponsePoliciesInner.Name);

            writer.WriteNumber("chainId", automationGetGameResponsePoliciesInner.ChainId);

            writer.WriteString("gameId", automationGetGameResponsePoliciesInner.GameId);

            var rateTypeRawValue = AutomationGetGameResponsePoliciesInner.RateTypeEnumToJsonValue(automationGetGameResponsePoliciesInner.RateTypeOption.Value.Value);
            if (rateTypeRawValue != null)
                writer.WriteString("rateType", rateTypeRawValue);
            else
                writer.WriteNull("rateType");

            if (automationGetGameResponsePoliciesInner.PaymasterId != null)
            {
                writer.WriteString("paymasterId", automationGetGameResponsePoliciesInner.PaymasterId);
            }
            else
            {
                writer.WriteNull("paymasterId");
            }

            if (automationGetGameResponsePoliciesInner.Token != null)
            {
                writer.WriteString("token", automationGetGameResponsePoliciesInner.Token);
            }
            else
            {
                writer.WriteNull("token");
            }

            if (automationGetGameResponsePoliciesInner.Amount != null)
            {
                writer.WriteString("amount", automationGetGameResponsePoliciesInner.Amount);
            }
            else
            {
                writer.WriteNull("amount");
            }

            if (automationGetGameResponsePoliciesInner.DepositorId != null)
            {
                writer.WriteString("depositorId", automationGetGameResponsePoliciesInner.DepositorId);
            }
            else
            {
                writer.WriteNull("depositorId");
            }
        }
    }
}