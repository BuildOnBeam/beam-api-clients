// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AddContractRequestInputAbiInner
    /// </summary>
    public partial class AddContractRequestInputAbiInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddContractRequestInputAbiInner" /> class.
        /// </summary>
        /// <param name="anonymous">anonymous</param>
        /// <param name="constant">constant</param>
        /// <param name="gas">gas</param>
        /// <param name="inputs">inputs</param>
        /// <param name="name">name</param>
        /// <param name="outputs">outputs</param>
        /// <param name="payable">payable</param>
        /// <param name="stateMutability">stateMutability</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public AddContractRequestInputAbiInner(Option<bool?> anonymous = default, Option<bool?> constant = default, Option<string?> gas = default, Option<List<AddContractRequestInputAbiInnerInputsInner>?> inputs = default, Option<string?> name = default, Option<List<Object>?> outputs = default, Option<bool?> payable = default, Option<string?> stateMutability = default, Option<string?> type = default)
        {
            AnonymousOption = anonymous;
            ConstantOption = constant;
            GasOption = gas;
            InputsOption = inputs;
            NameOption = name;
            OutputsOption = outputs;
            PayableOption = payable;
            StateMutabilityOption = stateMutability;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Anonymous
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AnonymousOption { get; private set; }

        /// <summary>
        /// Gets or Sets Anonymous
        /// </summary>
        [JsonPropertyName("anonymous")]
        public bool? Anonymous { get { return this. AnonymousOption; } set { this.AnonymousOption = new(value); } }

        /// <summary>
        /// Used to track the state of Constant
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ConstantOption { get; private set; }

        /// <summary>
        /// Gets or Sets Constant
        /// </summary>
        [JsonPropertyName("constant")]
        public bool? Constant { get { return this. ConstantOption; } set { this.ConstantOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gas
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GasOption { get; private set; }

        /// <summary>
        /// Gets or Sets Gas
        /// </summary>
        [JsonPropertyName("gas")]
        public string? Gas { get { return this. GasOption; } set { this.GasOption = new(value); } }

        /// <summary>
        /// Used to track the state of Inputs
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AddContractRequestInputAbiInnerInputsInner>?> InputsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [JsonPropertyName("inputs")]
        public List<AddContractRequestInputAbiInnerInputsInner>? Inputs { get { return this. InputsOption; } set { this.InputsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Outputs
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> OutputsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [JsonPropertyName("outputs")]
        public List<Object>? Outputs { get { return this. OutputsOption; } set { this.OutputsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Payable
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PayableOption { get; private set; }

        /// <summary>
        /// Gets or Sets Payable
        /// </summary>
        [JsonPropertyName("payable")]
        public bool? Payable { get { return this. PayableOption; } set { this.PayableOption = new(value); } }

        /// <summary>
        /// Used to track the state of StateMutability
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateMutabilityOption { get; private set; }

        /// <summary>
        /// Gets or Sets StateMutability
        /// </summary>
        [JsonPropertyName("stateMutability")]
        public string? StateMutability { get { return this. StateMutabilityOption; } set { this.StateMutabilityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this. TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddContractRequestInputAbiInner {\n");
            sb.Append("  Anonymous: ").Append(Anonymous).Append("\n");
            sb.Append("  Constant: ").Append(Constant).Append("\n");
            sb.Append("  Gas: ").Append(Gas).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Payable: ").Append(Payable).Append("\n");
            sb.Append("  StateMutability: ").Append(StateMutability).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddContractRequestInputAbiInner" />
    /// </summary>
    public class AddContractRequestInputAbiInnerJsonConverter : JsonConverter<AddContractRequestInputAbiInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddContractRequestInputAbiInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddContractRequestInputAbiInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> anonymous = default;
            Option<bool?> constant = default;
            Option<string?> gas = default;
            Option<List<AddContractRequestInputAbiInnerInputsInner>?> inputs = default;
            Option<string?> name = default;
            Option<List<Object>?> outputs = default;
            Option<bool?> payable = default;
            Option<string?> stateMutability = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "anonymous":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                anonymous = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "constant":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                constant = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "gas":
                            gas = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "inputs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inputs = new Option<List<AddContractRequestInputAbiInnerInputsInner>?>(JsonSerializer.Deserialize<List<AddContractRequestInputAbiInnerInputsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "outputs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                outputs = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "payable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "stateMutability":
                            stateMutability = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (anonymous.IsSet && anonymous.Value == null)
                throw new ArgumentNullException(nameof(anonymous), "Property is not nullable for class AddContractRequestInputAbiInner.");

            if (constant.IsSet && constant.Value == null)
                throw new ArgumentNullException(nameof(constant), "Property is not nullable for class AddContractRequestInputAbiInner.");

            if (gas.IsSet && gas.Value == null)
                throw new ArgumentNullException(nameof(gas), "Property is not nullable for class AddContractRequestInputAbiInner.");

            if (inputs.IsSet && inputs.Value == null)
                throw new ArgumentNullException(nameof(inputs), "Property is not nullable for class AddContractRequestInputAbiInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AddContractRequestInputAbiInner.");

            if (outputs.IsSet && outputs.Value == null)
                throw new ArgumentNullException(nameof(outputs), "Property is not nullable for class AddContractRequestInputAbiInner.");

            if (payable.IsSet && payable.Value == null)
                throw new ArgumentNullException(nameof(payable), "Property is not nullable for class AddContractRequestInputAbiInner.");

            if (stateMutability.IsSet && stateMutability.Value == null)
                throw new ArgumentNullException(nameof(stateMutability), "Property is not nullable for class AddContractRequestInputAbiInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AddContractRequestInputAbiInner.");

            return new AddContractRequestInputAbiInner(anonymous, constant, gas, inputs, name, outputs, payable, stateMutability, type);
        }

        /// <summary>
        /// Serializes a <see cref="AddContractRequestInputAbiInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addContractRequestInputAbiInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddContractRequestInputAbiInner addContractRequestInputAbiInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, addContractRequestInputAbiInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddContractRequestInputAbiInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addContractRequestInputAbiInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AddContractRequestInputAbiInner addContractRequestInputAbiInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addContractRequestInputAbiInner.GasOption.IsSet && addContractRequestInputAbiInner.Gas == null)
                throw new ArgumentNullException(nameof(addContractRequestInputAbiInner.Gas), "Property is required for class AddContractRequestInputAbiInner.");

            if (addContractRequestInputAbiInner.InputsOption.IsSet && addContractRequestInputAbiInner.Inputs == null)
                throw new ArgumentNullException(nameof(addContractRequestInputAbiInner.Inputs), "Property is required for class AddContractRequestInputAbiInner.");

            if (addContractRequestInputAbiInner.NameOption.IsSet && addContractRequestInputAbiInner.Name == null)
                throw new ArgumentNullException(nameof(addContractRequestInputAbiInner.Name), "Property is required for class AddContractRequestInputAbiInner.");

            if (addContractRequestInputAbiInner.OutputsOption.IsSet && addContractRequestInputAbiInner.Outputs == null)
                throw new ArgumentNullException(nameof(addContractRequestInputAbiInner.Outputs), "Property is required for class AddContractRequestInputAbiInner.");

            if (addContractRequestInputAbiInner.StateMutabilityOption.IsSet && addContractRequestInputAbiInner.StateMutability == null)
                throw new ArgumentNullException(nameof(addContractRequestInputAbiInner.StateMutability), "Property is required for class AddContractRequestInputAbiInner.");

            if (addContractRequestInputAbiInner.TypeOption.IsSet && addContractRequestInputAbiInner.Type == null)
                throw new ArgumentNullException(nameof(addContractRequestInputAbiInner.Type), "Property is required for class AddContractRequestInputAbiInner.");

            if (addContractRequestInputAbiInner.AnonymousOption.IsSet)
                writer.WriteBoolean("anonymous", addContractRequestInputAbiInner.AnonymousOption.Value!.Value);

            if (addContractRequestInputAbiInner.ConstantOption.IsSet)
                writer.WriteBoolean("constant", addContractRequestInputAbiInner.ConstantOption.Value!.Value);

            if (addContractRequestInputAbiInner.GasOption.IsSet)
                writer.WriteString("gas", addContractRequestInputAbiInner.Gas);

            if (addContractRequestInputAbiInner.InputsOption.IsSet)
            {
                writer.WritePropertyName("inputs");
                JsonSerializer.Serialize(writer, addContractRequestInputAbiInner.Inputs, jsonSerializerOptions);
            }
            if (addContractRequestInputAbiInner.NameOption.IsSet)
                writer.WriteString("name", addContractRequestInputAbiInner.Name);

            if (addContractRequestInputAbiInner.OutputsOption.IsSet)
            {
                writer.WritePropertyName("outputs");
                JsonSerializer.Serialize(writer, addContractRequestInputAbiInner.Outputs, jsonSerializerOptions);
            }
            if (addContractRequestInputAbiInner.PayableOption.IsSet)
                writer.WriteBoolean("payable", addContractRequestInputAbiInner.PayableOption.Value!.Value);

            if (addContractRequestInputAbiInner.StateMutabilityOption.IsSet)
                writer.WriteString("stateMutability", addContractRequestInputAbiInner.StateMutability);

            if (addContractRequestInputAbiInner.TypeOption.IsSet)
                writer.WriteString("type", addContractRequestInputAbiInner.Type);
        }
    }
}