// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationCommonActivityResponseDataInner
    /// </summary>
    public partial class AutomationCommonActivityResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationCommonActivityResponseDataInner" /> class.
        /// </summary>
        /// <param name="contract">contract</param>
        /// <param name="transaction">transaction</param>
        /// <param name="asset">asset</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="order">order</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public AutomationCommonActivityResponseDataInner(AutomationCommonActivityResponseDataInnerContract contract, AutomationCommonActivityResponseDataInnerTransaction transaction, AutomationCommonActivityResponseDataInnerAsset asset, Option<string> createdAt = default, Option<AutomationCommonActivityResponseDataInnerOrder> order = default, Option<TypeEnum?> type = default)
        {
            Contract = contract;
            Transaction = transaction;
            Asset = asset;
            CreatedAtOption = createdAt;
            OrderOption = order;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(TypeEnumJsonConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Ask for value: ask
            /// </summary>
            Ask = 1,

            /// <summary>
            /// Enum AskCancel for value: ask_cancel
            /// </summary>
            AskCancel = 2,

            /// <summary>
            /// Enum Bid for value: bid
            /// </summary>
            Bid = 3,

            /// <summary>
            /// Enum BidCancel for value: bid_cancel
            /// </summary>
            BidCancel = 4,

            /// <summary>
            /// Enum Sale for value: sale
            /// </summary>
            Sale = 5,

            /// <summary>
            /// Enum Mint for value: mint
            /// </summary>
            Mint = 6,

            /// <summary>
            /// Enum Transfer for value: transfer
            /// </summary>
            Transfer = 7
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("ask"))
                return TypeEnum.Ask;

            if (value.Equals("ask_cancel"))
                return TypeEnum.AskCancel;

            if (value.Equals("bid"))
                return TypeEnum.Bid;

            if (value.Equals("bid_cancel"))
                return TypeEnum.BidCancel;

            if (value.Equals("sale"))
                return TypeEnum.Sale;

            if (value.Equals("mint"))
                return TypeEnum.Mint;

            if (value.Equals("transfer"))
                return TypeEnum.Transfer;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ask"))
                return TypeEnum.Ask;

            if (value.Equals("ask_cancel"))
                return TypeEnum.AskCancel;

            if (value.Equals("bid"))
                return TypeEnum.Bid;

            if (value.Equals("bid_cancel"))
                return TypeEnum.BidCancel;

            if (value.Equals("sale"))
                return TypeEnum.Sale;

            if (value.Equals("mint"))
                return TypeEnum.Mint;

            if (value.Equals("transfer"))
                return TypeEnum.Transfer;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum? value)
        {
            if (value == null)
                return null;

            if (value == TypeEnum.Ask)
                return "ask";

            if (value == TypeEnum.AskCancel)
                return "ask_cancel";

            if (value == TypeEnum.Bid)
                return "bid";

            if (value == TypeEnum.BidCancel)
                return "bid_cancel";

            if (value == TypeEnum.Sale)
                return "sale";

            if (value == TypeEnum.Mint)
                return "mint";

            if (value == TypeEnum.Transfer)
                return "transfer";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Converts <see cref="TypeEnum"/> to and from the JSON value
        /// </summary>
        public static class TypeEnumValueConverter
        {
            /// <summary>
            /// Parses a given value to <see cref="TypeEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static TypeEnum FromString(string value)
            {
                    if (value.Equals("ask"))
                    return TypeEnum.Ask;

                    if (value.Equals("ask_cancel"))
                    return TypeEnum.AskCancel;

                    if (value.Equals("bid"))
                    return TypeEnum.Bid;

                    if (value.Equals("bid_cancel"))
                    return TypeEnum.BidCancel;

                    if (value.Equals("sale"))
                    return TypeEnum.Sale;

                    if (value.Equals("mint"))
                    return TypeEnum.Mint;

                    if (value.Equals("transfer"))
                    return TypeEnum.Transfer;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
            }

            /// <summary>
            /// Parses a given value to <see cref="TypeEnum"/>
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            public static TypeEnum? FromStringOrDefault(string value)
            {
                    if (value.Equals("ask"))
                    return TypeEnum.Ask;

                    if (value.Equals("ask_cancel"))
                    return TypeEnum.AskCancel;

                    if (value.Equals("bid"))
                    return TypeEnum.Bid;

                    if (value.Equals("bid_cancel"))
                    return TypeEnum.BidCancel;

                    if (value.Equals("sale"))
                    return TypeEnum.Sale;

                    if (value.Equals("mint"))
                    return TypeEnum.Mint;

                    if (value.Equals("transfer"))
                    return TypeEnum.Transfer;

            return null;
            }

            /// <summary>
            /// Converts the <see cref="TypeEnum"/> to the json value
            /// </summary>
            /// <param name="value"></param>
            /// <returns></returns>
            /// <exception cref="NotImplementedException"></exception>
            public static string ToJsonValue(TypeEnum value)
            {
                        if (value == TypeEnum.Ask)
                        return "ask";

                        if (value == TypeEnum.AskCancel)
                        return "ask_cancel";

                        if (value == TypeEnum.Bid)
                        return "bid";

                        if (value == TypeEnum.BidCancel)
                        return "bid_cancel";

                        if (value == TypeEnum.Sale)
                        return "sale";

                        if (value == TypeEnum.Mint)
                        return "mint";

                        if (value == TypeEnum.Transfer)
                        return "transfer";

                throw new NotImplementedException($"Value could not be handled: '{value}'");
            }
        }

        /// <summary>
        /// A Json converter for type <see cref="TypeEnum"/>
        /// </summary>
        /// <exception cref="NotImplementedException"></exception>
        public class TypeEnumJsonConverter : JsonConverter<TypeEnum>
        {
            /// <summary>
            /// Returns a TypeEnum from the Json object
            /// </summary>
            /// <param name="reader"></param>
            /// <param name="typeToConvert"></param>
            /// <param name="options"></param>
            /// <returns></returns>
            public override TypeEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
            {
                string rawValue = reader.GetString();

                TypeEnum? result = rawValue == null
                ? null
                : TypeEnumValueConverter.FromStringOrDefault(rawValue);

                if (result != null)
                return result.Value;

                throw new JsonException();
            }

            /// <summary>
            /// Writes the TypeEnum to the json writer
            /// </summary>
            /// <param name="writer"></param>
            /// <param name="typeEnum"></param>
            /// <param name="options"></param>
            public override void Write(Utf8JsonWriter writer, TypeEnum typeEnum, JsonSerializerOptions options)
            {
                writer.WriteStringValue(TypeEnumValueConverter.ToJsonValue(typeEnum));
            }
        }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TypeEnum?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [JsonPropertyName("contract")]
        public AutomationCommonActivityResponseDataInnerContract Contract { get; set; }

        /// <summary>
        /// Gets or Sets Transaction
        /// </summary>
        [JsonPropertyName("transaction")]
        public AutomationCommonActivityResponseDataInnerTransaction Transaction { get; set; }

        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [JsonPropertyName("asset")]
        public AutomationCommonActivityResponseDataInnerAsset Asset { get; set; }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public string CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AutomationCommonActivityResponseDataInnerOrder> OrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [JsonPropertyName("order")]
        public AutomationCommonActivityResponseDataInnerOrder Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationCommonActivityResponseDataInner {\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Transaction: ").Append(Transaction).Append("\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationCommonActivityResponseDataInner" />
    /// </summary>
    public class AutomationCommonActivityResponseDataInnerJsonConverter : JsonConverter<AutomationCommonActivityResponseDataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutomationCommonActivityResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationCommonActivityResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AutomationCommonActivityResponseDataInnerContract> contract = default;
            Option<AutomationCommonActivityResponseDataInnerTransaction> transaction = default;
            Option<AutomationCommonActivityResponseDataInnerAsset> asset = default;
            Option<string> createdAt = default;
            Option<AutomationCommonActivityResponseDataInnerOrder> order = default;
            Option<AutomationCommonActivityResponseDataInner.TypeEnum?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contract":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contract = new Option<AutomationCommonActivityResponseDataInnerContract>(JsonSerializer.Deserialize<AutomationCommonActivityResponseDataInnerContract>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "transaction":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                transaction = new Option<AutomationCommonActivityResponseDataInnerTransaction>(JsonSerializer.Deserialize<AutomationCommonActivityResponseDataInnerTransaction>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "asset":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                asset = new Option<AutomationCommonActivityResponseDataInnerAsset>(JsonSerializer.Deserialize<AutomationCommonActivityResponseDataInnerAsset>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            createdAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "order":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                order = new Option<AutomationCommonActivityResponseDataInnerOrder>(JsonSerializer.Deserialize<AutomationCommonActivityResponseDataInnerOrder>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<AutomationCommonActivityResponseDataInner.TypeEnum?>(AutomationCommonActivityResponseDataInner.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contract.IsSet)
                throw new ArgumentException("Property is required for class AutomationCommonActivityResponseDataInner.", nameof(contract));

            if (!transaction.IsSet)
                throw new ArgumentException("Property is required for class AutomationCommonActivityResponseDataInner.", nameof(transaction));

            if (!asset.IsSet)
                throw new ArgumentException("Property is required for class AutomationCommonActivityResponseDataInner.", nameof(asset));

            if (contract.IsSet && contract.Value == null)
                throw new ArgumentNullException(nameof(contract), "Property is not nullable for class AutomationCommonActivityResponseDataInner.");

            if (transaction.IsSet && transaction.Value == null)
                throw new ArgumentNullException(nameof(transaction), "Property is not nullable for class AutomationCommonActivityResponseDataInner.");

            if (asset.IsSet && asset.Value == null)
                throw new ArgumentNullException(nameof(asset), "Property is not nullable for class AutomationCommonActivityResponseDataInner.");

            return new AutomationCommonActivityResponseDataInner(contract.Value, transaction.Value, asset.Value, createdAt, order, type);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationCommonActivityResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationCommonActivityResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationCommonActivityResponseDataInner automationCommonActivityResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automationCommonActivityResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationCommonActivityResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationCommonActivityResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutomationCommonActivityResponseDataInner automationCommonActivityResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationCommonActivityResponseDataInner.Contract == null)
                throw new ArgumentNullException(nameof(automationCommonActivityResponseDataInner.Contract), "Property is required for class AutomationCommonActivityResponseDataInner.");

            if (automationCommonActivityResponseDataInner.Transaction == null)
                throw new ArgumentNullException(nameof(automationCommonActivityResponseDataInner.Transaction), "Property is required for class AutomationCommonActivityResponseDataInner.");

            if (automationCommonActivityResponseDataInner.Asset == null)
                throw new ArgumentNullException(nameof(automationCommonActivityResponseDataInner.Asset), "Property is required for class AutomationCommonActivityResponseDataInner.");

            writer.WritePropertyName("contract");
            JsonSerializer.Serialize(writer, automationCommonActivityResponseDataInner.Contract, jsonSerializerOptions);
            writer.WritePropertyName("transaction");
            JsonSerializer.Serialize(writer, automationCommonActivityResponseDataInner.Transaction, jsonSerializerOptions);
            writer.WritePropertyName("asset");
            JsonSerializer.Serialize(writer, automationCommonActivityResponseDataInner.Asset, jsonSerializerOptions);
            if (automationCommonActivityResponseDataInner.CreatedAtOption.IsSet)
            {
                if (automationCommonActivityResponseDataInner.CreatedAtOption.Value != null)
                {
                    writer.WriteString("createdAt", automationCommonActivityResponseDataInner.CreatedAt);
                }
                else
                {
                    writer.WriteNull("createdAt");
                }

            }

            if (automationCommonActivityResponseDataInner.OrderOption.IsSet)
                if (automationCommonActivityResponseDataInner.OrderOption.Value != null)
                {
                    writer.WritePropertyName("order");
                    JsonSerializer.Serialize(writer, automationCommonActivityResponseDataInner.Order, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("order");
            var typeRawValue = AutomationCommonActivityResponseDataInner.TypeEnumToJsonValue(automationCommonActivityResponseDataInner.TypeOption.Value.Value);
            if (typeRawValue != null)
                writer.WriteString("type", typeRawValue);
            else
                writer.WriteNull("type");
        }
    }
}