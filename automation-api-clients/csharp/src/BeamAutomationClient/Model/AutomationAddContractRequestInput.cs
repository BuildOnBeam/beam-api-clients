// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationAddContractRequestInput
    /// </summary>
    public partial class AutomationAddContractRequestInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationAddContractRequestInput" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="chainId">chainId</param>
        /// <param name="name">name</param>
        /// <param name="abi">The ABI of the contract. If not provided, one will be taken from Block Explorer Verification Source.</param>
        [JsonConstructor]
        public AutomationAddContractRequestInput(string address, int chainId, string name, Option<Object> abi = default)
        {
            Address = address;
            ChainId = chainId;
            Name = name;
            AbiOption = abi;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public int ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of Abi
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> AbiOption { get; private set; }

        /// <summary>
        /// The ABI of the contract. If not provided, one will be taken from Block Explorer Verification Source.
        /// </summary>
        /// <value>The ABI of the contract. If not provided, one will be taken from Block Explorer Verification Source.</value>
        [JsonPropertyName("abi")]
        public Object Abi { get { return this.AbiOption; } set { this.AbiOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationAddContractRequestInput {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Abi: ").Append(Abi).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationAddContractRequestInput" />
    /// </summary>
    public class AutomationAddContractRequestInputJsonConverter : JsonConverter<AutomationAddContractRequestInput>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutomationAddContractRequestInput" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationAddContractRequestInput Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> address = default;
            Option<int?> chainId = default;
            Option<string> name = default;
            Option<Object> abi = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "abi":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                abi = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!address.IsSet)
                throw new ArgumentException("Property is required for class AutomationAddContractRequestInput.", nameof(address));

            if (!chainId.IsSet)
                throw new ArgumentException("Property is required for class AutomationAddContractRequestInput.", nameof(chainId));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AutomationAddContractRequestInput.", nameof(name));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class AutomationAddContractRequestInput.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class AutomationAddContractRequestInput.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AutomationAddContractRequestInput.");

            return new AutomationAddContractRequestInput(address.Value, chainId.Value.Value, name.Value, abi);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationAddContractRequestInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationAddContractRequestInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationAddContractRequestInput automationAddContractRequestInput, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automationAddContractRequestInput, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationAddContractRequestInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationAddContractRequestInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutomationAddContractRequestInput automationAddContractRequestInput, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationAddContractRequestInput.Address == null)
                throw new ArgumentNullException(nameof(automationAddContractRequestInput.Address), "Property is required for class AutomationAddContractRequestInput.");

            if (automationAddContractRequestInput.Name == null)
                throw new ArgumentNullException(nameof(automationAddContractRequestInput.Name), "Property is required for class AutomationAddContractRequestInput.");

            writer.WriteString("address", automationAddContractRequestInput.Address);

            writer.WriteNumber("chainId", automationAddContractRequestInput.ChainId);

            writer.WriteString("name", automationAddContractRequestInput.Name);

            if (automationAddContractRequestInput.AbiOption.IsSet)
                if (automationAddContractRequestInput.AbiOption.Value != null)
                {
                    writer.WritePropertyName("abi");
                    JsonSerializer.Serialize(writer, automationAddContractRequestInput.Abi, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("abi");
        }
    }
}