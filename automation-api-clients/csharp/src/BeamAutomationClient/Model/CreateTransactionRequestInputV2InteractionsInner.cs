// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// CreateTransactionRequestInputV2InteractionsInner
    /// </summary>
    public partial class CreateTransactionRequestInputV2InteractionsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionRequestInputV2InteractionsInner" /> class.
        /// </summary>
        /// <param name="contractAddress">contractAddress</param>
        /// <param name="functionName">functionName</param>
        /// <param name="functionArgs">functionArgs</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public CreateTransactionRequestInputV2InteractionsInner(string contractAddress, string functionName, Option<List<Object>?> functionArgs = default, Option<string?> value = default)
        {
            ContractAddress = contractAddress;
            FunctionName = functionName;
            FunctionArgsOption = functionArgs;
            ValueOption = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [JsonPropertyName("contractAddress")]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets FunctionName
        /// </summary>
        [JsonPropertyName("functionName")]
        public string FunctionName { get; set; }

        /// <summary>
        /// Used to track the state of FunctionArgs
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> FunctionArgsOption { get; private set; }

        /// <summary>
        /// Gets or Sets FunctionArgs
        /// </summary>
        [JsonPropertyName("functionArgs")]
        public List<Object>? FunctionArgs { get { return this. FunctionArgsOption; } set { this.FunctionArgsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Value
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string? Value { get { return this. ValueOption; } set { this.ValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransactionRequestInputV2InteractionsInner {\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  FunctionName: ").Append(FunctionName).Append("\n");
            sb.Append("  FunctionArgs: ").Append(FunctionArgs).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTransactionRequestInputV2InteractionsInner" />
    /// </summary>
    public class CreateTransactionRequestInputV2InteractionsInnerJsonConverter : JsonConverter<CreateTransactionRequestInputV2InteractionsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateTransactionRequestInputV2InteractionsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTransactionRequestInputV2InteractionsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> contractAddress = default;
            Option<string?> functionName = default;
            Option<List<Object>?> functionArgs = default;
            Option<string?> value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contractAddress":
                            contractAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "functionName":
                            functionName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "functionArgs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                functionArgs = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "value":
                            value = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contractAddress.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequestInputV2InteractionsInner.", nameof(contractAddress));

            if (!functionName.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionRequestInputV2InteractionsInner.", nameof(functionName));

            if (contractAddress.IsSet && contractAddress.Value == null)
                throw new ArgumentNullException(nameof(contractAddress), "Property is not nullable for class CreateTransactionRequestInputV2InteractionsInner.");

            if (functionName.IsSet && functionName.Value == null)
                throw new ArgumentNullException(nameof(functionName), "Property is not nullable for class CreateTransactionRequestInputV2InteractionsInner.");

            if (functionArgs.IsSet && functionArgs.Value == null)
                throw new ArgumentNullException(nameof(functionArgs), "Property is not nullable for class CreateTransactionRequestInputV2InteractionsInner.");

            if (value.IsSet && value.Value == null)
                throw new ArgumentNullException(nameof(value), "Property is not nullable for class CreateTransactionRequestInputV2InteractionsInner.");

            return new CreateTransactionRequestInputV2InteractionsInner(contractAddress.Value!, functionName.Value!, functionArgs, value);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTransactionRequestInputV2InteractionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTransactionRequestInputV2InteractionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTransactionRequestInputV2InteractionsInner createTransactionRequestInputV2InteractionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createTransactionRequestInputV2InteractionsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTransactionRequestInputV2InteractionsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTransactionRequestInputV2InteractionsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateTransactionRequestInputV2InteractionsInner createTransactionRequestInputV2InteractionsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createTransactionRequestInputV2InteractionsInner.ContractAddress == null)
                throw new ArgumentNullException(nameof(createTransactionRequestInputV2InteractionsInner.ContractAddress), "Property is required for class CreateTransactionRequestInputV2InteractionsInner.");

            if (createTransactionRequestInputV2InteractionsInner.FunctionName == null)
                throw new ArgumentNullException(nameof(createTransactionRequestInputV2InteractionsInner.FunctionName), "Property is required for class CreateTransactionRequestInputV2InteractionsInner.");

            if (createTransactionRequestInputV2InteractionsInner.FunctionArgsOption.IsSet && createTransactionRequestInputV2InteractionsInner.FunctionArgs == null)
                throw new ArgumentNullException(nameof(createTransactionRequestInputV2InteractionsInner.FunctionArgs), "Property is required for class CreateTransactionRequestInputV2InteractionsInner.");

            if (createTransactionRequestInputV2InteractionsInner.ValueOption.IsSet && createTransactionRequestInputV2InteractionsInner.Value == null)
                throw new ArgumentNullException(nameof(createTransactionRequestInputV2InteractionsInner.Value), "Property is required for class CreateTransactionRequestInputV2InteractionsInner.");

            writer.WriteString("contractAddress", createTransactionRequestInputV2InteractionsInner.ContractAddress);

            writer.WriteString("functionName", createTransactionRequestInputV2InteractionsInner.FunctionName);

            if (createTransactionRequestInputV2InteractionsInner.FunctionArgsOption.IsSet)
            {
                writer.WritePropertyName("functionArgs");
                JsonSerializer.Serialize(writer, createTransactionRequestInputV2InteractionsInner.FunctionArgs, jsonSerializerOptions);
            }
            if (createTransactionRequestInputV2InteractionsInner.ValueOption.IsSet)
                writer.WriteString("value", createTransactionRequestInputV2InteractionsInner.Value);
        }
    }
}