// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// GetAssetListingsResponseV2DataInner
    /// </summary>
    public partial class GetAssetListingsResponseV2DataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetListingsResponseV2DataInner" /> class.
        /// </summary>
        /// <param name="assetAddress">assetAddress</param>
        /// <param name="assetId">assetId</param>
        /// <param name="contractKind">contractKind</param>
        /// <param name="id">id</param>
        /// <param name="maker">maker</param>
        /// <param name="side">side</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="expiresAt">expiresAt</param>
        /// <param name="price">price</param>
        /// <param name="quantityFilled">quantityFilled</param>
        /// <param name="quantityRemaining">quantityRemaining</param>
        /// <param name="status">status</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="validFrom">validFrom</param>
        /// <param name="validUntil">validUntil</param>
        [JsonConstructor]
        public GetAssetListingsResponseV2DataInner(string assetAddress, string assetId, string contractKind, string id, string maker, string side, Option<Object?> createdAt = default, Option<Object?> expiresAt = default, Option<GetAssetListingsResponseV2DataInnerPrice?> price = default, Option<decimal?> quantityFilled = default, Option<decimal?> quantityRemaining = default, Option<StatusEnum?> status = default, Option<Object?> updatedAt = default, Option<Object?> validFrom = default, Option<Object?> validUntil = default)
        {
            AssetAddress = assetAddress;
            AssetId = assetId;
            ContractKind = contractKind;
            Id = id;
            Maker = maker;
            Side = side;
            CreatedAtOption = createdAt;
            ExpiresAtOption = expiresAt;
            PriceOption = price;
            QuantityFilledOption = quantityFilled;
            QuantityRemainingOption = quantityRemaining;
            StatusOption = status;
            UpdatedAtOption = updatedAt;
            ValidFromOption = validFrom;
            ValidUntilOption = validUntil;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            Active = 1,

            /// <summary>
            /// Enum Inactive for value: inactive
            /// </summary>
            Inactive = 2,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            Expired = 3,

            /// <summary>
            /// Enum Canceled for value: canceled
            /// </summary>
            Canceled = 4,

            /// <summary>
            /// Enum Filled for value: filled
            /// </summary>
            Filled = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("active"))
                return StatusEnum.Active;

            if (value.Equals("inactive"))
                return StatusEnum.Inactive;

            if (value.Equals("expired"))
                return StatusEnum.Expired;

            if (value.Equals("canceled"))
                return StatusEnum.Canceled;

            if (value.Equals("filled"))
                return StatusEnum.Filled;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("active"))
                return StatusEnum.Active;

            if (value.Equals("inactive"))
                return StatusEnum.Inactive;

            if (value.Equals("expired"))
                return StatusEnum.Expired;

            if (value.Equals("canceled"))
                return StatusEnum.Canceled;

            if (value.Equals("filled"))
                return StatusEnum.Filled;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == null)
                return null;

            if (value == StatusEnum.Active)
                return "active";

            if (value == StatusEnum.Inactive)
                return "inactive";

            if (value == StatusEnum.Expired)
                return "expired";

            if (value == StatusEnum.Canceled)
                return "canceled";

            if (value == StatusEnum.Filled)
                return "filled";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Gets or Sets AssetAddress
        /// </summary>
        [JsonPropertyName("assetAddress")]
        public string AssetAddress { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets ContractKind
        /// </summary>
        [JsonPropertyName("contractKind")]
        public string ContractKind { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Maker
        /// </summary>
        [JsonPropertyName("maker")]
        public string Maker { get; set; }

        /// <summary>
        /// Gets or Sets Side
        /// </summary>
        [JsonPropertyName("side")]
        public string Side { get; set; }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public Object? CreatedAt { get { return this. CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpiresAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ExpiresAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public Object? ExpiresAt { get { return this. ExpiresAtOption; } set { this.ExpiresAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Price
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetAssetListingsResponseV2DataInnerPrice?> PriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public GetAssetListingsResponseV2DataInnerPrice? Price { get { return this. PriceOption; } set { this.PriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of QuantityFilled
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> QuantityFilledOption { get; private set; }

        /// <summary>
        /// Gets or Sets QuantityFilled
        /// </summary>
        [JsonPropertyName("quantityFilled")]
        public decimal? QuantityFilled { get { return this. QuantityFilledOption; } set { this.QuantityFilledOption = new(value); } }

        /// <summary>
        /// Used to track the state of QuantityRemaining
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> QuantityRemainingOption { get; private set; }

        /// <summary>
        /// Gets or Sets QuantityRemaining
        /// </summary>
        [JsonPropertyName("quantityRemaining")]
        public decimal? QuantityRemaining { get { return this. QuantityRemainingOption; } set { this.QuantityRemainingOption = new(value); } }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public Object? UpdatedAt { get { return this. UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValidFrom
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ValidFromOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValidFrom
        /// </summary>
        [JsonPropertyName("validFrom")]
        public Object? ValidFrom { get { return this. ValidFromOption; } set { this.ValidFromOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValidUntil
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ValidUntilOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValidUntil
        /// </summary>
        [JsonPropertyName("validUntil")]
        public Object? ValidUntil { get { return this. ValidUntilOption; } set { this.ValidUntilOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetListingsResponseV2DataInner {\n");
            sb.Append("  AssetAddress: ").Append(AssetAddress).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  ContractKind: ").Append(ContractKind).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Maker: ").Append(Maker).Append("\n");
            sb.Append("  Side: ").Append(Side).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  QuantityFilled: ").Append(QuantityFilled).Append("\n");
            sb.Append("  QuantityRemaining: ").Append(QuantityRemaining).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  ValidFrom: ").Append(ValidFrom).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetListingsResponseV2DataInner" />
    /// </summary>
    public class GetAssetListingsResponseV2DataInnerJsonConverter : JsonConverter<GetAssetListingsResponseV2DataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetListingsResponseV2DataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetListingsResponseV2DataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> assetAddress = default;
            Option<string?> assetId = default;
            Option<string?> contractKind = default;
            Option<string?> id = default;
            Option<string?> maker = default;
            Option<string?> side = default;
            Option<Object?> createdAt = default;
            Option<Object?> expiresAt = default;
            Option<GetAssetListingsResponseV2DataInnerPrice?> price = default;
            Option<decimal?> quantityFilled = default;
            Option<decimal?> quantityRemaining = default;
            Option<GetAssetListingsResponseV2DataInner.StatusEnum?> status = default;
            Option<Object?> updatedAt = default;
            Option<Object?> validFrom = default;
            Option<Object?> validUntil = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assetAddress":
                            assetAddress = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assetId":
                            assetId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contractKind":
                            contractKind = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "maker":
                            maker = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "side":
                            side = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "expiresAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresAt = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "price":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                price = new Option<GetAssetListingsResponseV2DataInnerPrice?>(JsonSerializer.Deserialize<GetAssetListingsResponseV2DataInnerPrice>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "quantityFilled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityFilled = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "quantityRemaining":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityRemaining = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<GetAssetListingsResponseV2DataInner.StatusEnum?>(GetAssetListingsResponseV2DataInner.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "validFrom":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validFrom = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "validUntil":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validUntil = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assetAddress.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseV2DataInner.", nameof(assetAddress));

            if (!assetId.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseV2DataInner.", nameof(assetId));

            if (!contractKind.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseV2DataInner.", nameof(contractKind));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseV2DataInner.", nameof(id));

            if (!maker.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseV2DataInner.", nameof(maker));

            if (!side.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseV2DataInner.", nameof(side));

            if (assetAddress.IsSet && assetAddress.Value == null)
                throw new ArgumentNullException(nameof(assetAddress), "Property is not nullable for class GetAssetListingsResponseV2DataInner.");

            if (assetId.IsSet && assetId.Value == null)
                throw new ArgumentNullException(nameof(assetId), "Property is not nullable for class GetAssetListingsResponseV2DataInner.");

            if (contractKind.IsSet && contractKind.Value == null)
                throw new ArgumentNullException(nameof(contractKind), "Property is not nullable for class GetAssetListingsResponseV2DataInner.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetAssetListingsResponseV2DataInner.");

            if (maker.IsSet && maker.Value == null)
                throw new ArgumentNullException(nameof(maker), "Property is not nullable for class GetAssetListingsResponseV2DataInner.");

            if (side.IsSet && side.Value == null)
                throw new ArgumentNullException(nameof(side), "Property is not nullable for class GetAssetListingsResponseV2DataInner.");

            if (quantityFilled.IsSet && quantityFilled.Value == null)
                throw new ArgumentNullException(nameof(quantityFilled), "Property is not nullable for class GetAssetListingsResponseV2DataInner.");

            if (quantityRemaining.IsSet && quantityRemaining.Value == null)
                throw new ArgumentNullException(nameof(quantityRemaining), "Property is not nullable for class GetAssetListingsResponseV2DataInner.");

            return new GetAssetListingsResponseV2DataInner(assetAddress.Value!, assetId.Value!, contractKind.Value!, id.Value!, maker.Value!, side.Value!, createdAt, expiresAt, price, quantityFilled, quantityRemaining, status, updatedAt, validFrom, validUntil);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetListingsResponseV2DataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetListingsResponseV2DataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetListingsResponseV2DataInner getAssetListingsResponseV2DataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetListingsResponseV2DataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetListingsResponseV2DataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetListingsResponseV2DataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetListingsResponseV2DataInner getAssetListingsResponseV2DataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAssetListingsResponseV2DataInner.AssetAddress == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseV2DataInner.AssetAddress), "Property is required for class GetAssetListingsResponseV2DataInner.");

            if (getAssetListingsResponseV2DataInner.AssetId == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseV2DataInner.AssetId), "Property is required for class GetAssetListingsResponseV2DataInner.");

            if (getAssetListingsResponseV2DataInner.ContractKind == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseV2DataInner.ContractKind), "Property is required for class GetAssetListingsResponseV2DataInner.");

            if (getAssetListingsResponseV2DataInner.Id == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseV2DataInner.Id), "Property is required for class GetAssetListingsResponseV2DataInner.");

            if (getAssetListingsResponseV2DataInner.Maker == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseV2DataInner.Maker), "Property is required for class GetAssetListingsResponseV2DataInner.");

            if (getAssetListingsResponseV2DataInner.Side == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseV2DataInner.Side), "Property is required for class GetAssetListingsResponseV2DataInner.");

            writer.WriteString("assetAddress", getAssetListingsResponseV2DataInner.AssetAddress);

            writer.WriteString("assetId", getAssetListingsResponseV2DataInner.AssetId);

            writer.WriteString("contractKind", getAssetListingsResponseV2DataInner.ContractKind);

            writer.WriteString("id", getAssetListingsResponseV2DataInner.Id);

            writer.WriteString("maker", getAssetListingsResponseV2DataInner.Maker);

            writer.WriteString("side", getAssetListingsResponseV2DataInner.Side);

            if (getAssetListingsResponseV2DataInner.CreatedAtOption.IsSet)
                if (getAssetListingsResponseV2DataInner.CreatedAtOption.Value != null)
                {
                    writer.WritePropertyName("createdAt");
                    JsonSerializer.Serialize(writer, getAssetListingsResponseV2DataInner.CreatedAt, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("createdAt");
            if (getAssetListingsResponseV2DataInner.ExpiresAtOption.IsSet)
                if (getAssetListingsResponseV2DataInner.ExpiresAtOption.Value != null)
                {
                    writer.WritePropertyName("expiresAt");
                    JsonSerializer.Serialize(writer, getAssetListingsResponseV2DataInner.ExpiresAt, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("expiresAt");
            if (getAssetListingsResponseV2DataInner.PriceOption.IsSet)
                if (getAssetListingsResponseV2DataInner.PriceOption.Value != null)
                {
                    writer.WritePropertyName("price");
                    JsonSerializer.Serialize(writer, getAssetListingsResponseV2DataInner.Price, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("price");
            if (getAssetListingsResponseV2DataInner.QuantityFilledOption.IsSet)
                writer.WriteNumber("quantityFilled", getAssetListingsResponseV2DataInner.QuantityFilledOption.Value!.Value);

            if (getAssetListingsResponseV2DataInner.QuantityRemainingOption.IsSet)
                writer.WriteNumber("quantityRemaining", getAssetListingsResponseV2DataInner.QuantityRemainingOption.Value!.Value);

            var statusRawValue = GetAssetListingsResponseV2DataInner.StatusEnumToJsonValue(getAssetListingsResponseV2DataInner.StatusOption.Value!.Value);
            if (statusRawValue != null)
                writer.WriteString("status", statusRawValue);
            else
                writer.WriteNull("status");

            if (getAssetListingsResponseV2DataInner.UpdatedAtOption.IsSet)
                if (getAssetListingsResponseV2DataInner.UpdatedAtOption.Value != null)
                {
                    writer.WritePropertyName("updatedAt");
                    JsonSerializer.Serialize(writer, getAssetListingsResponseV2DataInner.UpdatedAt, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("updatedAt");
            if (getAssetListingsResponseV2DataInner.ValidFromOption.IsSet)
                if (getAssetListingsResponseV2DataInner.ValidFromOption.Value != null)
                {
                    writer.WritePropertyName("validFrom");
                    JsonSerializer.Serialize(writer, getAssetListingsResponseV2DataInner.ValidFrom, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("validFrom");
            if (getAssetListingsResponseV2DataInner.ValidUntilOption.IsSet)
                if (getAssetListingsResponseV2DataInner.ValidUntilOption.Value != null)
                {
                    writer.WritePropertyName("validUntil");
                    JsonSerializer.Serialize(writer, getAssetListingsResponseV2DataInner.ValidUntil, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("validUntil");
        }
    }
}