// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// Check503Response
    /// </summary>
    public partial class Check503Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Check503Response" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="info">info</param>
        /// <param name="error">error</param>
        /// <param name="details">details</param>
        [JsonConstructor]
        public Check503Response(Option<string> status = default, Option<Dictionary<string, Check200ResponseInfoValue>> info = default, Option<Dictionary<string, Check200ResponseInfoValue>> error = default, Option<Dictionary<string, Check200ResponseInfoValue>> details = default)
        {
            StatusOption = status;
            InfoOption = info;
            ErrorOption = error;
            DetailsOption = details;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StatusOption { get; private set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /* <example>error</example> */
        [JsonPropertyName("status")]
        public string Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of Info
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Check200ResponseInfoValue>> InfoOption { get; private set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        /* <example>{&quot;database&quot;:{&quot;status&quot;:&quot;up&quot;}}</example> */
        [JsonPropertyName("info")]
        public Dictionary<string, Check200ResponseInfoValue> Info { get { return this.InfoOption; } set { this.InfoOption = new(value); } }

        /// <summary>
        /// Used to track the state of Error
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Check200ResponseInfoValue>> ErrorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        /* <example>{&quot;redis&quot;:{&quot;status&quot;:&quot;down&quot;,&quot;message&quot;:&quot;Could not connect&quot;}}</example> */
        [JsonPropertyName("error")]
        public Dictionary<string, Check200ResponseInfoValue> Error { get { return this.ErrorOption; } set { this.ErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Details
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Check200ResponseInfoValue>> DetailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        /* <example>{&quot;database&quot;:{&quot;status&quot;:&quot;up&quot;},&quot;redis&quot;:{&quot;status&quot;:&quot;down&quot;,&quot;message&quot;:&quot;Could not connect&quot;}}</example> */
        [JsonPropertyName("details")]
        public Dictionary<string, Check200ResponseInfoValue> Details { get { return this.DetailsOption; } set { this.DetailsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Check503Response {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Check503Response" />
    /// </summary>
    public class Check503ResponseJsonConverter : JsonConverter<Check503Response>
    {
        /// <summary>
        /// Deserializes json to <see cref="Check503Response" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Check503Response Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> status = default;
            Option<Dictionary<string, Check200ResponseInfoValue>> info = default;
            Option<Dictionary<string, Check200ResponseInfoValue>> error = default;
            Option<Dictionary<string, Check200ResponseInfoValue>> details = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            status = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "info":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                info = new Option<Dictionary<string, Check200ResponseInfoValue>>(JsonSerializer.Deserialize<Dictionary<string, Check200ResponseInfoValue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "error":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                error = new Option<Dictionary<string, Check200ResponseInfoValue>>(JsonSerializer.Deserialize<Dictionary<string, Check200ResponseInfoValue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "details":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                details = new Option<Dictionary<string, Check200ResponseInfoValue>>(JsonSerializer.Deserialize<Dictionary<string, Check200ResponseInfoValue>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class Check503Response.");

            if (details.IsSet && details.Value == null)
                throw new ArgumentNullException(nameof(details), "Property is not nullable for class Check503Response.");

            return new Check503Response(status, info, error, details);
        }

        /// <summary>
        /// Serializes a <see cref="Check503Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="check503Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Check503Response check503Response, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, check503Response, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Check503Response" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="check503Response"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Check503Response check503Response, JsonSerializerOptions jsonSerializerOptions)
        {
            if (check503Response.StatusOption.IsSet && check503Response.Status == null)
                throw new ArgumentNullException(nameof(check503Response.Status), "Property is required for class Check503Response.");

            if (check503Response.DetailsOption.IsSet && check503Response.Details == null)
                throw new ArgumentNullException(nameof(check503Response.Details), "Property is required for class Check503Response.");

            if (check503Response.StatusOption.IsSet)
            {
                writer.WriteString("status", check503Response.Status);
            }

            if (check503Response.InfoOption.IsSet)
                if (check503Response.InfoOption.Value != null)
                {
                    writer.WritePropertyName("info");
                    JsonSerializer.Serialize(writer, check503Response.Info, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("info");
            if (check503Response.ErrorOption.IsSet)
                if (check503Response.ErrorOption.Value != null)
                {
                    writer.WritePropertyName("error");
                    JsonSerializer.Serialize(writer, check503Response.Error, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("error");
            if (check503Response.DetailsOption.IsSet)
            {
                writer.WritePropertyName("details");
                JsonSerializer.Serialize(writer, check503Response.Details, jsonSerializerOptions);
            }
        }
    }
}