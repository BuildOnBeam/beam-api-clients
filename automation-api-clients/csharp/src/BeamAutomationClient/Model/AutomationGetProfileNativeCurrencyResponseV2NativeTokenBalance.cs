// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance
    /// </summary>
    public partial class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="symbol">symbol</param>
        /// <param name="decimals">decimals</param>
        /// <param name="chainId">chainId</param>
        /// <param name="balance">balance</param>
        /// <param name="logoUri">logoUri</param>
        [JsonConstructor]
        public AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance(string name, string symbol, decimal decimals, long chainId, string balance, Option<string> logoUri = default)
        {
            Name = name;
            Symbol = symbol;
            Decimals = decimals;
            ChainId = chainId;
            Balance = balance;
            LogoUriOption = logoUri;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [JsonPropertyName("symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets Decimals
        /// </summary>
        [JsonPropertyName("decimals")]
        public decimal Decimals { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public long ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [JsonPropertyName("balance")]
        public string Balance { get; set; }

        /// <summary>
        /// Used to track the state of LogoUri
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LogoUriOption { get; private set; }

        /// <summary>
        /// Gets or Sets LogoUri
        /// </summary>
        [JsonPropertyName("logoUri")]
        public string LogoUri { get { return this.LogoUriOption; } set { this.LogoUriOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Decimals: ").Append(Decimals).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  LogoUri: ").Append(LogoUri).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance" />
    /// </summary>
    public class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalanceJsonConverter : JsonConverter<AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<string> symbol = default;
            Option<decimal?> decimals = default;
            Option<long?> chainId = default;
            Option<string> balance = default;
            Option<string> logoUri = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "symbol":
                            symbol = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "decimals":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                decimals = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "balance":
                            balance = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "logoUri":
                            logoUri = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.", nameof(name));

            if (!symbol.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.", nameof(symbol));

            if (!decimals.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.", nameof(decimals));

            if (!chainId.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.", nameof(chainId));

            if (!balance.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.", nameof(balance));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            if (symbol.IsSet && symbol.Value == null)
                throw new ArgumentNullException(nameof(symbol), "Property is not nullable for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            if (decimals.IsSet && decimals.Value == null)
                throw new ArgumentNullException(nameof(decimals), "Property is not nullable for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            if (balance.IsSet && balance.Value == null)
                throw new ArgumentNullException(nameof(balance), "Property is not nullable for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            if (logoUri.IsSet && logoUri.Value == null)
                throw new ArgumentNullException(nameof(logoUri), "Property is not nullable for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            return new AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance(name.Value, symbol.Value, decimals.Value.Value, chainId.Value.Value, balance.Value, logoUri);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationGetProfileNativeCurrencyResponseV2NativeTokenBalance"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance automationGetProfileNativeCurrencyResponseV2NativeTokenBalance, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automationGetProfileNativeCurrencyResponseV2NativeTokenBalance, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationGetProfileNativeCurrencyResponseV2NativeTokenBalance"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance automationGetProfileNativeCurrencyResponseV2NativeTokenBalance, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Name == null)
                throw new ArgumentNullException(nameof(automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Name), "Property is required for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            if (automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Symbol == null)
                throw new ArgumentNullException(nameof(automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Symbol), "Property is required for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            if (automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Balance == null)
                throw new ArgumentNullException(nameof(automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Balance), "Property is required for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            if (automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.LogoUriOption.IsSet && automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.LogoUri == null)
                throw new ArgumentNullException(nameof(automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.LogoUri), "Property is required for class AutomationGetProfileNativeCurrencyResponseV2NativeTokenBalance.");

            writer.WriteString("name", automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Name);

            writer.WriteString("symbol", automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Symbol);

            writer.WriteNumber("decimals", automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Decimals);

            writer.WriteNumber("chainId", automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.ChainId);

            writer.WriteString("balance", automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.Balance);

            if (automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.LogoUriOption.IsSet)
            {
                writer.WriteString("logoUri", automationGetProfileNativeCurrencyResponseV2NativeTokenBalance.LogoUri);
            }
        }
    }
}