// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationGetAssetListingsResponseV2DataInnerPriceAmount
    /// </summary>
    public partial class AutomationGetAssetListingsResponseV2DataInnerPriceAmount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationGetAssetListingsResponseV2DataInnerPriceAmount" /> class.
        /// </summary>
        /// <param name="raw">raw</param>
        /// <param name="decimal">decimal</param>
        /// <param name="usd">usd</param>
        /// <param name="native">native</param>
        [JsonConstructor]
        public AutomationGetAssetListingsResponseV2DataInnerPriceAmount(string raw, decimal @decimal, decimal usd, decimal native)
        {
            Raw = raw;
            Decimal = @decimal;
            Usd = usd;
            Native = native;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Raw
        /// </summary>
        [JsonPropertyName("raw")]
        public string Raw { get; set; }

        /// <summary>
        /// Gets or Sets Decimal
        /// </summary>
        [JsonPropertyName("decimal")]
        public decimal Decimal { get; set; }

        /// <summary>
        /// Gets or Sets Usd
        /// </summary>
        [JsonPropertyName("usd")]
        public decimal Usd { get; set; }

        /// <summary>
        /// Gets or Sets Native
        /// </summary>
        [JsonPropertyName("native")]
        public decimal Native { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationGetAssetListingsResponseV2DataInnerPriceAmount {\n");
            sb.Append("  Raw: ").Append(Raw).Append("\n");
            sb.Append("  Decimal: ").Append(Decimal).Append("\n");
            sb.Append("  Usd: ").Append(Usd).Append("\n");
            sb.Append("  Native: ").Append(Native).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationGetAssetListingsResponseV2DataInnerPriceAmount" />
    /// </summary>
    public class AutomationGetAssetListingsResponseV2DataInnerPriceAmountJsonConverter : JsonConverter<AutomationGetAssetListingsResponseV2DataInnerPriceAmount>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutomationGetAssetListingsResponseV2DataInnerPriceAmount" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationGetAssetListingsResponseV2DataInnerPriceAmount Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> raw = default;
            Option<decimal?> varDecimal = default;
            Option<decimal?> usd = default;
            Option<decimal?> native = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "raw":
                            raw = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "decimal":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varDecimal = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "usd":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                usd = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "native":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                native = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!raw.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetAssetListingsResponseV2DataInnerPriceAmount.", nameof(raw));

            if (!varDecimal.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetAssetListingsResponseV2DataInnerPriceAmount.", nameof(varDecimal));

            if (!usd.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetAssetListingsResponseV2DataInnerPriceAmount.", nameof(usd));

            if (!native.IsSet)
                throw new ArgumentException("Property is required for class AutomationGetAssetListingsResponseV2DataInnerPriceAmount.", nameof(native));

            if (raw.IsSet && raw.Value == null)
                throw new ArgumentNullException(nameof(raw), "Property is not nullable for class AutomationGetAssetListingsResponseV2DataInnerPriceAmount.");

            if (varDecimal.IsSet && varDecimal.Value == null)
                throw new ArgumentNullException(nameof(varDecimal), "Property is not nullable for class AutomationGetAssetListingsResponseV2DataInnerPriceAmount.");

            if (usd.IsSet && usd.Value == null)
                throw new ArgumentNullException(nameof(usd), "Property is not nullable for class AutomationGetAssetListingsResponseV2DataInnerPriceAmount.");

            if (native.IsSet && native.Value == null)
                throw new ArgumentNullException(nameof(native), "Property is not nullable for class AutomationGetAssetListingsResponseV2DataInnerPriceAmount.");

            return new AutomationGetAssetListingsResponseV2DataInnerPriceAmount(raw.Value, varDecimal.Value.Value, usd.Value.Value, native.Value.Value);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationGetAssetListingsResponseV2DataInnerPriceAmount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationGetAssetListingsResponseV2DataInnerPriceAmount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationGetAssetListingsResponseV2DataInnerPriceAmount automationGetAssetListingsResponseV2DataInnerPriceAmount, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automationGetAssetListingsResponseV2DataInnerPriceAmount, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationGetAssetListingsResponseV2DataInnerPriceAmount" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationGetAssetListingsResponseV2DataInnerPriceAmount"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutomationGetAssetListingsResponseV2DataInnerPriceAmount automationGetAssetListingsResponseV2DataInnerPriceAmount, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationGetAssetListingsResponseV2DataInnerPriceAmount.Raw == null)
                throw new ArgumentNullException(nameof(automationGetAssetListingsResponseV2DataInnerPriceAmount.Raw), "Property is required for class AutomationGetAssetListingsResponseV2DataInnerPriceAmount.");

            writer.WriteString("raw", automationGetAssetListingsResponseV2DataInnerPriceAmount.Raw);

            writer.WriteNumber("decimal", automationGetAssetListingsResponseV2DataInnerPriceAmount.Decimal);

            writer.WriteNumber("usd", automationGetAssetListingsResponseV2DataInnerPriceAmount.Usd);

            writer.WriteNumber("native", automationGetAssetListingsResponseV2DataInnerPriceAmount.Native);
        }
    }
}