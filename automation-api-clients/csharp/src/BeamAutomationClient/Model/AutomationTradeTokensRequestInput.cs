// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationTradeTokensRequestInput
    /// </summary>
    public partial class AutomationTradeTokensRequestInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationTradeTokensRequestInput" /> class.
        /// </summary>
        /// <param name="initiator">initiator</param>
        /// <param name="counterparty">counterparty</param>
        /// <param name="sponsor">sponsor (default to true)</param>
        /// <param name="policyId">policyId</param>
        /// <param name="chainId">chainId (default to 13337)</param>
        [JsonConstructor]
        public AutomationTradeTokensRequestInput(AutomationTradeTokensRequestInputInitiator initiator, AutomationTradeTokensRequestInputInitiator counterparty, Option<bool?> sponsor = default, Option<string> policyId = default, Option<long?> chainId = default)
        {
            Initiator = initiator;
            Counterparty = counterparty;
            SponsorOption = sponsor;
            PolicyIdOption = policyId;
            ChainIdOption = chainId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Initiator
        /// </summary>
        [JsonPropertyName("initiator")]
        public AutomationTradeTokensRequestInputInitiator Initiator { get; set; }

        /// <summary>
        /// Gets or Sets Counterparty
        /// </summary>
        [JsonPropertyName("counterparty")]
        public AutomationTradeTokensRequestInputInitiator Counterparty { get; set; }

        /// <summary>
        /// Used to track the state of Sponsor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SponsorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sponsor
        /// </summary>
        [JsonPropertyName("sponsor")]
        public bool? Sponsor { get { return this.SponsorOption; } set { this.SponsorOption = new(value); } }

        /// <summary>
        /// Used to track the state of PolicyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PolicyIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets PolicyId
        /// </summary>
        [JsonPropertyName("policyId")]
        public string PolicyId { get { return this.PolicyIdOption; } set { this.PolicyIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ChainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public long? ChainId { get { return this.ChainIdOption; } set { this.ChainIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationTradeTokensRequestInput {\n");
            sb.Append("  Initiator: ").Append(Initiator).Append("\n");
            sb.Append("  Counterparty: ").Append(Counterparty).Append("\n");
            sb.Append("  Sponsor: ").Append(Sponsor).Append("\n");
            sb.Append("  PolicyId: ").Append(PolicyId).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationTradeTokensRequestInput" />
    /// </summary>
    public class AutomationTradeTokensRequestInputJsonConverter : JsonConverter<AutomationTradeTokensRequestInput>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutomationTradeTokensRequestInput" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationTradeTokensRequestInput Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<AutomationTradeTokensRequestInputInitiator> initiator = default;
            Option<AutomationTradeTokensRequestInputInitiator> counterparty = default;
            Option<bool?> sponsor = default;
            Option<string> policyId = default;
            Option<long?> chainId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "initiator":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                initiator = new Option<AutomationTradeTokensRequestInputInitiator>(JsonSerializer.Deserialize<AutomationTradeTokensRequestInputInitiator>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "counterparty":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                counterparty = new Option<AutomationTradeTokensRequestInputInitiator>(JsonSerializer.Deserialize<AutomationTradeTokensRequestInputInitiator>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "sponsor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sponsor = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "policyId":
                            policyId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!initiator.IsSet)
                throw new ArgumentException("Property is required for class AutomationTradeTokensRequestInput.", nameof(initiator));

            if (!counterparty.IsSet)
                throw new ArgumentException("Property is required for class AutomationTradeTokensRequestInput.", nameof(counterparty));

            if (initiator.IsSet && initiator.Value == null)
                throw new ArgumentNullException(nameof(initiator), "Property is not nullable for class AutomationTradeTokensRequestInput.");

            if (counterparty.IsSet && counterparty.Value == null)
                throw new ArgumentNullException(nameof(counterparty), "Property is not nullable for class AutomationTradeTokensRequestInput.");

            if (sponsor.IsSet && sponsor.Value == null)
                throw new ArgumentNullException(nameof(sponsor), "Property is not nullable for class AutomationTradeTokensRequestInput.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class AutomationTradeTokensRequestInput.");

            return new AutomationTradeTokensRequestInput(initiator.Value, counterparty.Value, sponsor, policyId, chainId);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationTradeTokensRequestInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationTradeTokensRequestInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationTradeTokensRequestInput automationTradeTokensRequestInput, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automationTradeTokensRequestInput, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationTradeTokensRequestInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationTradeTokensRequestInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutomationTradeTokensRequestInput automationTradeTokensRequestInput, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationTradeTokensRequestInput.Initiator == null)
                throw new ArgumentNullException(nameof(automationTradeTokensRequestInput.Initiator), "Property is required for class AutomationTradeTokensRequestInput.");

            if (automationTradeTokensRequestInput.Counterparty == null)
                throw new ArgumentNullException(nameof(automationTradeTokensRequestInput.Counterparty), "Property is required for class AutomationTradeTokensRequestInput.");

            writer.WritePropertyName("initiator");
            JsonSerializer.Serialize(writer, automationTradeTokensRequestInput.Initiator, jsonSerializerOptions);
            writer.WritePropertyName("counterparty");
            JsonSerializer.Serialize(writer, automationTradeTokensRequestInput.Counterparty, jsonSerializerOptions);
            if (automationTradeTokensRequestInput.SponsorOption.IsSet)
            {
                writer.WriteBoolean("sponsor", automationTradeTokensRequestInput.SponsorOption.Value.Value);
            }

            if (automationTradeTokensRequestInput.PolicyIdOption.IsSet)
            {
                if (automationTradeTokensRequestInput.PolicyIdOption.Value != null)
                {
                    writer.WriteString("policyId", automationTradeTokensRequestInput.PolicyId);
                }
                else
                {
                    writer.WriteNull("policyId");
                }

            }

            if (automationTradeTokensRequestInput.ChainIdOption.IsSet)
            {
                writer.WriteNumber("chainId", automationTradeTokensRequestInput.ChainIdOption.Value.Value);
            }
        }
    }
}