// <auto-generated>
/*
 * Automation API
 *
 * The Automation API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AutomationCreateAssetOfferRequestInputV2
    /// </summary>
    public partial class AutomationCreateAssetOfferRequestInputV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AutomationCreateAssetOfferRequestInputV2" /> class.
        /// </summary>
        /// <param name="assetAddress">assetAddress</param>
        /// <param name="assetId">assetId</param>
        /// <param name="quantity">quantity</param>
        /// <param name="price">price</param>
        /// <param name="startTime">startTime</param>
        /// <param name="endTime">endTime</param>
        /// <param name="currency">currency (default to CurrencyEnum.WBEAM)</param>
        /// <param name="chainId">chainId (default to 13337)</param>
        [JsonConstructor]
        public AutomationCreateAssetOfferRequestInputV2(string assetAddress, string assetId, decimal quantity, string price, Option<string> startTime = default, Option<string> endTime = default, Option<CurrencyEnum?> currency = default, Option<long?> chainId = default)
        {
            AssetAddress = assetAddress;
            AssetId = assetId;
            Quantity = quantity;
            Price = price;
            StartTimeOption = startTime;
            EndTimeOption = endTime;
            CurrencyOption = currency;
            ChainIdOption = chainId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Currency
        /// </summary>
        public enum CurrencyEnum
        {
            /// <summary>
            /// Enum WBEAM for value: WBEAM
            /// </summary>
            WBEAM = 1,

            /// <summary>
            /// Enum WSOPH for value: WSOPH
            /// </summary>
            WSOPH = 2,

            /// <summary>
            /// Enum RAT for value: RAT
            /// </summary>
            RAT = 3,

            /// <summary>
            /// Enum USDC for value: USDC
            /// </summary>
            USDC = 4
        }

        /// <summary>
        /// Returns a <see cref="CurrencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CurrencyEnum CurrencyEnumFromString(string value)
        {
            if (value.Equals("WBEAM"))
                return CurrencyEnum.WBEAM;

            if (value.Equals("WSOPH"))
                return CurrencyEnum.WSOPH;

            if (value.Equals("RAT"))
                return CurrencyEnum.RAT;

            if (value.Equals("USDC"))
                return CurrencyEnum.USDC;

            throw new NotImplementedException($"Could not convert value to type CurrencyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CurrencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CurrencyEnum? CurrencyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("WBEAM"))
                return CurrencyEnum.WBEAM;

            if (value.Equals("WSOPH"))
                return CurrencyEnum.WSOPH;

            if (value.Equals("RAT"))
                return CurrencyEnum.RAT;

            if (value.Equals("USDC"))
                return CurrencyEnum.USDC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CurrencyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CurrencyEnumToJsonValue(CurrencyEnum? value)
        {
            if (value == null)
                return null;

            if (value == CurrencyEnum.WBEAM)
                return "WBEAM";

            if (value == CurrencyEnum.WSOPH)
                return "WSOPH";

            if (value == CurrencyEnum.RAT)
                return "RAT";

            if (value == CurrencyEnum.USDC)
                return "USDC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Currency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CurrencyEnum?> CurrencyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonPropertyName("currency")]
        public CurrencyEnum? Currency { get { return this.CurrencyOption; } set { this.CurrencyOption = new(value); } }

        /// <summary>
        /// Gets or Sets AssetAddress
        /// </summary>
        [JsonPropertyName("assetAddress")]
        public string AssetAddress { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [JsonPropertyName("assetId")]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public string Price { get; set; }

        /// <summary>
        /// Used to track the state of StartTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> StartTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string StartTime { get { return this.StartTimeOption; } set { this.StartTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> EndTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public string EndTime { get { return this.EndTimeOption; } set { this.EndTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChainId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> ChainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public long? ChainId { get { return this.ChainIdOption; } set { this.ChainIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AutomationCreateAssetOfferRequestInputV2 {\n");
            sb.Append("  AssetAddress: ").Append(AssetAddress).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.AssetId != null) {
                // AssetId (string) pattern
                Regex regexAssetId = new Regex(@"^\d+$", RegexOptions.CultureInvariant);

                if (!regexAssetId.Match(this.AssetId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssetId, must match a pattern of " + regexAssetId, new [] { "AssetId" });
                }
            }

            // Quantity (decimal) minimum
            if (this.Quantity < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Quantity, must be a value greater than or equal to 1.", new [] { "Quantity" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AutomationCreateAssetOfferRequestInputV2" />
    /// </summary>
    public class AutomationCreateAssetOfferRequestInputV2JsonConverter : JsonConverter<AutomationCreateAssetOfferRequestInputV2>
    {
        /// <summary>
        /// Deserializes json to <see cref="AutomationCreateAssetOfferRequestInputV2" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AutomationCreateAssetOfferRequestInputV2 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> assetAddress = default;
            Option<string> assetId = default;
            Option<decimal?> quantity = default;
            Option<string> price = default;
            Option<string> startTime = default;
            Option<string> endTime = default;
            Option<AutomationCreateAssetOfferRequestInputV2.CurrencyEnum?> currency = default;
            Option<long?> chainId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "assetAddress":
                            assetAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "assetId":
                            assetId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "price":
                            price = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "startTime":
                            startTime = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "endTime":
                            endTime = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "currency":
                            string currencyRawValue = utf8JsonReader.GetString();
                            if (currencyRawValue != null)
                                currency = new Option<AutomationCreateAssetOfferRequestInputV2.CurrencyEnum?>(AutomationCreateAssetOfferRequestInputV2.CurrencyEnumFromStringOrDefault(currencyRawValue));
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!assetAddress.IsSet)
                throw new ArgumentException("Property is required for class AutomationCreateAssetOfferRequestInputV2.", nameof(assetAddress));

            if (!assetId.IsSet)
                throw new ArgumentException("Property is required for class AutomationCreateAssetOfferRequestInputV2.", nameof(assetId));

            if (!quantity.IsSet)
                throw new ArgumentException("Property is required for class AutomationCreateAssetOfferRequestInputV2.", nameof(quantity));

            if (!price.IsSet)
                throw new ArgumentException("Property is required for class AutomationCreateAssetOfferRequestInputV2.", nameof(price));

            if (assetAddress.IsSet && assetAddress.Value == null)
                throw new ArgumentNullException(nameof(assetAddress), "Property is not nullable for class AutomationCreateAssetOfferRequestInputV2.");

            if (assetId.IsSet && assetId.Value == null)
                throw new ArgumentNullException(nameof(assetId), "Property is not nullable for class AutomationCreateAssetOfferRequestInputV2.");

            if (quantity.IsSet && quantity.Value == null)
                throw new ArgumentNullException(nameof(quantity), "Property is not nullable for class AutomationCreateAssetOfferRequestInputV2.");

            if (price.IsSet && price.Value == null)
                throw new ArgumentNullException(nameof(price), "Property is not nullable for class AutomationCreateAssetOfferRequestInputV2.");

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class AutomationCreateAssetOfferRequestInputV2.");

            if (endTime.IsSet && endTime.Value == null)
                throw new ArgumentNullException(nameof(endTime), "Property is not nullable for class AutomationCreateAssetOfferRequestInputV2.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class AutomationCreateAssetOfferRequestInputV2.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class AutomationCreateAssetOfferRequestInputV2.");

            return new AutomationCreateAssetOfferRequestInputV2(assetAddress.Value, assetId.Value, quantity.Value.Value, price.Value, startTime, endTime, currency, chainId);
        }

        /// <summary>
        /// Serializes a <see cref="AutomationCreateAssetOfferRequestInputV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, automationCreateAssetOfferRequestInputV2, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AutomationCreateAssetOfferRequestInputV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="automationCreateAssetOfferRequestInputV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AutomationCreateAssetOfferRequestInputV2 automationCreateAssetOfferRequestInputV2, JsonSerializerOptions jsonSerializerOptions)
        {
            if (automationCreateAssetOfferRequestInputV2.AssetAddress == null)
                throw new ArgumentNullException(nameof(automationCreateAssetOfferRequestInputV2.AssetAddress), "Property is required for class AutomationCreateAssetOfferRequestInputV2.");

            if (automationCreateAssetOfferRequestInputV2.AssetId == null)
                throw new ArgumentNullException(nameof(automationCreateAssetOfferRequestInputV2.AssetId), "Property is required for class AutomationCreateAssetOfferRequestInputV2.");

            if (automationCreateAssetOfferRequestInputV2.Price == null)
                throw new ArgumentNullException(nameof(automationCreateAssetOfferRequestInputV2.Price), "Property is required for class AutomationCreateAssetOfferRequestInputV2.");

            if (automationCreateAssetOfferRequestInputV2.StartTimeOption.IsSet && automationCreateAssetOfferRequestInputV2.StartTime == null)
                throw new ArgumentNullException(nameof(automationCreateAssetOfferRequestInputV2.StartTime), "Property is required for class AutomationCreateAssetOfferRequestInputV2.");

            if (automationCreateAssetOfferRequestInputV2.EndTimeOption.IsSet && automationCreateAssetOfferRequestInputV2.EndTime == null)
                throw new ArgumentNullException(nameof(automationCreateAssetOfferRequestInputV2.EndTime), "Property is required for class AutomationCreateAssetOfferRequestInputV2.");

            writer.WriteString("assetAddress", automationCreateAssetOfferRequestInputV2.AssetAddress);

            writer.WriteString("assetId", automationCreateAssetOfferRequestInputV2.AssetId);

            writer.WriteNumber("quantity", automationCreateAssetOfferRequestInputV2.Quantity);

            writer.WriteString("price", automationCreateAssetOfferRequestInputV2.Price);

            if (automationCreateAssetOfferRequestInputV2.StartTimeOption.IsSet)
            {
                writer.WriteString("startTime", automationCreateAssetOfferRequestInputV2.StartTime);
            }

            if (automationCreateAssetOfferRequestInputV2.EndTimeOption.IsSet)
            {
                writer.WriteString("endTime", automationCreateAssetOfferRequestInputV2.EndTime);
            }

            var currencyRawValue = AutomationCreateAssetOfferRequestInputV2.CurrencyEnumToJsonValue(automationCreateAssetOfferRequestInputV2.CurrencyOption.Value);
            if (currencyRawValue != null)
                writer.WriteString("currency", currencyRawValue);
            if (automationCreateAssetOfferRequestInputV2.ChainIdOption.IsSet)
            {
                writer.WriteNumber("chainId", automationCreateAssetOfferRequestInputV2.ChainIdOption.Value.Value);
            }
        }
    }
}