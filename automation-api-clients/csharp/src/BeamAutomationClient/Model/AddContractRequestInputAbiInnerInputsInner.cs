// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = BeamAutomationClient.Client.ClientUtils;
using BeamAutomationClient.Client;

namespace BeamAutomationClient.Model
{
    /// <summary>
    /// AddContractRequestInputAbiInnerInputsInner
    /// </summary>
    public partial class AddContractRequestInputAbiInnerInputsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddContractRequestInputAbiInnerInputsInner" /> class.
        /// </summary>
        /// <param name="components">components</param>
        /// <param name="indexed">indexed</param>
        /// <param name="internalType">internalType</param>
        /// <param name="name">name</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public AddContractRequestInputAbiInnerInputsInner(Option<List<Object>?> components = default, Option<bool?> indexed = default, Option<Object?> internalType = default, Option<string?> name = default, Option<string?> type = default)
        {
            ComponentsOption = components;
            IndexedOption = indexed;
            InternalTypeOption = internalType;
            NameOption = name;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Components
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<Object>?> ComponentsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Components
        /// </summary>
        [JsonPropertyName("components")]
        public List<Object>? Components { get { return this. ComponentsOption; } set { this.ComponentsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Indexed
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IndexedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Indexed
        /// </summary>
        [JsonPropertyName("indexed")]
        public bool? Indexed { get { return this. IndexedOption; } set { this.IndexedOption = new(value); } }

        /// <summary>
        /// Used to track the state of InternalType
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> InternalTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets InternalType
        /// </summary>
        [JsonPropertyName("internalType")]
        public Object? InternalType { get { return this. InternalTypeOption; } set { this.InternalTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this. NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this. TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddContractRequestInputAbiInnerInputsInner {\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  Indexed: ").Append(Indexed).Append("\n");
            sb.Append("  InternalType: ").Append(InternalType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddContractRequestInputAbiInnerInputsInner" />
    /// </summary>
    public class AddContractRequestInputAbiInnerInputsInnerJsonConverter : JsonConverter<AddContractRequestInputAbiInnerInputsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddContractRequestInputAbiInnerInputsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddContractRequestInputAbiInnerInputsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<Object>?> components = default;
            Option<bool?> indexed = default;
            Option<Object?> internalType = default;
            Option<string?> name = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "components":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                components = new Option<List<Object>?>(JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "indexed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                indexed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "internalType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                internalType = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (components.IsSet && components.Value == null)
                throw new ArgumentNullException(nameof(components), "Property is not nullable for class AddContractRequestInputAbiInnerInputsInner.");

            if (indexed.IsSet && indexed.Value == null)
                throw new ArgumentNullException(nameof(indexed), "Property is not nullable for class AddContractRequestInputAbiInnerInputsInner.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class AddContractRequestInputAbiInnerInputsInner.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class AddContractRequestInputAbiInnerInputsInner.");

            return new AddContractRequestInputAbiInnerInputsInner(components, indexed, internalType, name, type);
        }

        /// <summary>
        /// Serializes a <see cref="AddContractRequestInputAbiInnerInputsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addContractRequestInputAbiInnerInputsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddContractRequestInputAbiInnerInputsInner addContractRequestInputAbiInnerInputsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, addContractRequestInputAbiInnerInputsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddContractRequestInputAbiInnerInputsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addContractRequestInputAbiInnerInputsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AddContractRequestInputAbiInnerInputsInner addContractRequestInputAbiInnerInputsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addContractRequestInputAbiInnerInputsInner.ComponentsOption.IsSet && addContractRequestInputAbiInnerInputsInner.Components == null)
                throw new ArgumentNullException(nameof(addContractRequestInputAbiInnerInputsInner.Components), "Property is required for class AddContractRequestInputAbiInnerInputsInner.");

            if (addContractRequestInputAbiInnerInputsInner.NameOption.IsSet && addContractRequestInputAbiInnerInputsInner.Name == null)
                throw new ArgumentNullException(nameof(addContractRequestInputAbiInnerInputsInner.Name), "Property is required for class AddContractRequestInputAbiInnerInputsInner.");

            if (addContractRequestInputAbiInnerInputsInner.TypeOption.IsSet && addContractRequestInputAbiInnerInputsInner.Type == null)
                throw new ArgumentNullException(nameof(addContractRequestInputAbiInnerInputsInner.Type), "Property is required for class AddContractRequestInputAbiInnerInputsInner.");

            if (addContractRequestInputAbiInnerInputsInner.ComponentsOption.IsSet)
            {
                writer.WritePropertyName("components");
                JsonSerializer.Serialize(writer, addContractRequestInputAbiInnerInputsInner.Components, jsonSerializerOptions);
            }
            if (addContractRequestInputAbiInnerInputsInner.IndexedOption.IsSet)
                writer.WriteBoolean("indexed", addContractRequestInputAbiInnerInputsInner.IndexedOption.Value!.Value);

            if (addContractRequestInputAbiInnerInputsInner.InternalTypeOption.IsSet)
                if (addContractRequestInputAbiInnerInputsInner.InternalTypeOption.Value != null)
                {
                    writer.WritePropertyName("internalType");
                    JsonSerializer.Serialize(writer, addContractRequestInputAbiInnerInputsInner.InternalType, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("internalType");
            if (addContractRequestInputAbiInnerInputsInner.NameOption.IsSet)
                writer.WriteString("name", addContractRequestInputAbiInnerInputsInner.Name);

            if (addContractRequestInputAbiInnerInputsInner.TypeOption.IsSet)
                writer.WriteString("type", addContractRequestInputAbiInnerInputsInner.Type);
        }
    }
}