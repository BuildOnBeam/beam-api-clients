/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Beam.Client;
using Beam.Model;

namespace Beam.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a new contract to the game
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addContractRequestInput"></param>
        /// <returns>AddContractResponse</returns>
        AddContractResponse AddContractToGame(AddContractRequestInput addContractRequestInput);

        /// <summary>
        /// Add a new contract to the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addContractRequestInput"></param>
        /// <returns>ApiResponse of AddContractResponse</returns>
        ApiResponse<AddContractResponse> AddContractToGameWithHttpInfo(AddContractRequestInput addContractRequestInput);
        /// <summary>
        /// Get information about your game
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetGameResponse</returns>
        GetGameResponse GetGame();

        /// <summary>
        /// Get information about your game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetGameResponse</returns>
        ApiResponse<GetGameResponse> GetGameWithHttpInfo();
        /// <summary>
        /// Regenerate API keys
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regenerateGameApiKeysRequestInput"></param>
        /// <returns>RegenerateGameApiKeysResponse</returns>
        RegenerateGameApiKeysResponse RegenerateApiKeys(RegenerateGameApiKeysRequestInput regenerateGameApiKeysRequestInput);

        /// <summary>
        /// Regenerate API keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regenerateGameApiKeysRequestInput"></param>
        /// <returns>ApiResponse of RegenerateGameApiKeysResponse</returns>
        ApiResponse<RegenerateGameApiKeysResponse> RegenerateApiKeysWithHttpInfo(RegenerateGameApiKeysRequestInput regenerateGameApiKeysRequestInput);
        /// <summary>
        /// Delete a contract from a game
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="address"></param>
        /// <returns>RemoveContractResponse</returns>
        RemoveContractResponse RemoveContractFromGame(decimal chainId, string address);

        /// <summary>
        /// Delete a contract from a game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of RemoveContractResponse</returns>
        ApiResponse<RemoveContractResponse> RemoveContractFromGameWithHttpInfo(decimal chainId, string address);
        /// <summary>
        /// Updating name, description and/or coverImageUrl
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGameRequestInput"></param>
        /// <returns>UpdateGameResponse</returns>
        UpdateGameResponse UpdateGame(UpdateGameRequestInput updateGameRequestInput);

        /// <summary>
        /// Updating name, description and/or coverImageUrl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGameRequestInput"></param>
        /// <returns>ApiResponse of UpdateGameResponse</returns>
        ApiResponse<UpdateGameResponse> UpdateGameWithHttpInfo(UpdateGameRequestInput updateGameRequestInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add a new contract to the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addContractRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddContractResponse</returns>
        System.Threading.Tasks.Task<AddContractResponse> AddContractToGameAsync(AddContractRequestInput addContractRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new contract to the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addContractRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddContractResponse>> AddContractToGameWithHttpInfoAsync(AddContractRequestInput addContractRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get information about your game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGameResponse</returns>
        System.Threading.Tasks.Task<GetGameResponse> GetGameAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get information about your game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGameResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetGameResponse>> GetGameWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Regenerate API keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regenerateGameApiKeysRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegenerateGameApiKeysResponse</returns>
        System.Threading.Tasks.Task<RegenerateGameApiKeysResponse> RegenerateApiKeysAsync(RegenerateGameApiKeysRequestInput regenerateGameApiKeysRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Regenerate API keys
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regenerateGameApiKeysRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegenerateGameApiKeysResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegenerateGameApiKeysResponse>> RegenerateApiKeysWithHttpInfoAsync(RegenerateGameApiKeysRequestInput regenerateGameApiKeysRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a contract from a game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="address"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveContractResponse</returns>
        System.Threading.Tasks.Task<RemoveContractResponse> RemoveContractFromGameAsync(decimal chainId, string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a contract from a game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="address"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveContractResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveContractResponse>> RemoveContractFromGameWithHttpInfoAsync(decimal chainId, string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updating name, description and/or coverImageUrl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGameRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateGameResponse</returns>
        System.Threading.Tasks.Task<UpdateGameResponse> UpdateGameAsync(UpdateGameRequestInput updateGameRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updating name, description and/or coverImageUrl
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGameRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateGameResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateGameResponse>> UpdateGameWithHttpInfoAsync(UpdateGameRequestInput updateGameRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApi : IGameApiSync, IGameApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameApi : IDisposable, IGameApi
    {
        private Beam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GameApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GameApi(string basePath)
        {
            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GameApi(Beam.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GameApi(HttpClient client, Beam.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GameApi(Beam.Client.ISynchronousClient client, Beam.Client.IAsynchronousClient asyncClient, Beam.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Beam.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Beam.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Beam.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Beam.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Beam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add a new contract to the game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addContractRequestInput"></param>
        /// <returns>AddContractResponse</returns>
        public AddContractResponse AddContractToGame(AddContractRequestInput addContractRequestInput)
        {
            Beam.Client.ApiResponse<AddContractResponse> localVarResponse = AddContractToGameWithHttpInfo(addContractRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new contract to the game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addContractRequestInput"></param>
        /// <returns>ApiResponse of AddContractResponse</returns>
        public Beam.Client.ApiResponse<AddContractResponse> AddContractToGameWithHttpInfo(AddContractRequestInput addContractRequestInput)
        {
            // verify the required parameter 'addContractRequestInput' is set
            if (addContractRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'addContractRequestInput' when calling GameApi->AddContractToGame");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addContractRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddContractResponse>("/v1/game/contracts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddContractToGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new contract to the game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addContractRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddContractResponse</returns>
        public async System.Threading.Tasks.Task<AddContractResponse> AddContractToGameAsync(AddContractRequestInput addContractRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<AddContractResponse> localVarResponse = await AddContractToGameWithHttpInfoAsync(addContractRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new contract to the game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addContractRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddContractResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<AddContractResponse>> AddContractToGameWithHttpInfoAsync(AddContractRequestInput addContractRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addContractRequestInput' is set
            if (addContractRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'addContractRequestInput' when calling GameApi->AddContractToGame");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = addContractRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AddContractResponse>("/v1/game/contracts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddContractToGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about your game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetGameResponse</returns>
        public GetGameResponse GetGame()
        {
            Beam.Client.ApiResponse<GetGameResponse> localVarResponse = GetGameWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about your game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetGameResponse</returns>
        public Beam.Client.ApiResponse<GetGameResponse> GetGameWithHttpInfo()
        {
            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetGameResponse>("/v1/game", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get information about your game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetGameResponse</returns>
        public async System.Threading.Tasks.Task<GetGameResponse> GetGameAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetGameResponse> localVarResponse = await GetGameWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get information about your game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetGameResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetGameResponse>> GetGameWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetGameResponse>("/v1/game", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate API keys 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regenerateGameApiKeysRequestInput"></param>
        /// <returns>RegenerateGameApiKeysResponse</returns>
        public RegenerateGameApiKeysResponse RegenerateApiKeys(RegenerateGameApiKeysRequestInput regenerateGameApiKeysRequestInput)
        {
            Beam.Client.ApiResponse<RegenerateGameApiKeysResponse> localVarResponse = RegenerateApiKeysWithHttpInfo(regenerateGameApiKeysRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate API keys 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regenerateGameApiKeysRequestInput"></param>
        /// <returns>ApiResponse of RegenerateGameApiKeysResponse</returns>
        public Beam.Client.ApiResponse<RegenerateGameApiKeysResponse> RegenerateApiKeysWithHttpInfo(RegenerateGameApiKeysRequestInput regenerateGameApiKeysRequestInput)
        {
            // verify the required parameter 'regenerateGameApiKeysRequestInput' is set
            if (regenerateGameApiKeysRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'regenerateGameApiKeysRequestInput' when calling GameApi->RegenerateApiKeys");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = regenerateGameApiKeysRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RegenerateGameApiKeysResponse>("/v1/game/regenerate-api-keys", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegenerateApiKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Regenerate API keys 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regenerateGameApiKeysRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RegenerateGameApiKeysResponse</returns>
        public async System.Threading.Tasks.Task<RegenerateGameApiKeysResponse> RegenerateApiKeysAsync(RegenerateGameApiKeysRequestInput regenerateGameApiKeysRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<RegenerateGameApiKeysResponse> localVarResponse = await RegenerateApiKeysWithHttpInfoAsync(regenerateGameApiKeysRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate API keys 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="regenerateGameApiKeysRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RegenerateGameApiKeysResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<RegenerateGameApiKeysResponse>> RegenerateApiKeysWithHttpInfoAsync(RegenerateGameApiKeysRequestInput regenerateGameApiKeysRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'regenerateGameApiKeysRequestInput' is set
            if (regenerateGameApiKeysRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'regenerateGameApiKeysRequestInput' when calling GameApi->RegenerateApiKeys");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = regenerateGameApiKeysRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RegenerateGameApiKeysResponse>("/v1/game/regenerate-api-keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RegenerateApiKeys", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contract from a game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="address"></param>
        /// <returns>RemoveContractResponse</returns>
        public RemoveContractResponse RemoveContractFromGame(decimal chainId, string address)
        {
            Beam.Client.ApiResponse<RemoveContractResponse> localVarResponse = RemoveContractFromGameWithHttpInfo(chainId, address);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a contract from a game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="address"></param>
        /// <returns>ApiResponse of RemoveContractResponse</returns>
        public Beam.Client.ApiResponse<RemoveContractResponse> RemoveContractFromGameWithHttpInfo(decimal chainId, string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'address' when calling GameApi->RemoveContractFromGame");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chainId", Beam.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Beam.Client.ClientUtils.ParameterToString(address)); // path parameter

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<RemoveContractResponse>("/v1/game/contracts/{address}/{chainId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveContractFromGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a contract from a game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="address"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveContractResponse</returns>
        public async System.Threading.Tasks.Task<RemoveContractResponse> RemoveContractFromGameAsync(decimal chainId, string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<RemoveContractResponse> localVarResponse = await RemoveContractFromGameWithHttpInfoAsync(chainId, address, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a contract from a game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="address"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveContractResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<RemoveContractResponse>> RemoveContractFromGameWithHttpInfoAsync(decimal chainId, string address, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'address' when calling GameApi->RemoveContractFromGame");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chainId", Beam.Client.ClientUtils.ParameterToString(chainId)); // path parameter
            localVarRequestOptions.PathParameters.Add("address", Beam.Client.ClientUtils.ParameterToString(address)); // path parameter

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveContractResponse>("/v1/game/contracts/{address}/{chainId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveContractFromGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating name, description and/or coverImageUrl 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGameRequestInput"></param>
        /// <returns>UpdateGameResponse</returns>
        public UpdateGameResponse UpdateGame(UpdateGameRequestInput updateGameRequestInput)
        {
            Beam.Client.ApiResponse<UpdateGameResponse> localVarResponse = UpdateGameWithHttpInfo(updateGameRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updating name, description and/or coverImageUrl 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGameRequestInput"></param>
        /// <returns>ApiResponse of UpdateGameResponse</returns>
        public Beam.Client.ApiResponse<UpdateGameResponse> UpdateGameWithHttpInfo(UpdateGameRequestInput updateGameRequestInput)
        {
            // verify the required parameter 'updateGameRequestInput' is set
            if (updateGameRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'updateGameRequestInput' when calling GameApi->UpdateGame");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateGameRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateGameResponse>("/v1/game", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updating name, description and/or coverImageUrl 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGameRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateGameResponse</returns>
        public async System.Threading.Tasks.Task<UpdateGameResponse> UpdateGameAsync(UpdateGameRequestInput updateGameRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<UpdateGameResponse> localVarResponse = await UpdateGameWithHttpInfoAsync(updateGameRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updating name, description and/or coverImageUrl 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateGameRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateGameResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<UpdateGameResponse>> UpdateGameWithHttpInfoAsync(UpdateGameRequestInput updateGameRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateGameRequestInput' is set
            if (updateGameRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'updateGameRequestInput' when calling GameApi->UpdateGame");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = updateGameRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateGameResponse>("/v1/game", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
