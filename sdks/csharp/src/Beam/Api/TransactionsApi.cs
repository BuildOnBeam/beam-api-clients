// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Beam.Client;
using Beam.Model;
using System.Diagnostics.CodeAnalysis;

namespace Beam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ITransactionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        TransactionsApiEvents Events { get; }

        /// <summary>
        /// Creating a new transaction on behalf of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransactionRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProfileTransactionApiResponse"/>&gt;</returns>
        Task<ICreateProfileTransactionApiResponse> CreateProfileTransactionAsync(CreateTransactionRequestInput createTransactionRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creating a new transaction on behalf of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createTransactionRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProfileTransactionApiResponse"/>&gt;</returns>
        Task<ICreateProfileTransactionApiResponse> CreateProfileTransactionOrDefaultAsync(CreateTransactionRequestInput createTransactionRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a paginated list of transactions created on behalf of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileTransactionsApiResponse"/>&gt;</returns>
        Task<IGetProfileTransactionsApiResponse> GetProfileTransactionsAsync(string entityId, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a paginated list of transactions created on behalf of a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileTransactionsApiResponse"/>&gt;</returns>
        Task<IGetProfileTransactionsApiResponse> GetProfileTransactionsOrDefaultAsync(string entityId, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Getting a transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransactionApiResponse"/>&gt;</returns>
        Task<IGetTransactionApiResponse> GetTransactionAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Getting a transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transactionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransactionApiResponse"/>&gt;</returns>
        Task<IGetTransactionApiResponse> GetTransactionOrDefaultAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a paginated list of transactions from your game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransactionsApiResponse"/>&gt;</returns>
        Task<IGetTransactionsApiResponse> GetTransactionsAsync(Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a paginated list of transactions from your game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransactionsApiResponse"/>&gt;</returns>
        Task<IGetTransactionsApiResponse> GetTransactionsOrDefaultAsync(Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateProfileTransactionApiResponse"/>
    /// </summary>
    public interface ICreateProfileTransactionApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.CreateTransactionResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileTransactionsApiResponse"/>
    /// </summary>
    public interface IGetProfileTransactionsApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetTransactionsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTransactionApiResponse"/>
    /// </summary>
    public interface IGetTransactionApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetTransactionResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetTransactionsApiResponse"/>
    /// </summary>
    public interface IGetTransactionsApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetTransactionsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class TransactionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateProfileTransaction;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateProfileTransaction;

        internal void ExecuteOnCreateProfileTransaction(TransactionsApi.CreateProfileTransactionApiResponse apiResponse)
        {
            OnCreateProfileTransaction?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateProfileTransaction(Exception exception)
        {
            OnErrorCreateProfileTransaction?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfileTransactions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfileTransactions;

        internal void ExecuteOnGetProfileTransactions(TransactionsApi.GetProfileTransactionsApiResponse apiResponse)
        {
            OnGetProfileTransactions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileTransactions(Exception exception)
        {
            OnErrorGetProfileTransactions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTransaction;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTransaction;

        internal void ExecuteOnGetTransaction(TransactionsApi.GetTransactionApiResponse apiResponse)
        {
            OnGetTransaction?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTransaction(Exception exception)
        {
            OnErrorGetTransaction?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetTransactions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetTransactions;

        internal void ExecuteOnGetTransactions(TransactionsApi.GetTransactionsApiResponse apiResponse)
        {
            OnGetTransactions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetTransactions(Exception exception)
        {
            OnErrorGetTransactions?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class TransactionsApi : ITransactionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<TransactionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public TransactionsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionsApi(ILogger<TransactionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, TransactionsApiEvents transactionsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<TransactionsApi>();
            HttpClient = httpClient;
            Events = transactionsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreateProfileTransaction(CreateTransactionRequestInput createTransactionRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createTransactionRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateCreateProfileTransaction(CreateTransactionRequestInput createTransactionRequestInput, string entityId)
        {
            if (createTransactionRequestInput == null)
                throw new ArgumentNullException(nameof(createTransactionRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createTransactionRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterCreateProfileTransactionDefaultImplementation(ICreateProfileTransactionApiResponse apiResponseLocalVar, CreateTransactionRequestInput createTransactionRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterCreateProfileTransaction(ref suppressDefaultLog, apiResponseLocalVar, createTransactionRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createTransactionRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterCreateProfileTransaction(ref bool suppressDefaultLog, ICreateProfileTransactionApiResponse apiResponseLocalVar, CreateTransactionRequestInput createTransactionRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="createTransactionRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorCreateProfileTransactionDefaultImplementation(Exception exception, string pathFormat, string path, CreateTransactionRequestInput createTransactionRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateProfileTransaction(ref suppressDefaultLog, exception, pathFormat, path, createTransactionRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="createTransactionRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorCreateProfileTransaction(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, CreateTransactionRequestInput createTransactionRequestInput, string entityId);

        /// <summary>
        /// Creating a new transaction on behalf of a profile 
        /// </summary>
        /// <param name="createTransactionRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProfileTransactionApiResponse"/>&gt;</returns>
        public async Task<ICreateProfileTransactionApiResponse> CreateProfileTransactionOrDefaultAsync(CreateTransactionRequestInput createTransactionRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateProfileTransactionAsync(createTransactionRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creating a new transaction on behalf of a profile 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTransactionRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateProfileTransactionApiResponse"/>&gt;</returns>
        public async Task<ICreateProfileTransactionApiResponse> CreateProfileTransactionAsync(CreateTransactionRequestInput createTransactionRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateProfileTransaction(createTransactionRequestInput, entityId);

                FormatCreateProfileTransaction(createTransactionRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/transactions/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (createTransactionRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createTransactionRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateProfileTransactionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateProfileTransactionApiResponse>();

                        CreateProfileTransactionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/transactions/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateProfileTransactionDefaultImplementation(apiResponseLocalVar, createTransactionRequestInput, entityId);

                        Events.ExecuteOnCreateProfileTransaction(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateProfileTransactionDefaultImplementation(e, "/v1/transactions/profiles/{entityId}", uriBuilderLocalVar.Path, createTransactionRequestInput, entityId);
                Events.ExecuteOnErrorCreateProfileTransaction(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateProfileTransactionApiResponse"/>
        /// </summary>
        public partial class CreateProfileTransactionApiResponse : Beam.Client.ApiResponse, ICreateProfileTransactionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateProfileTransactionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateProfileTransactionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateProfileTransactionApiResponse(ILogger<CreateProfileTransactionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.CreateTransactionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.CreateTransactionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.CreateTransactionResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileTransactions(ref string entityId, ref Option<decimal> limit, ref Option<decimal> offset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfileTransactions(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetProfileTransactionsDefaultImplementation(IGetProfileTransactionsApiResponse apiResponseLocalVar, string entityId, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileTransactions(ref suppressDefaultLog, apiResponseLocalVar, entityId, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetProfileTransactions(ref bool suppressDefaultLog, IGetProfileTransactionsApiResponse apiResponseLocalVar, string entityId, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetProfileTransactionsDefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            OnErrorGetProfileTransactions(ref suppressDefaultLog, exception, pathFormat, path, entityId, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetProfileTransactions(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Get a paginated list of transactions created on behalf of a profile 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileTransactionsApiResponse"/>&gt;</returns>
        public async Task<IGetProfileTransactionsApiResponse> GetProfileTransactionsOrDefaultAsync(string entityId, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileTransactionsAsync(entityId, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a paginated list of transactions created on behalf of a profile 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileTransactionsApiResponse"/>&gt;</returns>
        public async Task<IGetProfileTransactionsApiResponse> GetProfileTransactionsAsync(string entityId, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileTransactions(entityId);

                FormatGetProfileTransactions(ref entityId, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/transactions/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = offset.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileTransactionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileTransactionsApiResponse>();

                        GetProfileTransactionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/transactions/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileTransactionsDefaultImplementation(apiResponseLocalVar, entityId, limit, offset);

                        Events.ExecuteOnGetProfileTransactions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileTransactionsDefaultImplementation(e, "/v1/transactions/profiles/{entityId}", uriBuilderLocalVar.Path, entityId, limit, offset);
                Events.ExecuteOnErrorGetProfileTransactions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileTransactionsApiResponse"/>
        /// </summary>
        public partial class GetProfileTransactionsApiResponse : Beam.Client.ApiResponse, IGetProfileTransactionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileTransactionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileTransactionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileTransactionsApiResponse(ILogger<GetProfileTransactionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetTransactionsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetTransactionsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetTransactionsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTransaction(ref string transactionId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transactionId"></param>
        /// <returns></returns>
        private void ValidateGetTransaction(string transactionId)
        {
            if (transactionId == null)
                throw new ArgumentNullException(nameof(transactionId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        private void AfterGetTransactionDefaultImplementation(IGetTransactionApiResponse apiResponseLocalVar, string transactionId)
        {
            bool suppressDefaultLog = false;
            AfterGetTransaction(ref suppressDefaultLog, apiResponseLocalVar, transactionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transactionId"></param>
        partial void AfterGetTransaction(ref bool suppressDefaultLog, IGetTransactionApiResponse apiResponseLocalVar, string transactionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transactionId"></param>
        private void OnErrorGetTransactionDefaultImplementation(Exception exception, string pathFormat, string path, string transactionId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetTransaction(ref suppressDefaultLog, exception, pathFormat, path, transactionId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transactionId"></param>
        partial void OnErrorGetTransaction(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string transactionId);

        /// <summary>
        /// Getting a transaction 
        /// </summary>
        /// <param name="transactionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransactionApiResponse"/>&gt;</returns>
        public async Task<IGetTransactionApiResponse> GetTransactionOrDefaultAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTransactionAsync(transactionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Getting a transaction 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransactionApiResponse"/>&gt;</returns>
        public async Task<IGetTransactionApiResponse> GetTransactionAsync(string transactionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetTransaction(transactionId);

                FormatGetTransaction(ref transactionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/transactions/{transactionId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtransactionId%7D", Uri.EscapeDataString(transactionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTransactionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTransactionApiResponse>();

                        GetTransactionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/transactions/{transactionId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTransactionDefaultImplementation(apiResponseLocalVar, transactionId);

                        Events.ExecuteOnGetTransaction(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTransactionDefaultImplementation(e, "/v1/transactions/{transactionId}", uriBuilderLocalVar.Path, transactionId);
                Events.ExecuteOnErrorGetTransaction(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTransactionApiResponse"/>
        /// </summary>
        public partial class GetTransactionApiResponse : Beam.Client.ApiResponse, IGetTransactionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTransactionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTransactionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTransactionApiResponse(ILogger<GetTransactionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetTransactionResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetTransactionResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetTransactionResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetTransactions(ref Option<decimal> limit, ref Option<decimal> offset);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetTransactionsDefaultImplementation(IGetTransactionsApiResponse apiResponseLocalVar, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetTransactions(ref suppressDefaultLog, apiResponseLocalVar, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetTransactions(ref bool suppressDefaultLog, IGetTransactionsApiResponse apiResponseLocalVar, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetTransactionsDefaultImplementation(Exception exception, string pathFormat, string path, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            OnErrorGetTransactions(ref suppressDefaultLog, exception, pathFormat, path, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetTransactions(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Get a paginated list of transactions from your game 
        /// </summary>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransactionsApiResponse"/>&gt;</returns>
        public async Task<IGetTransactionsApiResponse> GetTransactionsOrDefaultAsync(Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetTransactionsAsync(limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a paginated list of transactions from your game 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetTransactionsApiResponse"/>&gt;</returns>
        public async Task<IGetTransactionsApiResponse> GetTransactionsAsync(Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetTransactions(ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/transactions";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = offset.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetTransactionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetTransactionsApiResponse>();

                        GetTransactionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/transactions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetTransactionsDefaultImplementation(apiResponseLocalVar, limit, offset);

                        Events.ExecuteOnGetTransactions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetTransactionsDefaultImplementation(e, "/v1/transactions", uriBuilderLocalVar.Path, limit, offset);
                Events.ExecuteOnErrorGetTransactions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetTransactionsApiResponse"/>
        /// </summary>
        public partial class GetTransactionsApiResponse : Beam.Client.ApiResponse, IGetTransactionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetTransactionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetTransactionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetTransactionsApiResponse(ILogger<GetTransactionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetTransactionsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetTransactionsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetTransactionsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
