// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Beam.Client;
using Beam.Model;
using System.Diagnostics.CodeAnalysis;

namespace Beam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IPolicyApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        PolicyApiEvents Events { get; }

        /// <summary>
        /// Add a new policy to sponsor web3 actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPolicyRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePolicyApiResponse"/>&gt;</returns>
        Task<ICreatePolicyApiResponse> CreatePolicyAsync(AddPolicyRequestInput addPolicyRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Add a new policy to sponsor web3 actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="addPolicyRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePolicyApiResponse"/>&gt;</returns>
        Task<ICreatePolicyApiResponse> CreatePolicyOrDefaultAsync(AddPolicyRequestInput addPolicyRequestInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Removing a policy that sponsors web3 actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePolicyApiResponse"/>&gt;</returns>
        Task<IDeletePolicyApiResponse> DeletePolicyAsync(string policyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Removing a policy that sponsors web3 actions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePolicyApiResponse"/>&gt;</returns>
        Task<IDeletePolicyApiResponse> DeletePolicyOrDefaultAsync(string policyId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a list of policies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPoliciesApiResponse"/>&gt;</returns>
        Task<IGetPoliciesApiResponse> GetPoliciesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a list of policies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPoliciesApiResponse"/>&gt;</returns>
        Task<IGetPoliciesApiResponse> GetPoliciesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreatePolicyApiResponse"/>
    /// </summary>
    public interface ICreatePolicyApiResponse : Beam.Client.IApiResponse, ICreated<Beam.Model.AddPolicyResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IDeletePolicyApiResponse"/>
    /// </summary>
    public interface IDeletePolicyApiResponse : Beam.Client.IApiResponse, ICreated<Beam.Model.RemovePolicyResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IGetPoliciesApiResponse"/>
    /// </summary>
    public interface IGetPoliciesApiResponse : Beam.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class PolicyApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreatePolicy;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreatePolicy;

        internal void ExecuteOnCreatePolicy(PolicyApi.CreatePolicyApiResponse apiResponse)
        {
            OnCreatePolicy?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreatePolicy(Exception exception)
        {
            OnErrorCreatePolicy?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnDeletePolicy;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorDeletePolicy;

        internal void ExecuteOnDeletePolicy(PolicyApi.DeletePolicyApiResponse apiResponse)
        {
            OnDeletePolicy?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePolicy(Exception exception)
        {
            OnErrorDeletePolicy?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPolicies;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPolicies;

        internal void ExecuteOnGetPolicies(PolicyApi.GetPoliciesApiResponse apiResponse)
        {
            OnGetPolicies?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPolicies(Exception exception)
        {
            OnErrorGetPolicies?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PolicyApi : IPolicyApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<PolicyApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public PolicyApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PolicyApi(ILogger<PolicyApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, PolicyApiEvents policyApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<PolicyApi>();
            HttpClient = httpClient;
            Events = policyApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatCreatePolicy(AddPolicyRequestInput addPolicyRequestInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addPolicyRequestInput"></param>
        /// <returns></returns>
        private void ValidateCreatePolicy(AddPolicyRequestInput addPolicyRequestInput)
        {
            if (addPolicyRequestInput == null)
                throw new ArgumentNullException(nameof(addPolicyRequestInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addPolicyRequestInput"></param>
        private void AfterCreatePolicyDefaultImplementation(ICreatePolicyApiResponse apiResponseLocalVar, AddPolicyRequestInput addPolicyRequestInput)
        {
            bool suppressDefaultLog = false;
            AfterCreatePolicy(ref suppressDefaultLog, apiResponseLocalVar, addPolicyRequestInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addPolicyRequestInput"></param>
        partial void AfterCreatePolicy(ref bool suppressDefaultLog, ICreatePolicyApiResponse apiResponseLocalVar, AddPolicyRequestInput addPolicyRequestInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="addPolicyRequestInput"></param>
        private void OnErrorCreatePolicyDefaultImplementation(Exception exception, string pathFormat, string path, AddPolicyRequestInput addPolicyRequestInput)
        {
            bool suppressDefaultLog = false;
            OnErrorCreatePolicy(ref suppressDefaultLog, exception, pathFormat, path, addPolicyRequestInput);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="addPolicyRequestInput"></param>
        partial void OnErrorCreatePolicy(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, AddPolicyRequestInput addPolicyRequestInput);

        /// <summary>
        /// Add a new policy to sponsor web3 actions 
        /// </summary>
        /// <param name="addPolicyRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePolicyApiResponse"/>&gt;</returns>
        public async Task<ICreatePolicyApiResponse> CreatePolicyOrDefaultAsync(AddPolicyRequestInput addPolicyRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreatePolicyAsync(addPolicyRequestInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Add a new policy to sponsor web3 actions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addPolicyRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreatePolicyApiResponse"/>&gt;</returns>
        public async Task<ICreatePolicyApiResponse> CreatePolicyAsync(AddPolicyRequestInput addPolicyRequestInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreatePolicy(addPolicyRequestInput);

                FormatCreatePolicy(addPolicyRequestInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/policies";

                    httpRequestMessageLocalVar.Content = (addPolicyRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addPolicyRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreatePolicyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreatePolicyApiResponse>();

                        CreatePolicyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/policies", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreatePolicyDefaultImplementation(apiResponseLocalVar, addPolicyRequestInput);

                        Events.ExecuteOnCreatePolicy(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreatePolicyDefaultImplementation(e, "/v1/policies", uriBuilderLocalVar.Path, addPolicyRequestInput);
                Events.ExecuteOnErrorCreatePolicy(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreatePolicyApiResponse"/>
        /// </summary>
        public partial class CreatePolicyApiResponse : Beam.Client.ApiResponse, ICreatePolicyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreatePolicyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreatePolicyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreatePolicyApiResponse(ILogger<CreatePolicyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Beam.Model.AddPolicyResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.AddPolicyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Beam.Model.AddPolicyResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeletePolicy(ref string policyId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="policyId"></param>
        /// <returns></returns>
        private void ValidateDeletePolicy(string policyId)
        {
            if (policyId == null)
                throw new ArgumentNullException(nameof(policyId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="policyId"></param>
        private void AfterDeletePolicyDefaultImplementation(IDeletePolicyApiResponse apiResponseLocalVar, string policyId)
        {
            bool suppressDefaultLog = false;
            AfterDeletePolicy(ref suppressDefaultLog, apiResponseLocalVar, policyId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="policyId"></param>
        partial void AfterDeletePolicy(ref bool suppressDefaultLog, IDeletePolicyApiResponse apiResponseLocalVar, string policyId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="policyId"></param>
        private void OnErrorDeletePolicyDefaultImplementation(Exception exception, string pathFormat, string path, string policyId)
        {
            bool suppressDefaultLog = false;
            OnErrorDeletePolicy(ref suppressDefaultLog, exception, pathFormat, path, policyId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="policyId"></param>
        partial void OnErrorDeletePolicy(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string policyId);

        /// <summary>
        /// Removing a policy that sponsors web3 actions 
        /// </summary>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePolicyApiResponse"/>&gt;</returns>
        public async Task<IDeletePolicyApiResponse> DeletePolicyOrDefaultAsync(string policyId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePolicyAsync(policyId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Removing a policy that sponsors web3 actions 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePolicyApiResponse"/>&gt;</returns>
        public async Task<IDeletePolicyApiResponse> DeletePolicyAsync(string policyId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePolicy(policyId);

                FormatDeletePolicy(ref policyId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/policies/{policyId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BpolicyId%7D", Uri.EscapeDataString(policyId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePolicyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePolicyApiResponse>();

                        DeletePolicyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/policies/{policyId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePolicyDefaultImplementation(apiResponseLocalVar, policyId);

                        Events.ExecuteOnDeletePolicy(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePolicyDefaultImplementation(e, "/v1/policies/{policyId}", uriBuilderLocalVar.Path, policyId);
                Events.ExecuteOnErrorDeletePolicy(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePolicyApiResponse"/>
        /// </summary>
        public partial class DeletePolicyApiResponse : Beam.Client.ApiResponse, IDeletePolicyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePolicyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePolicyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePolicyApiResponse(ILogger<DeletePolicyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Beam.Model.RemovePolicyResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.RemovePolicyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Beam.Model.RemovePolicyResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetPoliciesDefaultImplementation(IGetPoliciesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetPolicies(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetPolicies(ref bool suppressDefaultLog, IGetPoliciesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetPoliciesDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetPolicies(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetPolicies(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// Get a list of policies 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPoliciesApiResponse"/>&gt;</returns>
        public async Task<IGetPoliciesApiResponse> GetPoliciesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPoliciesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a list of policies 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPoliciesApiResponse"/>&gt;</returns>
        public async Task<IGetPoliciesApiResponse> GetPoliciesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/policies";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPoliciesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPoliciesApiResponse>();

                        GetPoliciesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/policies", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPoliciesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetPolicies(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPoliciesDefaultImplementation(e, "/v1/policies", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetPolicies(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPoliciesApiResponse"/>
        /// </summary>
        public partial class GetPoliciesApiResponse : Beam.Client.ApiResponse, IGetPoliciesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPoliciesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPoliciesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPoliciesApiResponse(ILogger<GetPoliciesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
