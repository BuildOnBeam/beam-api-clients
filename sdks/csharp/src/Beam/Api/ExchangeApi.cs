/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Beam.Client;
using Beam.Model;

namespace Beam.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Trade an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <returns>ConvertTokenResponse</returns>
        ConvertTokenResponse ConvertInput(string entityId, ConvertTokenRequestInput convertTokenRequestInput);

        /// <summary>
        /// Trade an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <returns>ApiResponse of ConvertTokenResponse</returns>
        ApiResponse<ConvertTokenResponse> ConvertInputWithHttpInfo(string entityId, ConvertTokenRequestInput convertTokenRequestInput);
        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <returns>ConvertTokenResponse</returns>
        ConvertTokenResponse ConvertToOutput(string entityId, ConvertTokenRequestInput convertTokenRequestInput);

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <returns>ApiResponse of ConvertTokenResponse</returns>
        ApiResponse<ConvertTokenResponse> ConvertToOutputWithHttpInfo(string entityId, ConvertTokenRequestInput convertTokenRequestInput);
        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetQuoteResponse</returns>
        GetQuoteResponse GetQuoteForInput(string tokenIn, string tokenOut, string amountOut, decimal? chainId);

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetQuoteResponse</returns>
        ApiResponse<GetQuoteResponse> GetQuoteForInputWithHttpInfo(string tokenIn, string tokenOut, string amountOut, decimal? chainId);
        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetQuoteResponse</returns>
        GetQuoteResponse GetQuoteForOutput(string tokenIn, string tokenOut, string amountIn, decimal? chainId);

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetQuoteResponse</returns>
        ApiResponse<GetQuoteResponse> GetQuoteForOutputWithHttpInfo(string tokenIn, string tokenOut, string amountIn, decimal? chainId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Trade an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertTokenResponse</returns>
        System.Threading.Tasks.Task<ConvertTokenResponse> ConvertInputAsync(string entityId, ConvertTokenRequestInput convertTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trade an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertTokenResponse>> ConvertInputWithHttpInfoAsync(string entityId, ConvertTokenRequestInput convertTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertTokenResponse</returns>
        System.Threading.Tasks.Task<ConvertTokenResponse> ConvertToOutputAsync(string entityId, ConvertTokenRequestInput convertTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConvertTokenResponse>> ConvertToOutputWithHttpInfoAsync(string entityId, ConvertTokenRequestInput convertTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetQuoteResponse</returns>
        System.Threading.Tasks.Task<GetQuoteResponse> GetQuoteForInputAsync(string tokenIn, string tokenOut, string amountOut, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetQuoteResponse>> GetQuoteForInputWithHttpInfoAsync(string tokenIn, string tokenOut, string amountOut, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetQuoteResponse</returns>
        System.Threading.Tasks.Task<GetQuoteResponse> GetQuoteForOutputAsync(string tokenIn, string tokenOut, string amountIn, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetQuoteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetQuoteResponse>> GetQuoteForOutputWithHttpInfoAsync(string tokenIn, string tokenOut, string amountIn, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExchangeApi : IExchangeApiSync, IExchangeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExchangeApi : IDisposable, IExchangeApi
    {
        private Beam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ExchangeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ExchangeApi(string basePath)
        {
            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ExchangeApi(Beam.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ExchangeApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ExchangeApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ExchangeApi(HttpClient client, Beam.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExchangeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ExchangeApi(Beam.Client.ISynchronousClient client, Beam.Client.IAsynchronousClient asyncClient, Beam.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Beam.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Beam.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Beam.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Beam.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Beam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Trade an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <returns>ConvertTokenResponse</returns>
        public ConvertTokenResponse ConvertInput(string entityId, ConvertTokenRequestInput convertTokenRequestInput)
        {
            Beam.Client.ApiResponse<ConvertTokenResponse> localVarResponse = ConvertInputWithHttpInfo(entityId, convertTokenRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trade an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <returns>ApiResponse of ConvertTokenResponse</returns>
        public Beam.Client.ApiResponse<ConvertTokenResponse> ConvertInputWithHttpInfo(string entityId, ConvertTokenRequestInput convertTokenRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ExchangeApi->ConvertInput");

            // verify the required parameter 'convertTokenRequestInput' is set
            if (convertTokenRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'convertTokenRequestInput' when calling ExchangeApi->ConvertInput");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = convertTokenRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConvertTokenResponse>("/v1/exchange/profiles/{entityId}/convert/input", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertInput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trade an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertTokenResponse</returns>
        public async System.Threading.Tasks.Task<ConvertTokenResponse> ConvertInputAsync(string entityId, ConvertTokenRequestInput convertTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<ConvertTokenResponse> localVarResponse = await ConvertInputWithHttpInfoAsync(entityId, convertTokenRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trade an exact amount of &#x60;tokenIn&#x60; for a minimum amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<ConvertTokenResponse>> ConvertInputWithHttpInfoAsync(string entityId, ConvertTokenRequestInput convertTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ExchangeApi->ConvertInput");

            // verify the required parameter 'convertTokenRequestInput' is set
            if (convertTokenRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'convertTokenRequestInput' when calling ExchangeApi->ConvertInput");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = convertTokenRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ConvertTokenResponse>("/v1/exchange/profiles/{entityId}/convert/input", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertInput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <returns>ConvertTokenResponse</returns>
        public ConvertTokenResponse ConvertToOutput(string entityId, ConvertTokenRequestInput convertTokenRequestInput)
        {
            Beam.Client.ApiResponse<ConvertTokenResponse> localVarResponse = ConvertToOutputWithHttpInfo(entityId, convertTokenRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <returns>ApiResponse of ConvertTokenResponse</returns>
        public Beam.Client.ApiResponse<ConvertTokenResponse> ConvertToOutputWithHttpInfo(string entityId, ConvertTokenRequestInput convertTokenRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ExchangeApi->ConvertToOutput");

            // verify the required parameter 'convertTokenRequestInput' is set
            if (convertTokenRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'convertTokenRequestInput' when calling ExchangeApi->ConvertToOutput");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = convertTokenRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ConvertTokenResponse>("/v1/exchange/profiles/{entityId}/convert/output", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertToOutput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConvertTokenResponse</returns>
        public async System.Threading.Tasks.Task<ConvertTokenResponse> ConvertToOutputAsync(string entityId, ConvertTokenRequestInput convertTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<ConvertTokenResponse> localVarResponse = await ConvertToOutputWithHttpInfoAsync(entityId, convertTokenRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Swap a maximum amount of &#x60;tokenIn&#x60; for an exact amount of &#x60;tokenOut&#x60; 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="convertTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConvertTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<ConvertTokenResponse>> ConvertToOutputWithHttpInfoAsync(string entityId, ConvertTokenRequestInput convertTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ExchangeApi->ConvertToOutput");

            // verify the required parameter 'convertTokenRequestInput' is set
            if (convertTokenRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'convertTokenRequestInput' when calling ExchangeApi->ConvertToOutput");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = convertTokenRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ConvertTokenResponse>("/v1/exchange/profiles/{entityId}/convert/output", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ConvertToOutput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetQuoteResponse</returns>
        public GetQuoteResponse GetQuoteForInput(string tokenIn, string tokenOut, string amountOut, decimal? chainId)
        {
            Beam.Client.ApiResponse<GetQuoteResponse> localVarResponse = GetQuoteForInputWithHttpInfo(tokenIn, tokenOut, amountOut, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetQuoteResponse</returns>
        public Beam.Client.ApiResponse<GetQuoteResponse> GetQuoteForInputWithHttpInfo(string tokenIn, string tokenOut, string amountOut, decimal? chainId)
        {
            // verify the required parameter 'tokenIn' is set
            if (tokenIn == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'tokenIn' when calling ExchangeApi->GetQuoteForInput");

            // verify the required parameter 'tokenOut' is set
            if (tokenOut == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'tokenOut' when calling ExchangeApi->GetQuoteForInput");

            // verify the required parameter 'amountOut' is set
            if (amountOut == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'amountOut' when calling ExchangeApi->GetQuoteForInput");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "tokenIn", tokenIn));
            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "tokenOut", tokenOut));
            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "amountOut", amountOut));
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetQuoteResponse>("/v1/exchange/quote/input", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteForInput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetQuoteResponse</returns>
        public async System.Threading.Tasks.Task<GetQuoteResponse> GetQuoteForInputAsync(string tokenIn, string tokenOut, string amountOut, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetQuoteResponse> localVarResponse = await GetQuoteForInputWithHttpInfoAsync(tokenIn, tokenOut, amountOut, chainId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the maximum necessary input amount for a token trade, given a desired output amount 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountOut"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetQuoteResponse>> GetQuoteForInputWithHttpInfoAsync(string tokenIn, string tokenOut, string amountOut, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenIn' is set
            if (tokenIn == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'tokenIn' when calling ExchangeApi->GetQuoteForInput");

            // verify the required parameter 'tokenOut' is set
            if (tokenOut == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'tokenOut' when calling ExchangeApi->GetQuoteForInput");

            // verify the required parameter 'amountOut' is set
            if (amountOut == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'amountOut' when calling ExchangeApi->GetQuoteForInput");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "tokenIn", tokenIn));
            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "tokenOut", tokenOut));
            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "amountOut", amountOut));
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetQuoteResponse>("/v1/exchange/quote/input", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteForInput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetQuoteResponse</returns>
        public GetQuoteResponse GetQuoteForOutput(string tokenIn, string tokenOut, string amountIn, decimal? chainId)
        {
            Beam.Client.ApiResponse<GetQuoteResponse> localVarResponse = GetQuoteForOutputWithHttpInfo(tokenIn, tokenOut, amountIn, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetQuoteResponse</returns>
        public Beam.Client.ApiResponse<GetQuoteResponse> GetQuoteForOutputWithHttpInfo(string tokenIn, string tokenOut, string amountIn, decimal? chainId)
        {
            // verify the required parameter 'tokenIn' is set
            if (tokenIn == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'tokenIn' when calling ExchangeApi->GetQuoteForOutput");

            // verify the required parameter 'tokenOut' is set
            if (tokenOut == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'tokenOut' when calling ExchangeApi->GetQuoteForOutput");

            // verify the required parameter 'amountIn' is set
            if (amountIn == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'amountIn' when calling ExchangeApi->GetQuoteForOutput");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "tokenIn", tokenIn));
            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "tokenOut", tokenOut));
            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "amountIn", amountIn));
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetQuoteResponse>("/v1/exchange/quote/output", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteForOutput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetQuoteResponse</returns>
        public async System.Threading.Tasks.Task<GetQuoteResponse> GetQuoteForOutputAsync(string tokenIn, string tokenOut, string amountIn, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetQuoteResponse> localVarResponse = await GetQuoteForOutputWithHttpInfoAsync(tokenIn, tokenOut, amountIn, chainId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the minimum expected output amount for a token trade, given an input amount 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenIn"></param>
        /// <param name="tokenOut"></param>
        /// <param name="amountIn"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetQuoteResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetQuoteResponse>> GetQuoteForOutputWithHttpInfoAsync(string tokenIn, string tokenOut, string amountIn, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'tokenIn' is set
            if (tokenIn == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'tokenIn' when calling ExchangeApi->GetQuoteForOutput");

            // verify the required parameter 'tokenOut' is set
            if (tokenOut == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'tokenOut' when calling ExchangeApi->GetQuoteForOutput");

            // verify the required parameter 'amountIn' is set
            if (amountIn == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'amountIn' when calling ExchangeApi->GetQuoteForOutput");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "tokenIn", tokenIn));
            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "tokenOut", tokenOut));
            localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "amountIn", amountIn));
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetQuoteResponse>("/v1/exchange/quote/output", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQuoteForOutput", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
