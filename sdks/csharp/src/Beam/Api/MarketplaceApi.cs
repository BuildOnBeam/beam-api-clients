/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Beam.Client;
using Beam.Model;

namespace Beam.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <returns>AcceptOfferResponse</returns>
        AcceptOfferResponse AcceptAssetOffer(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput);

        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of AcceptOfferResponse</returns>
        ApiResponse<AcceptOfferResponse> AcceptAssetOfferWithHttpInfo(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput);
        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <returns>BuyAssetResponse</returns>
        BuyAssetResponse BuyListedAsset(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput);

        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <returns>ApiResponse of BuyAssetResponse</returns>
        ApiResponse<BuyAssetResponse> BuyListedAssetWithHttpInfo(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput);
        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <returns>CancelOfferResponse</returns>
        CancelOfferResponse CancelAssetOffer(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput);

        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CancelOfferResponse</returns>
        ApiResponse<CancelOfferResponse> CancelAssetOfferWithHttpInfo(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput);
        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <returns>BuyAssetResponse</returns>
        BuyAssetResponse CancelListing(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput);

        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <returns>ApiResponse of BuyAssetResponse</returns>
        ApiResponse<BuyAssetResponse> CancelListingWithHttpInfo(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput);
        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <returns>CreateOfferResponse</returns>
        CreateOfferResponse CreateAssetOffer(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput);

        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CreateOfferResponse</returns>
        ApiResponse<CreateOfferResponse> CreateAssetOfferWithHttpInfo(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput);
        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <returns>GetAssetOffersResponse</returns>
        GetAssetOffersResponse GetAssetOffers(string marketplaceId);

        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <returns>ApiResponse of GetAssetOffersResponse</returns>
        ApiResponse<GetAssetOffersResponse> GetAssetOffersWithHttpInfo(string marketplaceId);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <returns>GetChainCurrenciesResponse</returns>
        GetChainCurrenciesResponse GetChainCurrencies(decimal chainId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <returns>ApiResponse of GetChainCurrenciesResponse</returns>
        ApiResponse<GetChainCurrenciesResponse> GetChainCurrenciesWithHttpInfo(decimal chainId);
        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        [Obsolete]
        GetAssetListingsResponse GetListedAssets(decimal? limit, decimal? offset, string? gameId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        [Obsolete]
        ApiResponse<GetAssetListingsResponse> GetListedAssetsWithHttpInfo(decimal? limit, decimal? offset, string? gameId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort);
        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        [Obsolete]
        GetAssetListingsResponse GetListedAssetsForProfile(string entityId, decimal? limit, decimal? offset, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        [Obsolete]
        ApiResponse<GetAssetListingsResponse> GetListedAssetsForProfileWithHttpInfo(string entityId, decimal? limit, decimal? offset, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort);
        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <returns>GetAssetListingsResponse</returns>
        GetAssetListingsResponse GetListedAssetsForProfilePost(string entityId, GetAssetsBodyInput getAssetsBodyInput);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        ApiResponse<GetAssetListingsResponse> GetListedAssetsForProfilePostWithHttpInfo(string entityId, GetAssetsBodyInput getAssetsBodyInput);
        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <returns>GetAssetListingsResponse</returns>
        GetAssetListingsResponse GetListedAssetsPost(GetAssetsBodyInput getAssetsBodyInput);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        ApiResponse<GetAssetListingsResponse> GetListedAssetsPostWithHttpInfo(GetAssetsBodyInput getAssetsBodyInput);
        /// <summary>
        /// Get all asset offers that player created
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetAssetOffersResponse</returns>
        GetAssetOffersResponse GetPlayerAssetOffers(string entityId, string marketplaceId, decimal? chainId);

        /// <summary>
        /// Get all asset offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetOffersResponse</returns>
        ApiResponse<GetAssetOffersResponse> GetPlayerAssetOffersWithHttpInfo(string entityId, string marketplaceId, decimal? chainId);
        /// <summary>
        /// Get all offers that player created
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetAssetOffersResponse</returns>
        GetAssetOffersResponse GetPlayerOffers(string entityId, decimal? chainId);

        /// <summary>
        /// Get all offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetOffersResponse</returns>
        ApiResponse<GetAssetOffersResponse> GetPlayerOffersWithHttpInfo(string entityId, decimal? chainId);
        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <returns>SellAssetResponse</returns>
        SellAssetResponse ListAsset(string entityId, SellAssetRequestInput sellAssetRequestInput);

        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <returns>ApiResponse of SellAssetResponse</returns>
        ApiResponse<SellAssetResponse> ListAssetWithHttpInfo(string entityId, SellAssetRequestInput sellAssetRequestInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AcceptOfferResponse</returns>
        System.Threading.Tasks.Task<AcceptOfferResponse> AcceptAssetOfferAsync(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AcceptOfferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AcceptOfferResponse>> AcceptAssetOfferWithHttpInfoAsync(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuyAssetResponse</returns>
        System.Threading.Tasks.Task<BuyAssetResponse> BuyListedAssetAsync(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuyAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuyAssetResponse>> BuyListedAssetWithHttpInfoAsync(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOfferResponse</returns>
        System.Threading.Tasks.Task<CancelOfferResponse> CancelAssetOfferAsync(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOfferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelOfferResponse>> CancelAssetOfferWithHttpInfoAsync(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuyAssetResponse</returns>
        System.Threading.Tasks.Task<BuyAssetResponse> CancelListingAsync(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuyAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuyAssetResponse>> CancelListingWithHttpInfoAsync(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOfferResponse</returns>
        System.Threading.Tasks.Task<CreateOfferResponse> CreateAssetOfferAsync(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOfferResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateOfferResponse>> CreateAssetOfferWithHttpInfoAsync(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetOffersResponse</returns>
        System.Threading.Tasks.Task<GetAssetOffersResponse> GetAssetOffersAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetOffersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetOffersResponse>> GetAssetOffersWithHttpInfoAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetChainCurrenciesResponse</returns>
        System.Threading.Tasks.Task<GetChainCurrenciesResponse> GetChainCurrenciesAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetChainCurrenciesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetChainCurrenciesResponse>> GetChainCurrenciesWithHttpInfoAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GetAssetListingsResponse> GetListedAssetsAsync(decimal? limit, decimal? offset, string? gameId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GetAssetListingsResponse>> GetListedAssetsWithHttpInfoAsync(decimal? limit, decimal? offset, string? gameId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GetAssetListingsResponse> GetListedAssetsForProfileAsync(string entityId, decimal? limit, decimal? offset, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GetAssetListingsResponse>> GetListedAssetsForProfileWithHttpInfoAsync(string entityId, decimal? limit, decimal? offset, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        System.Threading.Tasks.Task<GetAssetListingsResponse> GetListedAssetsForProfilePostAsync(string entityId, GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetListingsResponse>> GetListedAssetsForProfilePostWithHttpInfoAsync(string entityId, GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        System.Threading.Tasks.Task<GetAssetListingsResponse> GetListedAssetsPostAsync(GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetListingsResponse>> GetListedAssetsPostWithHttpInfoAsync(GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all asset offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetOffersResponse</returns>
        System.Threading.Tasks.Task<GetAssetOffersResponse> GetPlayerAssetOffersAsync(string entityId, string marketplaceId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all asset offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetOffersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetOffersResponse>> GetPlayerAssetOffersWithHttpInfoAsync(string entityId, string marketplaceId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetOffersResponse</returns>
        System.Threading.Tasks.Task<GetAssetOffersResponse> GetPlayerOffersAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetOffersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetOffersResponse>> GetPlayerOffersWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SellAssetResponse</returns>
        System.Threading.Tasks.Task<SellAssetResponse> ListAssetAsync(string entityId, SellAssetRequestInput sellAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SellAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SellAssetResponse>> ListAssetWithHttpInfoAsync(string entityId, SellAssetRequestInput sellAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketplaceApi : IMarketplaceApiSync, IMarketplaceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketplaceApi : IDisposable, IMarketplaceApi
    {
        private Beam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MarketplaceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MarketplaceApi(string basePath)
        {
            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MarketplaceApi(Beam.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MarketplaceApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MarketplaceApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MarketplaceApi(HttpClient client, Beam.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MarketplaceApi(Beam.Client.ISynchronousClient client, Beam.Client.IAsynchronousClient asyncClient, Beam.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Beam.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Beam.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Beam.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Beam.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Beam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <returns>AcceptOfferResponse</returns>
        public AcceptOfferResponse AcceptAssetOffer(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput)
        {
            Beam.Client.ApiResponse<AcceptOfferResponse> localVarResponse = AcceptAssetOfferWithHttpInfo(entityId, offerId, acceptAssetOfferRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of AcceptOfferResponse</returns>
        public Beam.Client.ApiResponse<AcceptOfferResponse> AcceptAssetOfferWithHttpInfo(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->AcceptAssetOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->AcceptAssetOffer");

            // verify the required parameter 'acceptAssetOfferRequestInput' is set
            if (acceptAssetOfferRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'acceptAssetOfferRequestInput' when calling MarketplaceApi->AcceptAssetOffer");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("offerId", Beam.Client.ClientUtils.ParameterToString(offerId)); // path parameter
            localVarRequestOptions.Data = acceptAssetOfferRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AcceptOfferResponse>("/v1/marketplace/profiles/{entityId}/offers/{offerId}/accept", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AcceptOfferResponse</returns>
        public async System.Threading.Tasks.Task<AcceptOfferResponse> AcceptAssetOfferAsync(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<AcceptOfferResponse> localVarResponse = await AcceptAssetOfferWithHttpInfoAsync(entityId, offerId, acceptAssetOfferRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AcceptOfferResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<AcceptOfferResponse>> AcceptAssetOfferWithHttpInfoAsync(string entityId, string offerId, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->AcceptAssetOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->AcceptAssetOffer");

            // verify the required parameter 'acceptAssetOfferRequestInput' is set
            if (acceptAssetOfferRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'acceptAssetOfferRequestInput' when calling MarketplaceApi->AcceptAssetOffer");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("offerId", Beam.Client.ClientUtils.ParameterToString(offerId)); // path parameter
            localVarRequestOptions.Data = acceptAssetOfferRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<AcceptOfferResponse>("/v1/marketplace/profiles/{entityId}/offers/{offerId}/accept", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AcceptAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <returns>BuyAssetResponse</returns>
        public BuyAssetResponse BuyListedAsset(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput)
        {
            Beam.Client.ApiResponse<BuyAssetResponse> localVarResponse = BuyListedAssetWithHttpInfo(entityId, orderId, buyAssetRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <returns>ApiResponse of BuyAssetResponse</returns>
        public Beam.Client.ApiResponse<BuyAssetResponse> BuyListedAssetWithHttpInfo(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->BuyListedAsset");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'orderId' when calling MarketplaceApi->BuyListedAsset");

            // verify the required parameter 'buyAssetRequestInput' is set
            if (buyAssetRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'buyAssetRequestInput' when calling MarketplaceApi->BuyListedAsset");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderId", Beam.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = buyAssetRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<BuyAssetResponse>("/v1/marketplace/profiles/{entityId}/listing/{orderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyListedAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuyAssetResponse</returns>
        public async System.Threading.Tasks.Task<BuyAssetResponse> BuyListedAssetAsync(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<BuyAssetResponse> localVarResponse = await BuyListedAssetWithHttpInfoAsync(entityId, orderId, buyAssetRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuyAssetResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<BuyAssetResponse>> BuyListedAssetWithHttpInfoAsync(string entityId, string orderId, BuyAssetRequestInput buyAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->BuyListedAsset");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'orderId' when calling MarketplaceApi->BuyListedAsset");

            // verify the required parameter 'buyAssetRequestInput' is set
            if (buyAssetRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'buyAssetRequestInput' when calling MarketplaceApi->BuyListedAsset");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderId", Beam.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = buyAssetRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<BuyAssetResponse>("/v1/marketplace/profiles/{entityId}/listing/{orderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BuyListedAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <returns>CancelOfferResponse</returns>
        public CancelOfferResponse CancelAssetOffer(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput)
        {
            Beam.Client.ApiResponse<CancelOfferResponse> localVarResponse = CancelAssetOfferWithHttpInfo(entityId, offerId, cancelAssetOfferRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CancelOfferResponse</returns>
        public Beam.Client.ApiResponse<CancelOfferResponse> CancelAssetOfferWithHttpInfo(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CancelAssetOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->CancelAssetOffer");

            // verify the required parameter 'cancelAssetOfferRequestInput' is set
            if (cancelAssetOfferRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'cancelAssetOfferRequestInput' when calling MarketplaceApi->CancelAssetOffer");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("offerId", Beam.Client.ClientUtils.ParameterToString(offerId)); // path parameter
            localVarRequestOptions.Data = cancelAssetOfferRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CancelOfferResponse>("/v1/marketplace/profiles/{entityId}/offers/{offerId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelOfferResponse</returns>
        public async System.Threading.Tasks.Task<CancelOfferResponse> CancelAssetOfferAsync(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<CancelOfferResponse> localVarResponse = await CancelAssetOfferWithHttpInfoAsync(entityId, offerId, cancelAssetOfferRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelOfferResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<CancelOfferResponse>> CancelAssetOfferWithHttpInfoAsync(string entityId, string offerId, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CancelAssetOffer");

            // verify the required parameter 'offerId' is set
            if (offerId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'offerId' when calling MarketplaceApi->CancelAssetOffer");

            // verify the required parameter 'cancelAssetOfferRequestInput' is set
            if (cancelAssetOfferRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'cancelAssetOfferRequestInput' when calling MarketplaceApi->CancelAssetOffer");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("offerId", Beam.Client.ClientUtils.ParameterToString(offerId)); // path parameter
            localVarRequestOptions.Data = cancelAssetOfferRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CancelOfferResponse>("/v1/marketplace/profiles/{entityId}/offers/{offerId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <returns>BuyAssetResponse</returns>
        public BuyAssetResponse CancelListing(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput)
        {
            Beam.Client.ApiResponse<BuyAssetResponse> localVarResponse = CancelListingWithHttpInfo(entityId, orderId, cancelAssetListingRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <returns>ApiResponse of BuyAssetResponse</returns>
        public Beam.Client.ApiResponse<BuyAssetResponse> CancelListingWithHttpInfo(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CancelListing");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'orderId' when calling MarketplaceApi->CancelListing");

            // verify the required parameter 'cancelAssetListingRequestInput' is set
            if (cancelAssetListingRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'cancelAssetListingRequestInput' when calling MarketplaceApi->CancelListing");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderId", Beam.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = cancelAssetListingRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<BuyAssetResponse>("/v1/marketplace/profiles/{entityId}/listing/{orderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BuyAssetResponse</returns>
        public async System.Threading.Tasks.Task<BuyAssetResponse> CancelListingAsync(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<BuyAssetResponse> localVarResponse = await CancelListingWithHttpInfoAsync(entityId, orderId, cancelAssetListingRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BuyAssetResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<BuyAssetResponse>> CancelListingWithHttpInfoAsync(string entityId, string orderId, CancelAssetListingRequestInput cancelAssetListingRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CancelListing");

            // verify the required parameter 'orderId' is set
            if (orderId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'orderId' when calling MarketplaceApi->CancelListing");

            // verify the required parameter 'cancelAssetListingRequestInput' is set
            if (cancelAssetListingRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'cancelAssetListingRequestInput' when calling MarketplaceApi->CancelListing");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("orderId", Beam.Client.ClientUtils.ParameterToString(orderId)); // path parameter
            localVarRequestOptions.Data = cancelAssetListingRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<BuyAssetResponse>("/v1/marketplace/profiles/{entityId}/listing/{orderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelListing", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <returns>CreateOfferResponse</returns>
        public CreateOfferResponse CreateAssetOffer(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput)
        {
            Beam.Client.ApiResponse<CreateOfferResponse> localVarResponse = CreateAssetOfferWithHttpInfo(entityId, createAssetOfferRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <returns>ApiResponse of CreateOfferResponse</returns>
        public Beam.Client.ApiResponse<CreateOfferResponse> CreateAssetOfferWithHttpInfo(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CreateAssetOffer");

            // verify the required parameter 'createAssetOfferRequestInput' is set
            if (createAssetOfferRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'createAssetOfferRequestInput' when calling MarketplaceApi->CreateAssetOffer");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = createAssetOfferRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateOfferResponse>("/v1/marketplace/profiles/{entityId}/offers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOfferResponse</returns>
        public async System.Threading.Tasks.Task<CreateOfferResponse> CreateAssetOfferAsync(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<CreateOfferResponse> localVarResponse = await CreateAssetOfferWithHttpInfoAsync(entityId, createAssetOfferRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOfferResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<CreateOfferResponse>> CreateAssetOfferWithHttpInfoAsync(string entityId, CreateAssetOfferRequestInput createAssetOfferRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->CreateAssetOffer");

            // verify the required parameter 'createAssetOfferRequestInput' is set
            if (createAssetOfferRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'createAssetOfferRequestInput' when calling MarketplaceApi->CreateAssetOffer");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = createAssetOfferRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateOfferResponse>("/v1/marketplace/profiles/{entityId}/offers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAssetOffer", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <returns>GetAssetOffersResponse</returns>
        public GetAssetOffersResponse GetAssetOffers(string marketplaceId)
        {
            Beam.Client.ApiResponse<GetAssetOffersResponse> localVarResponse = GetAssetOffersWithHttpInfo(marketplaceId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <returns>ApiResponse of GetAssetOffersResponse</returns>
        public Beam.Client.ApiResponse<GetAssetOffersResponse> GetAssetOffersWithHttpInfo(string marketplaceId)
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'marketplaceId' when calling MarketplaceApi->GetAssetOffers");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("marketplaceId", Beam.Client.ClientUtils.ParameterToString(marketplaceId)); // path parameter

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetOffersResponse>("/v1/marketplace/offers/asset/{marketplaceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetOffersResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetOffersResponse> GetAssetOffersAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetOffersResponse> localVarResponse = await GetAssetOffersWithHttpInfoAsync(marketplaceId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetOffersResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetOffersResponse>> GetAssetOffersWithHttpInfoAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'marketplaceId' when calling MarketplaceApi->GetAssetOffers");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("marketplaceId", Beam.Client.ClientUtils.ParameterToString(marketplaceId)); // path parameter

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetOffersResponse>("/v1/marketplace/offers/asset/{marketplaceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <returns>GetChainCurrenciesResponse</returns>
        public GetChainCurrenciesResponse GetChainCurrencies(decimal chainId)
        {
            Beam.Client.ApiResponse<GetChainCurrenciesResponse> localVarResponse = GetChainCurrenciesWithHttpInfo(chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <returns>ApiResponse of GetChainCurrenciesResponse</returns>
        public Beam.Client.ApiResponse<GetChainCurrenciesResponse> GetChainCurrenciesWithHttpInfo(decimal chainId)
        {
            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chainId", Beam.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetChainCurrenciesResponse>("/v1/marketplace/chain-currencies/{chainId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChainCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetChainCurrenciesResponse</returns>
        public async System.Threading.Tasks.Task<GetChainCurrenciesResponse> GetChainCurrenciesAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetChainCurrenciesResponse> localVarResponse = await GetChainCurrenciesWithHttpInfoAsync(chainId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetChainCurrenciesResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetChainCurrenciesResponse>> GetChainCurrenciesWithHttpInfoAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("chainId", Beam.Client.ClientUtils.ParameterToString(chainId)); // path parameter

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetChainCurrenciesResponse>("/v1/marketplace/chain-currencies/{chainId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetChainCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        [Obsolete]
        public GetAssetListingsResponse GetListedAssets(decimal? limit, decimal? offset, string? gameId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort)
        {
            Beam.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = GetListedAssetsWithHttpInfo(limit, offset, gameId, filter, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        [Obsolete]
        public Beam.Client.ApiResponse<GetAssetListingsResponse> GetListedAssetsWithHttpInfo(decimal? limit, decimal? offset, string? gameId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort)
        {
            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (gameId != null)
            {
                localVarRequestOptions.PathParameters.Add("gameId", Beam.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetListingsResponse>("/v1/marketplace", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GetAssetListingsResponse> GetListedAssetsAsync(decimal? limit, decimal? offset, string? gameId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = await GetListedAssetsWithHttpInfoAsync(limit, offset, gameId, filter, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="gameId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetListingsResponse>> GetListedAssetsWithHttpInfoAsync(decimal? limit, decimal? offset, string? gameId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (gameId != null)
            {
                localVarRequestOptions.PathParameters.Add("gameId", Beam.Client.ClientUtils.ParameterToString(gameId)); // path parameter
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetListingsResponse>("/v1/marketplace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>GetAssetListingsResponse</returns>
        [Obsolete]
        public GetAssetListingsResponse GetListedAssetsForProfile(string entityId, decimal? limit, decimal? offset, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort)
        {
            Beam.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = GetListedAssetsForProfileWithHttpInfo(entityId, limit, offset, filter, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        [Obsolete]
        public Beam.Client.ApiResponse<GetAssetListingsResponse> GetListedAssetsForProfileWithHttpInfo(string entityId, decimal? limit, decimal? offset, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetListedAssetsForProfile");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetListingsResponse>("/v1/marketplace/profiles/{entityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssetsForProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GetAssetListingsResponse> GetListedAssetsForProfileAsync(string entityId, decimal? limit, decimal? offset, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = await GetListedAssetsForProfileWithHttpInfoAsync(entityId, limit, offset, filter, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetListingsResponse>> GetListedAssetsForProfileWithHttpInfoAsync(string entityId, decimal? limit, decimal? offset, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetListedAssetsForProfile");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetListingsResponse>("/v1/marketplace/profiles/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssetsForProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <returns>GetAssetListingsResponse</returns>
        public GetAssetListingsResponse GetListedAssetsForProfilePost(string entityId, GetAssetsBodyInput getAssetsBodyInput)
        {
            Beam.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = GetListedAssetsForProfilePostWithHttpInfo(entityId, getAssetsBodyInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        public Beam.Client.ApiResponse<GetAssetListingsResponse> GetListedAssetsForProfilePostWithHttpInfo(string entityId, GetAssetsBodyInput getAssetsBodyInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetListedAssetsForProfilePost");

            // verify the required parameter 'getAssetsBodyInput' is set
            if (getAssetsBodyInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'getAssetsBodyInput' when calling MarketplaceApi->GetListedAssetsForProfilePost");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = getAssetsBodyInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAssetListingsResponse>("/v1/marketplace/profiles/{entityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssetsForProfilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetListingsResponse> GetListedAssetsForProfilePostAsync(string entityId, GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = await GetListedAssetsForProfilePostWithHttpInfoAsync(entityId, getAssetsBodyInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetListingsResponse>> GetListedAssetsForProfilePostWithHttpInfoAsync(string entityId, GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetListedAssetsForProfilePost");

            // verify the required parameter 'getAssetsBodyInput' is set
            if (getAssetsBodyInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'getAssetsBodyInput' when calling MarketplaceApi->GetListedAssetsForProfilePost");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = getAssetsBodyInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetAssetListingsResponse>("/v1/marketplace/profiles/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssetsForProfilePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <returns>GetAssetListingsResponse</returns>
        public GetAssetListingsResponse GetListedAssetsPost(GetAssetsBodyInput getAssetsBodyInput)
        {
            Beam.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = GetListedAssetsPostWithHttpInfo(getAssetsBodyInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <returns>ApiResponse of GetAssetListingsResponse</returns>
        public Beam.Client.ApiResponse<GetAssetListingsResponse> GetListedAssetsPostWithHttpInfo(GetAssetsBodyInput getAssetsBodyInput)
        {
            // verify the required parameter 'getAssetsBodyInput' is set
            if (getAssetsBodyInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'getAssetsBodyInput' when calling MarketplaceApi->GetListedAssetsPost");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getAssetsBodyInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAssetListingsResponse>("/v1/marketplace", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssetsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetListingsResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetListingsResponse> GetListedAssetsPostAsync(GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetListingsResponse> localVarResponse = await GetListedAssetsPostWithHttpInfoAsync(getAssetsBodyInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetListingsResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetListingsResponse>> GetListedAssetsPostWithHttpInfoAsync(GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getAssetsBodyInput' is set
            if (getAssetsBodyInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'getAssetsBodyInput' when calling MarketplaceApi->GetListedAssetsPost");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = getAssetsBodyInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetAssetListingsResponse>("/v1/marketplace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetListedAssetsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all asset offers that player created 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetAssetOffersResponse</returns>
        public GetAssetOffersResponse GetPlayerAssetOffers(string entityId, string marketplaceId, decimal? chainId)
        {
            Beam.Client.ApiResponse<GetAssetOffersResponse> localVarResponse = GetPlayerAssetOffersWithHttpInfo(entityId, marketplaceId, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all asset offers that player created 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetOffersResponse</returns>
        public Beam.Client.ApiResponse<GetAssetOffersResponse> GetPlayerAssetOffersWithHttpInfo(string entityId, string marketplaceId, decimal? chainId)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetPlayerAssetOffers");

            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'marketplaceId' when calling MarketplaceApi->GetPlayerAssetOffers");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("marketplaceId", Beam.Client.ClientUtils.ParameterToString(marketplaceId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetOffersResponse>("/v1/marketplace/profiles/{entityId}/offers/asset/{marketplaceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerAssetOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all asset offers that player created 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetOffersResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetOffersResponse> GetPlayerAssetOffersAsync(string entityId, string marketplaceId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetOffersResponse> localVarResponse = await GetPlayerAssetOffersWithHttpInfoAsync(entityId, marketplaceId, chainId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all asset offers that player created 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetOffersResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetOffersResponse>> GetPlayerAssetOffersWithHttpInfoAsync(string entityId, string marketplaceId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetPlayerAssetOffers");

            // verify the required parameter 'marketplaceId' is set
            if (marketplaceId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'marketplaceId' when calling MarketplaceApi->GetPlayerAssetOffers");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("marketplaceId", Beam.Client.ClientUtils.ParameterToString(marketplaceId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetOffersResponse>("/v1/marketplace/profiles/{entityId}/offers/asset/{marketplaceId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerAssetOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all offers that player created 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetAssetOffersResponse</returns>
        public GetAssetOffersResponse GetPlayerOffers(string entityId, decimal? chainId)
        {
            Beam.Client.ApiResponse<GetAssetOffersResponse> localVarResponse = GetPlayerOffersWithHttpInfo(entityId, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all offers that player created 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetOffersResponse</returns>
        public Beam.Client.ApiResponse<GetAssetOffersResponse> GetPlayerOffersWithHttpInfo(string entityId, decimal? chainId)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetPlayerOffers");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetOffersResponse>("/v1/marketplace/profiles/{entityId}/offers", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all offers that player created 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetOffersResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetOffersResponse> GetPlayerOffersAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetOffersResponse> localVarResponse = await GetPlayerOffersWithHttpInfoAsync(entityId, chainId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all offers that player created 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetOffersResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetOffersResponse>> GetPlayerOffersWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->GetPlayerOffers");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetOffersResponse>("/v1/marketplace/profiles/{entityId}/offers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayerOffers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <returns>SellAssetResponse</returns>
        public SellAssetResponse ListAsset(string entityId, SellAssetRequestInput sellAssetRequestInput)
        {
            Beam.Client.ApiResponse<SellAssetResponse> localVarResponse = ListAssetWithHttpInfo(entityId, sellAssetRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <returns>ApiResponse of SellAssetResponse</returns>
        public Beam.Client.ApiResponse<SellAssetResponse> ListAssetWithHttpInfo(string entityId, SellAssetRequestInput sellAssetRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->ListAsset");

            // verify the required parameter 'sellAssetRequestInput' is set
            if (sellAssetRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'sellAssetRequestInput' when calling MarketplaceApi->ListAsset");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = sellAssetRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SellAssetResponse>("/v1/marketplace/profiles/{entityId}/listing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SellAssetResponse</returns>
        public async System.Threading.Tasks.Task<SellAssetResponse> ListAssetAsync(string entityId, SellAssetRequestInput sellAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<SellAssetResponse> localVarResponse = await ListAssetWithHttpInfoAsync(entityId, sellAssetRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SellAssetResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<SellAssetResponse>> ListAssetWithHttpInfoAsync(string entityId, SellAssetRequestInput sellAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling MarketplaceApi->ListAsset");

            // verify the required parameter 'sellAssetRequestInput' is set
            if (sellAssetRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'sellAssetRequestInput' when calling MarketplaceApi->ListAsset");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = sellAssetRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SellAssetResponse>("/v1/marketplace/profiles/{entityId}/listing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
