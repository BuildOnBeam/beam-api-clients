// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Beam.Client;
using Beam.Model;
using System.Diagnostics.CodeAnalysis;

namespace Beam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMarketplaceApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MarketplaceApiEvents Events { get; }

        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptAssetOfferApiResponse"/>&gt;</returns>
        Task<IAcceptAssetOfferApiResponse> AcceptAssetOfferAsync(AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, string entityId, string offerId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Accept an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptAssetOfferApiResponse"/>&gt;</returns>
        Task<IAcceptAssetOfferApiResponse> AcceptAssetOfferOrDefaultAsync(AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, string entityId, string offerId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBuyListedAssetApiResponse"/>&gt;</returns>
        Task<IBuyListedAssetApiResponse> BuyListedAssetAsync(BuyAssetRequestInput buyAssetRequestInput, string entityId, string orderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Buy listed asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBuyListedAssetApiResponse"/>&gt;</returns>
        Task<IBuyListedAssetApiResponse> BuyListedAssetOrDefaultAsync(BuyAssetRequestInput buyAssetRequestInput, string entityId, string orderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelAssetOfferApiResponse"/>&gt;</returns>
        Task<ICancelAssetOfferApiResponse> CancelAssetOfferAsync(CancelAssetOfferRequestInput cancelAssetOfferRequestInput, string entityId, string offerId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelAssetOfferApiResponse"/>&gt;</returns>
        Task<ICancelAssetOfferApiResponse> CancelAssetOfferOrDefaultAsync(CancelAssetOfferRequestInput cancelAssetOfferRequestInput, string entityId, string offerId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelListingApiResponse"/>&gt;</returns>
        Task<ICancelListingApiResponse> CancelListingAsync(CancelAssetListingRequestInput cancelAssetListingRequestInput, string entityId, string orderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Cancel asset listing
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelListingApiResponse"/>&gt;</returns>
        Task<ICancelListingApiResponse> CancelListingOrDefaultAsync(CancelAssetListingRequestInput cancelAssetListingRequestInput, string entityId, string orderId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAssetOfferApiResponse"/>&gt;</returns>
        Task<ICreateAssetOfferApiResponse> CreateAssetOfferAsync(CreateAssetOfferRequestInput createAssetOfferRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Make an offer for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAssetOfferApiResponse"/>&gt;</returns>
        Task<ICreateAssetOfferApiResponse> CreateAssetOfferOrDefaultAsync(CreateAssetOfferRequestInput createAssetOfferRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetOffersApiResponse"/>&gt;</returns>
        Task<IGetAssetOffersApiResponse> GetAssetOffersAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all offers for an asset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="marketplaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetOffersApiResponse"/>&gt;</returns>
        Task<IGetAssetOffersApiResponse> GetAssetOffersOrDefaultAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChainCurrenciesApiResponse"/>&gt;</returns>
        Task<IGetChainCurrenciesApiResponse> GetChainCurrenciesAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChainCurrenciesApiResponse"/>&gt;</returns>
        Task<IGetChainCurrenciesApiResponse> GetChainCurrenciesOrDefaultAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsApiResponse> GetListedAssetsAsync(Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsApiResponse> GetListedAssetsOrDefaultAsync(Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfileApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsForProfileApiResponse> GetListedAssetsForProfileAsync(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfileApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsForProfileApiResponse> GetListedAssetsForProfileOrDefaultAsync(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfilePostApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsForProfilePostApiResponse> GetListedAssetsForProfilePostAsync(GetAssetsBodyInput getAssetsBodyInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfilePostApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsForProfilePostApiResponse> GetListedAssetsForProfilePostOrDefaultAsync(GetAssetsBodyInput getAssetsBodyInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsPostApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsPostApiResponse> GetListedAssetsPostAsync(GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsPostApiResponse"/>&gt;</returns>
        Task<IGetListedAssetsPostApiResponse> GetListedAssetsPostOrDefaultAsync(GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all asset offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerAssetOffersApiResponse"/>&gt;</returns>
        Task<IGetPlayerAssetOffersApiResponse> GetPlayerAssetOffersAsync(string entityId, string marketplaceId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all asset offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerAssetOffersApiResponse"/>&gt;</returns>
        Task<IGetPlayerAssetOffersApiResponse> GetPlayerAssetOffersOrDefaultAsync(string entityId, string marketplaceId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerOffersApiResponse"/>&gt;</returns>
        Task<IGetPlayerOffersApiResponse> GetPlayerOffersAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all offers that player created
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerOffersApiResponse"/>&gt;</returns>
        Task<IGetPlayerOffersApiResponse> GetPlayerOffersOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAssetApiResponse"/>&gt;</returns>
        Task<IListAssetApiResponse> ListAssetAsync(SellAssetRequestInput sellAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List an asset for sale
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAssetApiResponse"/>&gt;</returns>
        Task<IListAssetApiResponse> ListAssetOrDefaultAsync(SellAssetRequestInput sellAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAcceptAssetOfferApiResponse"/>
    /// </summary>
    public interface IAcceptAssetOfferApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.AcceptOfferResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IBuyListedAssetApiResponse"/>
    /// </summary>
    public interface IBuyListedAssetApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.BuyAssetResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICancelAssetOfferApiResponse"/>
    /// </summary>
    public interface ICancelAssetOfferApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.CancelOfferResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICancelListingApiResponse"/>
    /// </summary>
    public interface ICancelListingApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.BuyAssetResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ICreateAssetOfferApiResponse"/>
    /// </summary>
    public interface ICreateAssetOfferApiResponse : Beam.Client.IApiResponse, ICreated<Beam.Model.CreateOfferResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IGetAssetOffersApiResponse"/>
    /// </summary>
    public interface IGetAssetOffersApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetOffersResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetChainCurrenciesApiResponse"/>
    /// </summary>
    public interface IGetChainCurrenciesApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetChainCurrenciesResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetListedAssetsApiResponse"/>
    /// </summary>
    public interface IGetListedAssetsApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetListingsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetListedAssetsForProfileApiResponse"/>
    /// </summary>
    public interface IGetListedAssetsForProfileApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetListingsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetListedAssetsForProfilePostApiResponse"/>
    /// </summary>
    public interface IGetListedAssetsForProfilePostApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetListingsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetListedAssetsPostApiResponse"/>
    /// </summary>
    public interface IGetListedAssetsPostApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetListingsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlayerAssetOffersApiResponse"/>
    /// </summary>
    public interface IGetPlayerAssetOffersApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetOffersResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetPlayerOffersApiResponse"/>
    /// </summary>
    public interface IGetPlayerOffersApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetOffersResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IListAssetApiResponse"/>
    /// </summary>
    public interface IListAssetApiResponse : Beam.Client.IApiResponse, ICreated<Beam.Model.SellAssetResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MarketplaceApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnAcceptAssetOffer;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorAcceptAssetOffer;

        internal void ExecuteOnAcceptAssetOffer(MarketplaceApi.AcceptAssetOfferApiResponse apiResponse)
        {
            OnAcceptAssetOffer?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAcceptAssetOffer(Exception exception)
        {
            OnErrorAcceptAssetOffer?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnBuyListedAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorBuyListedAsset;

        internal void ExecuteOnBuyListedAsset(MarketplaceApi.BuyListedAssetApiResponse apiResponse)
        {
            OnBuyListedAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorBuyListedAsset(Exception exception)
        {
            OnErrorBuyListedAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCancelAssetOffer;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCancelAssetOffer;

        internal void ExecuteOnCancelAssetOffer(MarketplaceApi.CancelAssetOfferApiResponse apiResponse)
        {
            OnCancelAssetOffer?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCancelAssetOffer(Exception exception)
        {
            OnErrorCancelAssetOffer?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCancelListing;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCancelListing;

        internal void ExecuteOnCancelListing(MarketplaceApi.CancelListingApiResponse apiResponse)
        {
            OnCancelListing?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCancelListing(Exception exception)
        {
            OnErrorCancelListing?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnCreateAssetOffer;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorCreateAssetOffer;

        internal void ExecuteOnCreateAssetOffer(MarketplaceApi.CreateAssetOfferApiResponse apiResponse)
        {
            OnCreateAssetOffer?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateAssetOffer(Exception exception)
        {
            OnErrorCreateAssetOffer?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAssetOffers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAssetOffers;

        internal void ExecuteOnGetAssetOffers(MarketplaceApi.GetAssetOffersApiResponse apiResponse)
        {
            OnGetAssetOffers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAssetOffers(Exception exception)
        {
            OnErrorGetAssetOffers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetChainCurrencies;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetChainCurrencies;

        internal void ExecuteOnGetChainCurrencies(MarketplaceApi.GetChainCurrenciesApiResponse apiResponse)
        {
            OnGetChainCurrencies?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChainCurrencies(Exception exception)
        {
            OnErrorGetChainCurrencies?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetListedAssets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetListedAssets;

        internal void ExecuteOnGetListedAssets(MarketplaceApi.GetListedAssetsApiResponse apiResponse)
        {
            OnGetListedAssets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetListedAssets(Exception exception)
        {
            OnErrorGetListedAssets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetListedAssetsForProfile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetListedAssetsForProfile;

        internal void ExecuteOnGetListedAssetsForProfile(MarketplaceApi.GetListedAssetsForProfileApiResponse apiResponse)
        {
            OnGetListedAssetsForProfile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetListedAssetsForProfile(Exception exception)
        {
            OnErrorGetListedAssetsForProfile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetListedAssetsForProfilePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetListedAssetsForProfilePost;

        internal void ExecuteOnGetListedAssetsForProfilePost(MarketplaceApi.GetListedAssetsForProfilePostApiResponse apiResponse)
        {
            OnGetListedAssetsForProfilePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetListedAssetsForProfilePost(Exception exception)
        {
            OnErrorGetListedAssetsForProfilePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetListedAssetsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetListedAssetsPost;

        internal void ExecuteOnGetListedAssetsPost(MarketplaceApi.GetListedAssetsPostApiResponse apiResponse)
        {
            OnGetListedAssetsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetListedAssetsPost(Exception exception)
        {
            OnErrorGetListedAssetsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPlayerAssetOffers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPlayerAssetOffers;

        internal void ExecuteOnGetPlayerAssetOffers(MarketplaceApi.GetPlayerAssetOffersApiResponse apiResponse)
        {
            OnGetPlayerAssetOffers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlayerAssetOffers(Exception exception)
        {
            OnErrorGetPlayerAssetOffers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetPlayerOffers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetPlayerOffers;

        internal void ExecuteOnGetPlayerOffers(MarketplaceApi.GetPlayerOffersApiResponse apiResponse)
        {
            OnGetPlayerOffers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPlayerOffers(Exception exception)
        {
            OnErrorGetPlayerOffers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnListAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorListAsset;

        internal void ExecuteOnListAsset(MarketplaceApi.ListAssetApiResponse apiResponse)
        {
            OnListAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorListAsset(Exception exception)
        {
            OnErrorListAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MarketplaceApi : IMarketplaceApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MarketplaceApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MarketplaceApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketplaceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketplaceApi(ILogger<MarketplaceApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MarketplaceApiEvents marketplaceApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MarketplaceApi>();
            HttpClient = httpClient;
            Events = marketplaceApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatAcceptAssetOffer(AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, ref string entityId, ref string offerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <returns></returns>
        private void ValidateAcceptAssetOffer(AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, string entityId, string offerId)
        {
            if (acceptAssetOfferRequestInput == null)
                throw new ArgumentNullException(nameof(acceptAssetOfferRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (offerId == null)
                throw new ArgumentNullException(nameof(offerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        private void AfterAcceptAssetOfferDefaultImplementation(IAcceptAssetOfferApiResponse apiResponseLocalVar, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, string entityId, string offerId)
        {
            bool suppressDefaultLog = false;
            AfterAcceptAssetOffer(ref suppressDefaultLog, apiResponseLocalVar, acceptAssetOfferRequestInput, entityId, offerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        partial void AfterAcceptAssetOffer(ref bool suppressDefaultLog, IAcceptAssetOfferApiResponse apiResponseLocalVar, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, string entityId, string offerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        private void OnErrorAcceptAssetOfferDefaultImplementation(Exception exception, string pathFormat, string path, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, string entityId, string offerId)
        {
            bool suppressDefaultLog = false;
            OnErrorAcceptAssetOffer(ref suppressDefaultLog, exception, pathFormat, path, acceptAssetOfferRequestInput, entityId, offerId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        partial void OnErrorAcceptAssetOffer(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, string entityId, string offerId);

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptAssetOfferApiResponse"/>&gt;</returns>
        public async Task<IAcceptAssetOfferApiResponse> AcceptAssetOfferOrDefaultAsync(AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, string entityId, string offerId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AcceptAssetOfferAsync(acceptAssetOfferRequestInput, entityId, offerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Accept an offer for an asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="acceptAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAcceptAssetOfferApiResponse"/>&gt;</returns>
        public async Task<IAcceptAssetOfferApiResponse> AcceptAssetOfferAsync(AcceptAssetOfferRequestInput acceptAssetOfferRequestInput, string entityId, string offerId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAcceptAssetOffer(acceptAssetOfferRequestInput, entityId, offerId);

                FormatAcceptAssetOffer(acceptAssetOfferRequestInput, ref entityId, ref offerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}/offers/{offerId}/accept";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BofferId%7D", Uri.EscapeDataString(offerId.ToString()));

                    httpRequestMessageLocalVar.Content = (acceptAssetOfferRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(acceptAssetOfferRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AcceptAssetOfferApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AcceptAssetOfferApiResponse>();

                        AcceptAssetOfferApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}/offers/{offerId}/accept", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAcceptAssetOfferDefaultImplementation(apiResponseLocalVar, acceptAssetOfferRequestInput, entityId, offerId);

                        Events.ExecuteOnAcceptAssetOffer(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAcceptAssetOfferDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}/offers/{offerId}/accept", uriBuilderLocalVar.Path, acceptAssetOfferRequestInput, entityId, offerId);
                Events.ExecuteOnErrorAcceptAssetOffer(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AcceptAssetOfferApiResponse"/>
        /// </summary>
        public partial class AcceptAssetOfferApiResponse : Beam.Client.ApiResponse, IAcceptAssetOfferApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AcceptAssetOfferApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AcceptAssetOfferApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AcceptAssetOfferApiResponse(ILogger<AcceptAssetOfferApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.AcceptOfferResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.AcceptOfferResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.AcceptOfferResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatBuyListedAsset(BuyAssetRequestInput buyAssetRequestInput, ref string entityId, ref string orderId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <returns></returns>
        private void ValidateBuyListedAsset(BuyAssetRequestInput buyAssetRequestInput, string entityId, string orderId)
        {
            if (buyAssetRequestInput == null)
                throw new ArgumentNullException(nameof(buyAssetRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        private void AfterBuyListedAssetDefaultImplementation(IBuyListedAssetApiResponse apiResponseLocalVar, BuyAssetRequestInput buyAssetRequestInput, string entityId, string orderId)
        {
            bool suppressDefaultLog = false;
            AfterBuyListedAsset(ref suppressDefaultLog, apiResponseLocalVar, buyAssetRequestInput, entityId, orderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        partial void AfterBuyListedAsset(ref bool suppressDefaultLog, IBuyListedAssetApiResponse apiResponseLocalVar, BuyAssetRequestInput buyAssetRequestInput, string entityId, string orderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        private void OnErrorBuyListedAssetDefaultImplementation(Exception exception, string pathFormat, string path, BuyAssetRequestInput buyAssetRequestInput, string entityId, string orderId)
        {
            bool suppressDefaultLog = false;
            OnErrorBuyListedAsset(ref suppressDefaultLog, exception, pathFormat, path, buyAssetRequestInput, entityId, orderId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        partial void OnErrorBuyListedAsset(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, BuyAssetRequestInput buyAssetRequestInput, string entityId, string orderId);

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBuyListedAssetApiResponse"/>&gt;</returns>
        public async Task<IBuyListedAssetApiResponse> BuyListedAssetOrDefaultAsync(BuyAssetRequestInput buyAssetRequestInput, string entityId, string orderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await BuyListedAssetAsync(buyAssetRequestInput, entityId, orderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Buy listed asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="buyAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IBuyListedAssetApiResponse"/>&gt;</returns>
        public async Task<IBuyListedAssetApiResponse> BuyListedAssetAsync(BuyAssetRequestInput buyAssetRequestInput, string entityId, string orderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateBuyListedAsset(buyAssetRequestInput, entityId, orderId);

                FormatBuyListedAsset(buyAssetRequestInput, ref entityId, ref orderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}/listing/{orderId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BorderId%7D", Uri.EscapeDataString(orderId.ToString()));

                    httpRequestMessageLocalVar.Content = (buyAssetRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(buyAssetRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<BuyListedAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<BuyListedAssetApiResponse>();

                        BuyListedAssetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}/listing/{orderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterBuyListedAssetDefaultImplementation(apiResponseLocalVar, buyAssetRequestInput, entityId, orderId);

                        Events.ExecuteOnBuyListedAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorBuyListedAssetDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}/listing/{orderId}", uriBuilderLocalVar.Path, buyAssetRequestInput, entityId, orderId);
                Events.ExecuteOnErrorBuyListedAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="BuyListedAssetApiResponse"/>
        /// </summary>
        public partial class BuyListedAssetApiResponse : Beam.Client.ApiResponse, IBuyListedAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<BuyListedAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="BuyListedAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public BuyListedAssetApiResponse(ILogger<BuyListedAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.BuyAssetResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.BuyAssetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.BuyAssetResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCancelAssetOffer(CancelAssetOfferRequestInput cancelAssetOfferRequestInput, ref string entityId, ref string offerId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <returns></returns>
        private void ValidateCancelAssetOffer(CancelAssetOfferRequestInput cancelAssetOfferRequestInput, string entityId, string offerId)
        {
            if (cancelAssetOfferRequestInput == null)
                throw new ArgumentNullException(nameof(cancelAssetOfferRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (offerId == null)
                throw new ArgumentNullException(nameof(offerId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        private void AfterCancelAssetOfferDefaultImplementation(ICancelAssetOfferApiResponse apiResponseLocalVar, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, string entityId, string offerId)
        {
            bool suppressDefaultLog = false;
            AfterCancelAssetOffer(ref suppressDefaultLog, apiResponseLocalVar, cancelAssetOfferRequestInput, entityId, offerId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        partial void AfterCancelAssetOffer(ref bool suppressDefaultLog, ICancelAssetOfferApiResponse apiResponseLocalVar, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, string entityId, string offerId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        private void OnErrorCancelAssetOfferDefaultImplementation(Exception exception, string pathFormat, string path, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, string entityId, string offerId)
        {
            bool suppressDefaultLog = false;
            OnErrorCancelAssetOffer(ref suppressDefaultLog, exception, pathFormat, path, cancelAssetOfferRequestInput, entityId, offerId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        partial void OnErrorCancelAssetOffer(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, CancelAssetOfferRequestInput cancelAssetOfferRequestInput, string entityId, string offerId);

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelAssetOfferApiResponse"/>&gt;</returns>
        public async Task<ICancelAssetOfferApiResponse> CancelAssetOfferOrDefaultAsync(CancelAssetOfferRequestInput cancelAssetOfferRequestInput, string entityId, string offerId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CancelAssetOfferAsync(cancelAssetOfferRequestInput, entityId, offerId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Cancel an offer for an asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="offerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelAssetOfferApiResponse"/>&gt;</returns>
        public async Task<ICancelAssetOfferApiResponse> CancelAssetOfferAsync(CancelAssetOfferRequestInput cancelAssetOfferRequestInput, string entityId, string offerId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCancelAssetOffer(cancelAssetOfferRequestInput, entityId, offerId);

                FormatCancelAssetOffer(cancelAssetOfferRequestInput, ref entityId, ref offerId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}/offers/{offerId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BofferId%7D", Uri.EscapeDataString(offerId.ToString()));

                    httpRequestMessageLocalVar.Content = (cancelAssetOfferRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(cancelAssetOfferRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CancelAssetOfferApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CancelAssetOfferApiResponse>();

                        CancelAssetOfferApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}/offers/{offerId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCancelAssetOfferDefaultImplementation(apiResponseLocalVar, cancelAssetOfferRequestInput, entityId, offerId);

                        Events.ExecuteOnCancelAssetOffer(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCancelAssetOfferDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}/offers/{offerId}", uriBuilderLocalVar.Path, cancelAssetOfferRequestInput, entityId, offerId);
                Events.ExecuteOnErrorCancelAssetOffer(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CancelAssetOfferApiResponse"/>
        /// </summary>
        public partial class CancelAssetOfferApiResponse : Beam.Client.ApiResponse, ICancelAssetOfferApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CancelAssetOfferApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CancelAssetOfferApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CancelAssetOfferApiResponse(ILogger<CancelAssetOfferApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.CancelOfferResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.CancelOfferResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.CancelOfferResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCancelListing(CancelAssetListingRequestInput cancelAssetListingRequestInput, ref string entityId, ref string orderId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <returns></returns>
        private void ValidateCancelListing(CancelAssetListingRequestInput cancelAssetListingRequestInput, string entityId, string orderId)
        {
            if (cancelAssetListingRequestInput == null)
                throw new ArgumentNullException(nameof(cancelAssetListingRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        private void AfterCancelListingDefaultImplementation(ICancelListingApiResponse apiResponseLocalVar, CancelAssetListingRequestInput cancelAssetListingRequestInput, string entityId, string orderId)
        {
            bool suppressDefaultLog = false;
            AfterCancelListing(ref suppressDefaultLog, apiResponseLocalVar, cancelAssetListingRequestInput, entityId, orderId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        partial void AfterCancelListing(ref bool suppressDefaultLog, ICancelListingApiResponse apiResponseLocalVar, CancelAssetListingRequestInput cancelAssetListingRequestInput, string entityId, string orderId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        private void OnErrorCancelListingDefaultImplementation(Exception exception, string pathFormat, string path, CancelAssetListingRequestInput cancelAssetListingRequestInput, string entityId, string orderId)
        {
            bool suppressDefaultLog = false;
            OnErrorCancelListing(ref suppressDefaultLog, exception, pathFormat, path, cancelAssetListingRequestInput, entityId, orderId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        partial void OnErrorCancelListing(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, CancelAssetListingRequestInput cancelAssetListingRequestInput, string entityId, string orderId);

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelListingApiResponse"/>&gt;</returns>
        public async Task<ICancelListingApiResponse> CancelListingOrDefaultAsync(CancelAssetListingRequestInput cancelAssetListingRequestInput, string entityId, string orderId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CancelListingAsync(cancelAssetListingRequestInput, entityId, orderId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Cancel asset listing 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancelAssetListingRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="orderId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICancelListingApiResponse"/>&gt;</returns>
        public async Task<ICancelListingApiResponse> CancelListingAsync(CancelAssetListingRequestInput cancelAssetListingRequestInput, string entityId, string orderId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCancelListing(cancelAssetListingRequestInput, entityId, orderId);

                FormatCancelListing(cancelAssetListingRequestInput, ref entityId, ref orderId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}/listing/{orderId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BorderId%7D", Uri.EscapeDataString(orderId.ToString()));

                    httpRequestMessageLocalVar.Content = (cancelAssetListingRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(cancelAssetListingRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CancelListingApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CancelListingApiResponse>();

                        CancelListingApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}/listing/{orderId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCancelListingDefaultImplementation(apiResponseLocalVar, cancelAssetListingRequestInput, entityId, orderId);

                        Events.ExecuteOnCancelListing(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCancelListingDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}/listing/{orderId}", uriBuilderLocalVar.Path, cancelAssetListingRequestInput, entityId, orderId);
                Events.ExecuteOnErrorCancelListing(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CancelListingApiResponse"/>
        /// </summary>
        public partial class CancelListingApiResponse : Beam.Client.ApiResponse, ICancelListingApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CancelListingApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CancelListingApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CancelListingApiResponse(ILogger<CancelListingApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.BuyAssetResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.BuyAssetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.BuyAssetResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateAssetOffer(CreateAssetOfferRequestInput createAssetOfferRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateCreateAssetOffer(CreateAssetOfferRequestInput createAssetOfferRequestInput, string entityId)
        {
            if (createAssetOfferRequestInput == null)
                throw new ArgumentNullException(nameof(createAssetOfferRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterCreateAssetOfferDefaultImplementation(ICreateAssetOfferApiResponse apiResponseLocalVar, CreateAssetOfferRequestInput createAssetOfferRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterCreateAssetOffer(ref suppressDefaultLog, apiResponseLocalVar, createAssetOfferRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterCreateAssetOffer(ref bool suppressDefaultLog, ICreateAssetOfferApiResponse apiResponseLocalVar, CreateAssetOfferRequestInput createAssetOfferRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorCreateAssetOfferDefaultImplementation(Exception exception, string pathFormat, string path, CreateAssetOfferRequestInput createAssetOfferRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateAssetOffer(ref suppressDefaultLog, exception, pathFormat, path, createAssetOfferRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorCreateAssetOffer(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, CreateAssetOfferRequestInput createAssetOfferRequestInput, string entityId);

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAssetOfferApiResponse"/>&gt;</returns>
        public async Task<ICreateAssetOfferApiResponse> CreateAssetOfferOrDefaultAsync(CreateAssetOfferRequestInput createAssetOfferRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateAssetOfferAsync(createAssetOfferRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Make an offer for an asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createAssetOfferRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateAssetOfferApiResponse"/>&gt;</returns>
        public async Task<ICreateAssetOfferApiResponse> CreateAssetOfferAsync(CreateAssetOfferRequestInput createAssetOfferRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateAssetOffer(createAssetOfferRequestInput, entityId);

                FormatCreateAssetOffer(createAssetOfferRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}/offers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (createAssetOfferRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createAssetOfferRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateAssetOfferApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateAssetOfferApiResponse>();

                        CreateAssetOfferApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}/offers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateAssetOfferDefaultImplementation(apiResponseLocalVar, createAssetOfferRequestInput, entityId);

                        Events.ExecuteOnCreateAssetOffer(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateAssetOfferDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}/offers", uriBuilderLocalVar.Path, createAssetOfferRequestInput, entityId);
                Events.ExecuteOnErrorCreateAssetOffer(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateAssetOfferApiResponse"/>
        /// </summary>
        public partial class CreateAssetOfferApiResponse : Beam.Client.ApiResponse, ICreateAssetOfferApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateAssetOfferApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateAssetOfferApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateAssetOfferApiResponse(ILogger<CreateAssetOfferApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Beam.Model.CreateOfferResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.CreateOfferResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Beam.Model.CreateOfferResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAssetOffers(ref string marketplaceId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="marketplaceId"></param>
        /// <returns></returns>
        private void ValidateGetAssetOffers(string marketplaceId)
        {
            if (marketplaceId == null)
                throw new ArgumentNullException(nameof(marketplaceId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="marketplaceId"></param>
        private void AfterGetAssetOffersDefaultImplementation(IGetAssetOffersApiResponse apiResponseLocalVar, string marketplaceId)
        {
            bool suppressDefaultLog = false;
            AfterGetAssetOffers(ref suppressDefaultLog, apiResponseLocalVar, marketplaceId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="marketplaceId"></param>
        partial void AfterGetAssetOffers(ref bool suppressDefaultLog, IGetAssetOffersApiResponse apiResponseLocalVar, string marketplaceId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="marketplaceId"></param>
        private void OnErrorGetAssetOffersDefaultImplementation(Exception exception, string pathFormat, string path, string marketplaceId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetAssetOffers(ref suppressDefaultLog, exception, pathFormat, path, marketplaceId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="marketplaceId"></param>
        partial void OnErrorGetAssetOffers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string marketplaceId);

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <param name="marketplaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetOffersApiResponse"/>&gt;</returns>
        public async Task<IGetAssetOffersApiResponse> GetAssetOffersOrDefaultAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetOffersAsync(marketplaceId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all offers for an asset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="marketplaceId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetOffersApiResponse"/>&gt;</returns>
        public async Task<IGetAssetOffersApiResponse> GetAssetOffersAsync(string marketplaceId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAssetOffers(marketplaceId);

                FormatGetAssetOffers(ref marketplaceId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/offers/asset/{marketplaceId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BmarketplaceId%7D", Uri.EscapeDataString(marketplaceId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetOffersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetOffersApiResponse>();

                        GetAssetOffersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/offers/asset/{marketplaceId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetOffersDefaultImplementation(apiResponseLocalVar, marketplaceId);

                        Events.ExecuteOnGetAssetOffers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetOffersDefaultImplementation(e, "/v1/marketplace/offers/asset/{marketplaceId}", uriBuilderLocalVar.Path, marketplaceId);
                Events.ExecuteOnErrorGetAssetOffers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetOffersApiResponse"/>
        /// </summary>
        public partial class GetAssetOffersApiResponse : Beam.Client.ApiResponse, IGetAssetOffersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetOffersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetOffersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetOffersApiResponse(ILogger<GetAssetOffersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetOffersResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetOffersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetOffersResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChainCurrencies(ref decimal chainId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        private void AfterGetChainCurrenciesDefaultImplementation(IGetChainCurrenciesApiResponse apiResponseLocalVar, decimal chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetChainCurrencies(ref suppressDefaultLog, apiResponseLocalVar, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="chainId"></param>
        partial void AfterGetChainCurrencies(ref bool suppressDefaultLog, IGetChainCurrenciesApiResponse apiResponseLocalVar, decimal chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetChainCurrenciesDefaultImplementation(Exception exception, string pathFormat, string path, decimal chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChainCurrencies(ref suppressDefaultLog, exception, pathFormat, path, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetChainCurrencies(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, decimal chainId);

        /// <summary>
        ///  
        /// </summary>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChainCurrenciesApiResponse"/>&gt;</returns>
        public async Task<IGetChainCurrenciesApiResponse> GetChainCurrenciesOrDefaultAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChainCurrenciesAsync(chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChainCurrenciesApiResponse"/>&gt;</returns>
        public async Task<IGetChainCurrenciesApiResponse> GetChainCurrenciesAsync(decimal chainId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChainCurrencies(ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/chain-currencies/{chainId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchainId%7D", Uri.EscapeDataString(chainId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChainCurrenciesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChainCurrenciesApiResponse>();

                        GetChainCurrenciesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/chain-currencies/{chainId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChainCurrenciesDefaultImplementation(apiResponseLocalVar, chainId);

                        Events.ExecuteOnGetChainCurrencies(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChainCurrenciesDefaultImplementation(e, "/v1/marketplace/chain-currencies/{chainId}", uriBuilderLocalVar.Path, chainId);
                Events.ExecuteOnErrorGetChainCurrencies(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChainCurrenciesApiResponse"/>
        /// </summary>
        public partial class GetChainCurrenciesApiResponse : Beam.Client.ApiResponse, IGetChainCurrenciesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChainCurrenciesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChainCurrenciesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChainCurrenciesApiResponse(ILogger<GetChainCurrenciesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetChainCurrenciesResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetChainCurrenciesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetChainCurrenciesResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetListedAssets(Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, ref Option<decimal> limit, ref Option<decimal> offset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetListedAssets(Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort)
        {
            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetListedAssetsDefaultImplementation(IGetListedAssetsApiResponse apiResponseLocalVar, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetListedAssets(ref suppressDefaultLog, apiResponseLocalVar, filter, sort, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetListedAssets(ref bool suppressDefaultLog, IGetListedAssetsApiResponse apiResponseLocalVar, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetListedAssetsDefaultImplementation(Exception exception, string pathFormat, string path, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            OnErrorGetListedAssets(ref suppressDefaultLog, exception, pathFormat, path, filter, sort, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetListedAssets(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsApiResponse> GetListedAssetsOrDefaultAsync(Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListedAssetsAsync(filter, sort, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsApiResponse> GetListedAssetsAsync(Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetListedAssets(filter, sort);

                FormatGetListedAssets(filter, sort, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = filter.Value.ToString();

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = sort.Value.ToString();

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = offset.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetListedAssetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetListedAssetsApiResponse>();

                        GetListedAssetsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListedAssetsDefaultImplementation(apiResponseLocalVar, filter, sort, limit, offset);

                        Events.ExecuteOnGetListedAssets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListedAssetsDefaultImplementation(e, "/v1/marketplace", uriBuilderLocalVar.Path, filter, sort, limit, offset);
                Events.ExecuteOnErrorGetListedAssets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetListedAssetsApiResponse"/>
        /// </summary>
        public partial class GetListedAssetsApiResponse : Beam.Client.ApiResponse, IGetListedAssetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetListedAssetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetListedAssetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetListedAssetsApiResponse(ILogger<GetListedAssetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetListingsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetListingsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetListingsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetListedAssetsForProfile(ref string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, ref Option<decimal> limit, ref Option<decimal> offset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetListedAssetsForProfile(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetListedAssetsForProfileDefaultImplementation(IGetListedAssetsForProfileApiResponse apiResponseLocalVar, string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetListedAssetsForProfile(ref suppressDefaultLog, apiResponseLocalVar, entityId, filter, sort, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetListedAssetsForProfile(ref bool suppressDefaultLog, IGetListedAssetsForProfileApiResponse apiResponseLocalVar, string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetListedAssetsForProfileDefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            OnErrorGetListedAssetsForProfile(ref suppressDefaultLog, exception, pathFormat, path, entityId, filter, sort, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetListedAssetsForProfile(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfileApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsForProfileApiResponse> GetListedAssetsForProfileOrDefaultAsync(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListedAssetsForProfileAsync(entityId, filter, sort, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfileApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsForProfileApiResponse> GetListedAssetsForProfileAsync(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetListedAssetsForProfile(entityId, filter, sort);

                FormatGetListedAssetsForProfile(ref entityId, filter, sort, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = filter.Value.ToString();

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = sort.Value.ToString();

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = offset.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetListedAssetsForProfileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetListedAssetsForProfileApiResponse>();

                        GetListedAssetsForProfileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListedAssetsForProfileDefaultImplementation(apiResponseLocalVar, entityId, filter, sort, limit, offset);

                        Events.ExecuteOnGetListedAssetsForProfile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListedAssetsForProfileDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}", uriBuilderLocalVar.Path, entityId, filter, sort, limit, offset);
                Events.ExecuteOnErrorGetListedAssetsForProfile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetListedAssetsForProfileApiResponse"/>
        /// </summary>
        public partial class GetListedAssetsForProfileApiResponse : Beam.Client.ApiResponse, IGetListedAssetsForProfileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetListedAssetsForProfileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetListedAssetsForProfileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetListedAssetsForProfileApiResponse(ILogger<GetListedAssetsForProfileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetListingsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetListingsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetListingsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetListedAssetsForProfilePost(GetAssetsBodyInput getAssetsBodyInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetListedAssetsForProfilePost(GetAssetsBodyInput getAssetsBodyInput, string entityId)
        {
            if (getAssetsBodyInput == null)
                throw new ArgumentNullException(nameof(getAssetsBodyInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        private void AfterGetListedAssetsForProfilePostDefaultImplementation(IGetListedAssetsForProfilePostApiResponse apiResponseLocalVar, GetAssetsBodyInput getAssetsBodyInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterGetListedAssetsForProfilePost(ref suppressDefaultLog, apiResponseLocalVar, getAssetsBodyInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        partial void AfterGetListedAssetsForProfilePost(ref bool suppressDefaultLog, IGetListedAssetsForProfilePostApiResponse apiResponseLocalVar, GetAssetsBodyInput getAssetsBodyInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorGetListedAssetsForProfilePostDefaultImplementation(Exception exception, string pathFormat, string path, GetAssetsBodyInput getAssetsBodyInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetListedAssetsForProfilePost(ref suppressDefaultLog, exception, pathFormat, path, getAssetsBodyInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorGetListedAssetsForProfilePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, GetAssetsBodyInput getAssetsBodyInput, string entityId);

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfilePostApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsForProfilePostApiResponse> GetListedAssetsForProfilePostOrDefaultAsync(GetAssetsBodyInput getAssetsBodyInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListedAssetsForProfilePostAsync(getAssetsBodyInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets listed by a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsForProfilePostApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsForProfilePostApiResponse> GetListedAssetsForProfilePostAsync(GetAssetsBodyInput getAssetsBodyInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetListedAssetsForProfilePost(getAssetsBodyInput, entityId);

                FormatGetListedAssetsForProfilePost(getAssetsBodyInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (getAssetsBodyInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getAssetsBodyInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetListedAssetsForProfilePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetListedAssetsForProfilePostApiResponse>();

                        GetListedAssetsForProfilePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListedAssetsForProfilePostDefaultImplementation(apiResponseLocalVar, getAssetsBodyInput, entityId);

                        Events.ExecuteOnGetListedAssetsForProfilePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListedAssetsForProfilePostDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}", uriBuilderLocalVar.Path, getAssetsBodyInput, entityId);
                Events.ExecuteOnErrorGetListedAssetsForProfilePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetListedAssetsForProfilePostApiResponse"/>
        /// </summary>
        public partial class GetListedAssetsForProfilePostApiResponse : Beam.Client.ApiResponse, IGetListedAssetsForProfilePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetListedAssetsForProfilePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetListedAssetsForProfilePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetListedAssetsForProfilePostApiResponse(ILogger<GetListedAssetsForProfilePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetListingsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetListingsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetListingsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetListedAssetsPost(GetAssetsBodyInput getAssetsBodyInput);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getAssetsBodyInput"></param>
        /// <returns></returns>
        private void ValidateGetListedAssetsPost(GetAssetsBodyInput getAssetsBodyInput)
        {
            if (getAssetsBodyInput == null)
                throw new ArgumentNullException(nameof(getAssetsBodyInput));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsBodyInput"></param>
        private void AfterGetListedAssetsPostDefaultImplementation(IGetListedAssetsPostApiResponse apiResponseLocalVar, GetAssetsBodyInput getAssetsBodyInput)
        {
            bool suppressDefaultLog = false;
            AfterGetListedAssetsPost(ref suppressDefaultLog, apiResponseLocalVar, getAssetsBodyInput);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsBodyInput"></param>
        partial void AfterGetListedAssetsPost(ref bool suppressDefaultLog, IGetListedAssetsPostApiResponse apiResponseLocalVar, GetAssetsBodyInput getAssetsBodyInput);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsBodyInput"></param>
        private void OnErrorGetListedAssetsPostDefaultImplementation(Exception exception, string pathFormat, string path, GetAssetsBodyInput getAssetsBodyInput)
        {
            bool suppressDefaultLog = false;
            OnErrorGetListedAssetsPost(ref suppressDefaultLog, exception, pathFormat, path, getAssetsBodyInput);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsBodyInput"></param>
        partial void OnErrorGetListedAssetsPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, GetAssetsBodyInput getAssetsBodyInput);

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsPostApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsPostApiResponse> GetListedAssetsPostOrDefaultAsync(GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetListedAssetsPostAsync(getAssetsBodyInput, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all listed assets for a game (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetListedAssetsPostApiResponse"/>&gt;</returns>
        public async Task<IGetListedAssetsPostApiResponse> GetListedAssetsPostAsync(GetAssetsBodyInput getAssetsBodyInput, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetListedAssetsPost(getAssetsBodyInput);

                FormatGetListedAssetsPost(getAssetsBodyInput);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace";

                    httpRequestMessageLocalVar.Content = (getAssetsBodyInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getAssetsBodyInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetListedAssetsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetListedAssetsPostApiResponse>();

                        GetListedAssetsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetListedAssetsPostDefaultImplementation(apiResponseLocalVar, getAssetsBodyInput);

                        Events.ExecuteOnGetListedAssetsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetListedAssetsPostDefaultImplementation(e, "/v1/marketplace", uriBuilderLocalVar.Path, getAssetsBodyInput);
                Events.ExecuteOnErrorGetListedAssetsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetListedAssetsPostApiResponse"/>
        /// </summary>
        public partial class GetListedAssetsPostApiResponse : Beam.Client.ApiResponse, IGetListedAssetsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetListedAssetsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetListedAssetsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetListedAssetsPostApiResponse(ILogger<GetListedAssetsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetListingsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetListingsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetListingsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPlayerAssetOffers(ref string entityId, ref string marketplaceId, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <returns></returns>
        private void ValidateGetPlayerAssetOffers(string entityId, string marketplaceId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (marketplaceId == null)
                throw new ArgumentNullException(nameof(marketplaceId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"></param>
        private void AfterGetPlayerAssetOffersDefaultImplementation(IGetPlayerAssetOffersApiResponse apiResponseLocalVar, string entityId, string marketplaceId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetPlayerAssetOffers(ref suppressDefaultLog, apiResponseLocalVar, entityId, marketplaceId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetPlayerAssetOffers(ref bool suppressDefaultLog, IGetPlayerAssetOffersApiResponse apiResponseLocalVar, string entityId, string marketplaceId, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetPlayerAssetOffersDefaultImplementation(Exception exception, string pathFormat, string path, string entityId, string marketplaceId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetPlayerAssetOffers(ref suppressDefaultLog, exception, pathFormat, path, entityId, marketplaceId, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetPlayerAssetOffers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, string marketplaceId, Option<decimal> chainId);

        /// <summary>
        /// Get all asset offers that player created 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerAssetOffersApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerAssetOffersApiResponse> GetPlayerAssetOffersOrDefaultAsync(string entityId, string marketplaceId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlayerAssetOffersAsync(entityId, marketplaceId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all asset offers that player created 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="marketplaceId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerAssetOffersApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerAssetOffersApiResponse> GetPlayerAssetOffersAsync(string entityId, string marketplaceId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPlayerAssetOffers(entityId, marketplaceId);

                FormatGetPlayerAssetOffers(ref entityId, ref marketplaceId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}/offers/asset/{marketplaceId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BmarketplaceId%7D", Uri.EscapeDataString(marketplaceId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlayerAssetOffersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlayerAssetOffersApiResponse>();

                        GetPlayerAssetOffersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}/offers/asset/{marketplaceId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlayerAssetOffersDefaultImplementation(apiResponseLocalVar, entityId, marketplaceId, chainId);

                        Events.ExecuteOnGetPlayerAssetOffers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlayerAssetOffersDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}/offers/asset/{marketplaceId}", uriBuilderLocalVar.Path, entityId, marketplaceId, chainId);
                Events.ExecuteOnErrorGetPlayerAssetOffers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlayerAssetOffersApiResponse"/>
        /// </summary>
        public partial class GetPlayerAssetOffersApiResponse : Beam.Client.ApiResponse, IGetPlayerAssetOffersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlayerAssetOffersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlayerAssetOffersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlayerAssetOffersApiResponse(ILogger<GetPlayerAssetOffersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetOffersResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetOffersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetOffersResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPlayerOffers(ref string entityId, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetPlayerOffers(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetPlayerOffersDefaultImplementation(IGetPlayerOffersApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetPlayerOffers(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetPlayerOffers(ref bool suppressDefaultLog, IGetPlayerOffersApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetPlayerOffersDefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetPlayerOffers(ref suppressDefaultLog, exception, pathFormat, path, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetPlayerOffers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Get all offers that player created 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerOffersApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerOffersApiResponse> GetPlayerOffersOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPlayerOffersAsync(entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all offers that player created 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPlayerOffersApiResponse"/>&gt;</returns>
        public async Task<IGetPlayerOffersApiResponse> GetPlayerOffersAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPlayerOffers(entityId);

                FormatGetPlayerOffers(ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}/offers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPlayerOffersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPlayerOffersApiResponse>();

                        GetPlayerOffersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}/offers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPlayerOffersDefaultImplementation(apiResponseLocalVar, entityId, chainId);

                        Events.ExecuteOnGetPlayerOffers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPlayerOffersDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}/offers", uriBuilderLocalVar.Path, entityId, chainId);
                Events.ExecuteOnErrorGetPlayerOffers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPlayerOffersApiResponse"/>
        /// </summary>
        public partial class GetPlayerOffersApiResponse : Beam.Client.ApiResponse, IGetPlayerOffersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPlayerOffersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPlayerOffersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPlayerOffersApiResponse(ILogger<GetPlayerOffersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetOffersResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetOffersResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetOffersResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatListAsset(SellAssetRequestInput sellAssetRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateListAsset(SellAssetRequestInput sellAssetRequestInput, string entityId)
        {
            if (sellAssetRequestInput == null)
                throw new ArgumentNullException(nameof(sellAssetRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterListAssetDefaultImplementation(IListAssetApiResponse apiResponseLocalVar, SellAssetRequestInput sellAssetRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterListAsset(ref suppressDefaultLog, apiResponseLocalVar, sellAssetRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterListAsset(ref bool suppressDefaultLog, IListAssetApiResponse apiResponseLocalVar, SellAssetRequestInput sellAssetRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorListAssetDefaultImplementation(Exception exception, string pathFormat, string path, SellAssetRequestInput sellAssetRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorListAsset(ref suppressDefaultLog, exception, pathFormat, path, sellAssetRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorListAsset(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, SellAssetRequestInput sellAssetRequestInput, string entityId);

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAssetApiResponse"/>&gt;</returns>
        public async Task<IListAssetApiResponse> ListAssetOrDefaultAsync(SellAssetRequestInput sellAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ListAssetAsync(sellAssetRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List an asset for sale 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sellAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IListAssetApiResponse"/>&gt;</returns>
        public async Task<IListAssetApiResponse> ListAssetAsync(SellAssetRequestInput sellAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateListAsset(sellAssetRequestInput, entityId);

                FormatListAsset(sellAssetRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/marketplace/profiles/{entityId}/listing";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (sellAssetRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(sellAssetRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar;
                    apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);
                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "x-api-key");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ListAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ListAssetApiResponse>();

                        ListAssetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/marketplace/profiles/{entityId}/listing", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterListAssetDefaultImplementation(apiResponseLocalVar, sellAssetRequestInput, entityId);

                        Events.ExecuteOnListAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorListAssetDefaultImplementation(e, "/v1/marketplace/profiles/{entityId}/listing", uriBuilderLocalVar.Path, sellAssetRequestInput, entityId);
                Events.ExecuteOnErrorListAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ListAssetApiResponse"/>
        /// </summary>
        public partial class ListAssetApiResponse : Beam.Client.ApiResponse, IListAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ListAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ListAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ListAssetApiResponse(ILogger<ListAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Beam.Model.SellAssetResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.SellAssetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Beam.Model.SellAssetResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
