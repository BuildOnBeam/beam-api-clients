// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Beam.Client;
using Beam.Model;
using System.Diagnostics.CodeAnalysis;

namespace Beam.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAssetsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AssetsApiEvents Events { get; }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetApiResponse"/>&gt;</returns>
        Task<IGetAssetApiResponse> GetAssetAsync(string assetAddress, string assetId, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetApiResponse"/>&gt;</returns>
        Task<IGetAssetApiResponse> GetAssetOrDefaultAsync(string assetAddress, string assetId, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsApiResponse"/>&gt;</returns>
        Task<IGetContractAssetsApiResponse> GetContractAssetsAsync(string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> chainId = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <param name="assetAddress"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsApiResponse"/>&gt;</returns>
        Task<IGetContractAssetsApiResponse> GetContractAssetsOrDefaultAsync(string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> chainId = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostApiResponse"/>&gt;</returns>
        Task<IGetContractAssetsPostApiResponse> GetContractAssetsPostAsync(GetAssetsBodyInput getAssetsBodyInput, string assetAddress, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostApiResponse"/>&gt;</returns>
        Task<IGetContractAssetsPostApiResponse> GetContractAssetsPostOrDefaultAsync(GetAssetsBodyInput getAssetsBodyInput, string assetAddress, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGameApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IGetProfileAssetsForGameApiResponse> GetProfileAssetsForGameAsync(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> chainId = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGameApiResponse"/>&gt;</returns>
        [Obsolete]
        Task<IGetProfileAssetsForGameApiResponse> GetProfileAssetsForGameOrDefaultAsync(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> chainId = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostApiResponse"/>&gt;</returns>
        Task<IGetProfileAssetsForGamePostApiResponse> GetProfileAssetsForGamePostAsync(GetAssetsBodyInput getAssetsBodyInput, string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostApiResponse"/>&gt;</returns>
        Task<IGetProfileAssetsForGamePostApiResponse> GetProfileAssetsForGamePostOrDefaultAsync(GetAssetsBodyInput getAssetsBodyInput, string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesApiResponse"/>&gt;</returns>
        Task<IGetProfileCurrenciesApiResponse> GetProfileCurrenciesAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesApiResponse"/>&gt;</returns>
        Task<IGetProfileCurrenciesApiResponse> GetProfileCurrenciesOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyApiResponse"/>&gt;</returns>
        Task<IGetProfileNativeCurrencyApiResponse> GetProfileNativeCurrencyAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyApiResponse"/>&gt;</returns>
        Task<IGetProfileNativeCurrencyApiResponse> GetProfileNativeCurrencyOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetApiResponse"/>&gt;</returns>
        Task<ITransferAssetApiResponse> TransferAssetAsync(TransferAssetRequestInput transferAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetApiResponse"/>&gt;</returns>
        Task<ITransferAssetApiResponse> TransferAssetOrDefaultAsync(TransferAssetRequestInput transferAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer the native token (MC)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenApiResponse"/>&gt;</returns>
        Task<ITransferNativeTokenApiResponse> TransferNativeTokenAsync(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer the native token (MC)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenApiResponse"/>&gt;</returns>
        Task<ITransferNativeTokenApiResponse> TransferNativeTokenOrDefaultAsync(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenApiResponse"/>&gt;</returns>
        Task<ITransferTokenApiResponse> TransferTokenAsync(TransferTokenRequestInput transferTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenApiResponse"/>&gt;</returns>
        Task<ITransferTokenApiResponse> TransferTokenOrDefaultAsync(TransferTokenRequestInput transferTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetAssetApiResponse"/>
    /// </summary>
    public interface IGetAssetApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetContractAssetsApiResponse"/>
    /// </summary>
    public interface IGetContractAssetsApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetContractAssetsPostApiResponse"/>
    /// </summary>
    public interface IGetContractAssetsPostApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileAssetsForGameApiResponse"/>
    /// </summary>
    public interface IGetProfileAssetsForGameApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileAssetsForGamePostApiResponse"/>
    /// </summary>
    public interface IGetProfileAssetsForGamePostApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetAssetsResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileCurrenciesApiResponse"/>
    /// </summary>
    public interface IGetProfileCurrenciesApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetProfileCurrenciesResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetProfileNativeCurrencyApiResponse"/>
    /// </summary>
    public interface IGetProfileNativeCurrencyApiResponse : Beam.Client.IApiResponse, IOk<Beam.Model.GetProfileNativeCurrencyResponse>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ITransferAssetApiResponse"/>
    /// </summary>
    public interface ITransferAssetApiResponse : Beam.Client.IApiResponse, ICreated<Beam.Model.TransferAssetResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ITransferNativeTokenApiResponse"/>
    /// </summary>
    public interface ITransferNativeTokenApiResponse : Beam.Client.IApiResponse, ICreated<Beam.Model.TransferTokenResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="ITransferTokenApiResponse"/>
    /// </summary>
    public interface ITransferTokenApiResponse : Beam.Client.IApiResponse, ICreated<Beam.Model.TransferTokenResponse>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AssetsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetAsset;

        internal void ExecuteOnGetAsset(AssetsApi.GetAssetApiResponse apiResponse)
        {
            OnGetAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAsset(Exception exception)
        {
            OnErrorGetAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetContractAssets;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetContractAssets;

        internal void ExecuteOnGetContractAssets(AssetsApi.GetContractAssetsApiResponse apiResponse)
        {
            OnGetContractAssets?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContractAssets(Exception exception)
        {
            OnErrorGetContractAssets?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetContractAssetsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetContractAssetsPost;

        internal void ExecuteOnGetContractAssetsPost(AssetsApi.GetContractAssetsPostApiResponse apiResponse)
        {
            OnGetContractAssetsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetContractAssetsPost(Exception exception)
        {
            OnErrorGetContractAssetsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfileAssetsForGame;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfileAssetsForGame;

        internal void ExecuteOnGetProfileAssetsForGame(AssetsApi.GetProfileAssetsForGameApiResponse apiResponse)
        {
            OnGetProfileAssetsForGame?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileAssetsForGame(Exception exception)
        {
            OnErrorGetProfileAssetsForGame?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfileAssetsForGamePost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfileAssetsForGamePost;

        internal void ExecuteOnGetProfileAssetsForGamePost(AssetsApi.GetProfileAssetsForGamePostApiResponse apiResponse)
        {
            OnGetProfileAssetsForGamePost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileAssetsForGamePost(Exception exception)
        {
            OnErrorGetProfileAssetsForGamePost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfileCurrencies;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfileCurrencies;

        internal void ExecuteOnGetProfileCurrencies(AssetsApi.GetProfileCurrenciesApiResponse apiResponse)
        {
            OnGetProfileCurrencies?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileCurrencies(Exception exception)
        {
            OnErrorGetProfileCurrencies?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnGetProfileNativeCurrency;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorGetProfileNativeCurrency;

        internal void ExecuteOnGetProfileNativeCurrency(AssetsApi.GetProfileNativeCurrencyApiResponse apiResponse)
        {
            OnGetProfileNativeCurrency?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetProfileNativeCurrency(Exception exception)
        {
            OnErrorGetProfileNativeCurrency?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTransferAsset;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTransferAsset;

        internal void ExecuteOnTransferAsset(AssetsApi.TransferAssetApiResponse apiResponse)
        {
            OnTransferAsset?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferAsset(Exception exception)
        {
            OnErrorTransferAsset?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTransferNativeToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTransferNativeToken;

        internal void ExecuteOnTransferNativeToken(AssetsApi.TransferNativeTokenApiResponse apiResponse)
        {
            OnTransferNativeToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferNativeToken(Exception exception)
        {
            OnErrorTransferNativeToken?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnTransferToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorTransferToken;

        internal void ExecuteOnTransferToken(AssetsApi.TransferTokenApiResponse apiResponse)
        {
            OnTransferToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorTransferToken(Exception exception)
        {
            OnErrorTransferToken?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AssetsApi : IAssetsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AssetsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AssetsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssetsApi(ILogger<AssetsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AssetsApiEvents assetsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AssetsApi>();
            HttpClient = httpClient;
            Events = assetsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetAsset(ref string assetAddress, ref string assetId, ref Option<decimal> chainId, ref Option<string> entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetAsset(string assetAddress, string assetId, Option<string> entityId)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (assetId == null)
                throw new ArgumentNullException(nameof(assetId));

            if (entityId.IsSet && entityId.Value == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        private void AfterGetAssetDefaultImplementation(IGetAssetApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<decimal> chainId, Option<string> entityId)
        {
            bool suppressDefaultLog = false;
            AfterGetAsset(ref suppressDefaultLog, apiResponseLocalVar, assetAddress, assetId, chainId, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        partial void AfterGetAsset(ref bool suppressDefaultLog, IGetAssetApiResponse apiResponseLocalVar, string assetAddress, string assetId, Option<decimal> chainId, Option<string> entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        private void OnErrorGetAssetDefaultImplementation(Exception exception, string pathFormat, string path, string assetAddress, string assetId, Option<decimal> chainId, Option<string> entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetAsset(ref suppressDefaultLog, exception, pathFormat, path, assetAddress, assetId, chainId, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"></param>
        /// <param name="entityId"></param>
        partial void OnErrorGetAsset(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string assetAddress, string assetId, Option<decimal> chainId, Option<string> entityId);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetApiResponse"/>&gt;</returns>
        public async Task<IGetAssetApiResponse> GetAssetOrDefaultAsync(string assetAddress, string assetId, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAssetAsync(assetAddress, assetId, chainId, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAssetApiResponse"/>&gt;</returns>
        public async Task<IGetAssetApiResponse> GetAssetAsync(string assetAddress, string assetId, Option<decimal> chainId = default, Option<string> entityId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAsset(assetAddress, assetId, entityId);

                FormatGetAsset(ref assetAddress, ref assetId, ref chainId, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/{assetAddress}/{assetId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetId%7D", Uri.EscapeDataString(assetId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    if (entityId.IsSet)
                        parseQueryStringLocalVar["entityId"] = entityId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAssetApiResponse>();

                        GetAssetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/{assetAddress}/{assetId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAssetDefaultImplementation(apiResponseLocalVar, assetAddress, assetId, chainId, entityId);

                        Events.ExecuteOnGetAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAssetDefaultImplementation(e, "/v1/assets/{assetAddress}/{assetId}", uriBuilderLocalVar.Path, assetAddress, assetId, chainId, entityId);
                Events.ExecuteOnErrorGetAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAssetApiResponse"/>
        /// </summary>
        public partial class GetAssetApiResponse : Beam.Client.ApiResponse, IGetAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAssetApiResponse(ILogger<GetAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContractAssets(ref string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, ref Option<decimal> chainId, ref Option<decimal> limit, ref Option<decimal> offset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetContractAssets(string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort)
        {
            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));

            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetContractAssetsDefaultImplementation(IGetContractAssetsApiResponse apiResponseLocalVar, string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> chainId, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetContractAssets(ref suppressDefaultLog, apiResponseLocalVar, assetAddress, filter, sort, chainId, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="assetAddress"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetContractAssets(ref bool suppressDefaultLog, IGetContractAssetsApiResponse apiResponseLocalVar, string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> chainId, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="assetAddress"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetContractAssetsDefaultImplementation(Exception exception, string pathFormat, string path, string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> chainId, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            OnErrorGetContractAssets(ref suppressDefaultLog, exception, pathFormat, path, assetAddress, filter, sort, chainId, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="assetAddress"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetContractAssets(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> chainId, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <param name="assetAddress"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsApiResponse"/>&gt;</returns>
        public async Task<IGetContractAssetsApiResponse> GetContractAssetsOrDefaultAsync(string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> chainId = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContractAssetsAsync(assetAddress, filter, sort, chainId, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsApiResponse"/>&gt;</returns>
        public async Task<IGetContractAssetsApiResponse> GetContractAssetsAsync(string assetAddress, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> chainId = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContractAssets(assetAddress, filter, sort);

                FormatGetContractAssets(ref assetAddress, filter, sort, ref chainId, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/{assetAddress}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = filter.Value.ToString();

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = sort.Value.ToString();

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = offset.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContractAssetsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContractAssetsApiResponse>();

                        GetContractAssetsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/{assetAddress}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContractAssetsDefaultImplementation(apiResponseLocalVar, assetAddress, filter, sort, chainId, limit, offset);

                        Events.ExecuteOnGetContractAssets(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContractAssetsDefaultImplementation(e, "/v1/assets/{assetAddress}", uriBuilderLocalVar.Path, assetAddress, filter, sort, chainId, limit, offset);
                Events.ExecuteOnErrorGetContractAssets(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContractAssetsApiResponse"/>
        /// </summary>
        public partial class GetContractAssetsApiResponse : Beam.Client.ApiResponse, IGetContractAssetsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContractAssetsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContractAssetsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContractAssetsApiResponse(ILogger<GetContractAssetsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetContractAssetsPost(GetAssetsBodyInput getAssetsBodyInput, ref string assetAddress, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <returns></returns>
        private void ValidateGetContractAssetsPost(GetAssetsBodyInput getAssetsBodyInput, string assetAddress)
        {
            if (getAssetsBodyInput == null)
                throw new ArgumentNullException(nameof(getAssetsBodyInput));

            if (assetAddress == null)
                throw new ArgumentNullException(nameof(assetAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        private void AfterGetContractAssetsPostDefaultImplementation(IGetContractAssetsPostApiResponse apiResponseLocalVar, GetAssetsBodyInput getAssetsBodyInput, string assetAddress, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetContractAssetsPost(ref suppressDefaultLog, apiResponseLocalVar, getAssetsBodyInput, assetAddress, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        partial void AfterGetContractAssetsPost(ref bool suppressDefaultLog, IGetContractAssetsPostApiResponse apiResponseLocalVar, GetAssetsBodyInput getAssetsBodyInput, string assetAddress, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetContractAssetsPostDefaultImplementation(Exception exception, string pathFormat, string path, GetAssetsBodyInput getAssetsBodyInput, string assetAddress, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetContractAssetsPost(ref suppressDefaultLog, exception, pathFormat, path, getAssetsBodyInput, assetAddress, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetContractAssetsPost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, GetAssetsBodyInput getAssetsBodyInput, string assetAddress, Option<decimal> chainId);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostApiResponse"/>&gt;</returns>
        public async Task<IGetContractAssetsPostApiResponse> GetContractAssetsPostOrDefaultAsync(GetAssetsBodyInput getAssetsBodyInput, string assetAddress, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetContractAssetsPostAsync(getAssetsBodyInput, assetAddress, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="assetAddress"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetContractAssetsPostApiResponse"/>&gt;</returns>
        public async Task<IGetContractAssetsPostApiResponse> GetContractAssetsPostAsync(GetAssetsBodyInput getAssetsBodyInput, string assetAddress, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetContractAssetsPost(getAssetsBodyInput, assetAddress);

                FormatGetContractAssetsPost(getAssetsBodyInput, ref assetAddress, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/{assetAddress}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BassetAddress%7D", Uri.EscapeDataString(assetAddress.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (getAssetsBodyInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getAssetsBodyInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetContractAssetsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetContractAssetsPostApiResponse>();

                        GetContractAssetsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/{assetAddress}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetContractAssetsPostDefaultImplementation(apiResponseLocalVar, getAssetsBodyInput, assetAddress, chainId);

                        Events.ExecuteOnGetContractAssetsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetContractAssetsPostDefaultImplementation(e, "/v1/assets/{assetAddress}", uriBuilderLocalVar.Path, getAssetsBodyInput, assetAddress, chainId);
                Events.ExecuteOnErrorGetContractAssetsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetContractAssetsPostApiResponse"/>
        /// </summary>
        public partial class GetContractAssetsPostApiResponse : Beam.Client.ApiResponse, IGetContractAssetsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetContractAssetsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetContractAssetsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetContractAssetsPostApiResponse(ILogger<GetContractAssetsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileAssetsForGame(ref string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, ref Option<decimal> chainId, ref Option<decimal> limit, ref Option<decimal> offset);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <returns></returns>
        private void ValidateGetProfileAssetsForGame(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));

            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetProfileAssetsForGameDefaultImplementation(IGetProfileAssetsForGameApiResponse apiResponseLocalVar, string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> chainId, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileAssetsForGame(ref suppressDefaultLog, apiResponseLocalVar, entityId, filter, sort, chainId, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetProfileAssetsForGame(ref bool suppressDefaultLog, IGetProfileAssetsForGameApiResponse apiResponseLocalVar, string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> chainId, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetProfileAssetsForGameDefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> chainId, Option<decimal> limit, Option<decimal> offset)
        {
            bool suppressDefaultLog = false;
            OnErrorGetProfileAssetsForGame(ref suppressDefaultLog, exception, pathFormat, path, entityId, filter, sort, chainId, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="filter"></param>
        /// <param name="sort"></param>
        /// <param name="chainId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetProfileAssetsForGame(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<GetProfileAssetsForGameFilterParameter> filter, Option<GetProfileAssetsForGameSortParameter> sort, Option<decimal> chainId, Option<decimal> limit, Option<decimal> offset);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGameApiResponse"/>&gt;</returns>
        public async Task<IGetProfileAssetsForGameApiResponse> GetProfileAssetsForGameOrDefaultAsync(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> chainId = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileAssetsForGameAsync(entityId, filter, sort, chainId, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGameApiResponse"/>&gt;</returns>
        public async Task<IGetProfileAssetsForGameApiResponse> GetProfileAssetsForGameAsync(string entityId, Option<GetProfileAssetsForGameFilterParameter> filter = default, Option<GetProfileAssetsForGameSortParameter> sort = default, Option<decimal> chainId = default, Option<decimal> limit = default, Option<decimal> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileAssetsForGame(entityId, filter, sort);

                FormatGetProfileAssetsForGame(ref entityId, filter, sort, ref chainId, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = filter.Value.ToString();

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = sort.Value.ToString();

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = offset.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileAssetsForGameApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileAssetsForGameApiResponse>();

                        GetProfileAssetsForGameApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileAssetsForGameDefaultImplementation(apiResponseLocalVar, entityId, filter, sort, chainId, limit, offset);

                        Events.ExecuteOnGetProfileAssetsForGame(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileAssetsForGameDefaultImplementation(e, "/v1/assets/profiles/{entityId}", uriBuilderLocalVar.Path, entityId, filter, sort, chainId, limit, offset);
                Events.ExecuteOnErrorGetProfileAssetsForGame(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileAssetsForGameApiResponse"/>
        /// </summary>
        public partial class GetProfileAssetsForGameApiResponse : Beam.Client.ApiResponse, IGetProfileAssetsForGameApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileAssetsForGameApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileAssetsForGameApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileAssetsForGameApiResponse(ILogger<GetProfileAssetsForGameApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileAssetsForGamePost(GetAssetsBodyInput getAssetsBodyInput, ref string entityId, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfileAssetsForGamePost(GetAssetsBodyInput getAssetsBodyInput, string entityId)
        {
            if (getAssetsBodyInput == null)
                throw new ArgumentNullException(nameof(getAssetsBodyInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetProfileAssetsForGamePostDefaultImplementation(IGetProfileAssetsForGamePostApiResponse apiResponseLocalVar, GetAssetsBodyInput getAssetsBodyInput, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileAssetsForGamePost(ref suppressDefaultLog, apiResponseLocalVar, getAssetsBodyInput, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetProfileAssetsForGamePost(ref bool suppressDefaultLog, IGetProfileAssetsForGamePostApiResponse apiResponseLocalVar, GetAssetsBodyInput getAssetsBodyInput, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetProfileAssetsForGamePostDefaultImplementation(Exception exception, string pathFormat, string path, GetAssetsBodyInput getAssetsBodyInput, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetProfileAssetsForGamePost(ref suppressDefaultLog, exception, pathFormat, path, getAssetsBodyInput, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetProfileAssetsForGamePost(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, GetAssetsBodyInput getAssetsBodyInput, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostApiResponse"/>&gt;</returns>
        public async Task<IGetProfileAssetsForGamePostApiResponse> GetProfileAssetsForGamePostOrDefaultAsync(GetAssetsBodyInput getAssetsBodyInput, string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileAssetsForGamePostAsync(getAssetsBodyInput, entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileAssetsForGamePostApiResponse"/>&gt;</returns>
        public async Task<IGetProfileAssetsForGamePostApiResponse> GetProfileAssetsForGamePostAsync(GetAssetsBodyInput getAssetsBodyInput, string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileAssetsForGamePost(getAssetsBodyInput, entityId);

                FormatGetProfileAssetsForGamePost(getAssetsBodyInput, ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/profiles/{entityId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.Content = (getAssetsBodyInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(getAssetsBodyInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileAssetsForGamePostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileAssetsForGamePostApiResponse>();

                        GetProfileAssetsForGamePostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/profiles/{entityId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileAssetsForGamePostDefaultImplementation(apiResponseLocalVar, getAssetsBodyInput, entityId, chainId);

                        Events.ExecuteOnGetProfileAssetsForGamePost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileAssetsForGamePostDefaultImplementation(e, "/v1/assets/profiles/{entityId}", uriBuilderLocalVar.Path, getAssetsBodyInput, entityId, chainId);
                Events.ExecuteOnErrorGetProfileAssetsForGamePost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileAssetsForGamePostApiResponse"/>
        /// </summary>
        public partial class GetProfileAssetsForGamePostApiResponse : Beam.Client.ApiResponse, IGetProfileAssetsForGamePostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileAssetsForGamePostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileAssetsForGamePostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileAssetsForGamePostApiResponse(ILogger<GetProfileAssetsForGamePostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetAssetsResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetAssetsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetAssetsResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileCurrencies(ref string entityId, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfileCurrencies(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetProfileCurrenciesDefaultImplementation(IGetProfileCurrenciesApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileCurrencies(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetProfileCurrencies(ref bool suppressDefaultLog, IGetProfileCurrenciesApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetProfileCurrenciesDefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetProfileCurrencies(ref suppressDefaultLog, exception, pathFormat, path, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetProfileCurrencies(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesApiResponse"/>&gt;</returns>
        public async Task<IGetProfileCurrenciesApiResponse> GetProfileCurrenciesOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileCurrenciesAsync(entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileCurrenciesApiResponse"/>&gt;</returns>
        public async Task<IGetProfileCurrenciesApiResponse> GetProfileCurrenciesAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileCurrencies(entityId);

                FormatGetProfileCurrencies(ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/profiles/{entityId}/currencies";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileCurrenciesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileCurrenciesApiResponse>();

                        GetProfileCurrenciesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/profiles/{entityId}/currencies", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileCurrenciesDefaultImplementation(apiResponseLocalVar, entityId, chainId);

                        Events.ExecuteOnGetProfileCurrencies(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileCurrenciesDefaultImplementation(e, "/v1/assets/profiles/{entityId}/currencies", uriBuilderLocalVar.Path, entityId, chainId);
                Events.ExecuteOnErrorGetProfileCurrencies(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileCurrenciesApiResponse"/>
        /// </summary>
        public partial class GetProfileCurrenciesApiResponse : Beam.Client.ApiResponse, IGetProfileCurrenciesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileCurrenciesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileCurrenciesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileCurrenciesApiResponse(ILogger<GetProfileCurrenciesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetProfileCurrenciesResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetProfileCurrenciesResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetProfileCurrenciesResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetProfileNativeCurrency(ref string entityId, ref Option<decimal> chainId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateGetProfileNativeCurrency(string entityId)
        {
            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void AfterGetProfileNativeCurrencyDefaultImplementation(IGetProfileNativeCurrencyApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            AfterGetProfileNativeCurrency(ref suppressDefaultLog, apiResponseLocalVar, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void AfterGetProfileNativeCurrency(ref bool suppressDefaultLog, IGetProfileNativeCurrencyApiResponse apiResponseLocalVar, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        private void OnErrorGetProfileNativeCurrencyDefaultImplementation(Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetProfileNativeCurrency(ref suppressDefaultLog, exception, pathFormat, path, entityId, chainId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="entityId"></param>
        /// <param name="chainId"></param>
        partial void OnErrorGetProfileNativeCurrency(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string entityId, Option<decimal> chainId);

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyApiResponse"/>&gt;</returns>
        public async Task<IGetProfileNativeCurrencyApiResponse> GetProfileNativeCurrencyOrDefaultAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetProfileNativeCurrencyAsync(entityId, chainId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetProfileNativeCurrencyApiResponse"/>&gt;</returns>
        public async Task<IGetProfileNativeCurrencyApiResponse> GetProfileNativeCurrencyAsync(string entityId, Option<decimal> chainId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetProfileNativeCurrency(entityId);

                FormatGetProfileNativeCurrency(ref entityId, ref chainId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/profiles/{entityId}/native";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (chainId.IsSet)
                        parseQueryStringLocalVar["chainId"] = chainId.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetProfileNativeCurrencyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetProfileNativeCurrencyApiResponse>();

                        GetProfileNativeCurrencyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/profiles/{entityId}/native", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetProfileNativeCurrencyDefaultImplementation(apiResponseLocalVar, entityId, chainId);

                        Events.ExecuteOnGetProfileNativeCurrency(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetProfileNativeCurrencyDefaultImplementation(e, "/v1/assets/profiles/{entityId}/native", uriBuilderLocalVar.Path, entityId, chainId);
                Events.ExecuteOnErrorGetProfileNativeCurrency(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetProfileNativeCurrencyApiResponse"/>
        /// </summary>
        public partial class GetProfileNativeCurrencyApiResponse : Beam.Client.ApiResponse, IGetProfileNativeCurrencyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetProfileNativeCurrencyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetProfileNativeCurrencyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetProfileNativeCurrencyApiResponse(ILogger<GetProfileNativeCurrencyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Beam.Model.GetProfileNativeCurrencyResponse Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.GetProfileNativeCurrencyResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Beam.Model.GetProfileNativeCurrencyResponse result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferAsset(TransferAssetRequestInput transferAssetRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateTransferAsset(TransferAssetRequestInput transferAssetRequestInput, string entityId)
        {
            if (transferAssetRequestInput == null)
                throw new ArgumentNullException(nameof(transferAssetRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterTransferAssetDefaultImplementation(ITransferAssetApiResponse apiResponseLocalVar, TransferAssetRequestInput transferAssetRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterTransferAsset(ref suppressDefaultLog, apiResponseLocalVar, transferAssetRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterTransferAsset(ref bool suppressDefaultLog, ITransferAssetApiResponse apiResponseLocalVar, TransferAssetRequestInput transferAssetRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorTransferAssetDefaultImplementation(Exception exception, string pathFormat, string path, TransferAssetRequestInput transferAssetRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorTransferAsset(ref suppressDefaultLog, exception, pathFormat, path, transferAssetRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorTransferAsset(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, TransferAssetRequestInput transferAssetRequestInput, string entityId);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetApiResponse"/>&gt;</returns>
        public async Task<ITransferAssetApiResponse> TransferAssetOrDefaultAsync(TransferAssetRequestInput transferAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferAssetAsync(transferAssetRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferAssetApiResponse"/>&gt;</returns>
        public async Task<ITransferAssetApiResponse> TransferAssetAsync(TransferAssetRequestInput transferAssetRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferAsset(transferAssetRequestInput, entityId);

                FormatTransferAsset(transferAssetRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/profiles/{entityId}/transfer-asset";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (transferAssetRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transferAssetRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferAssetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferAssetApiResponse>();

                        TransferAssetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/profiles/{entityId}/transfer-asset", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferAssetDefaultImplementation(apiResponseLocalVar, transferAssetRequestInput, entityId);

                        Events.ExecuteOnTransferAsset(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferAssetDefaultImplementation(e, "/v1/assets/profiles/{entityId}/transfer-asset", uriBuilderLocalVar.Path, transferAssetRequestInput, entityId);
                Events.ExecuteOnErrorTransferAsset(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferAssetApiResponse"/>
        /// </summary>
        public partial class TransferAssetApiResponse : Beam.Client.ApiResponse, ITransferAssetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferAssetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferAssetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferAssetApiResponse(ILogger<TransferAssetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Beam.Model.TransferAssetResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.TransferAssetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Beam.Model.TransferAssetResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferNativeToken(TransferNativeTokenRequestInput transferNativeTokenRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateTransferNativeToken(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId)
        {
            if (transferNativeTokenRequestInput == null)
                throw new ArgumentNullException(nameof(transferNativeTokenRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterTransferNativeTokenDefaultImplementation(ITransferNativeTokenApiResponse apiResponseLocalVar, TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterTransferNativeToken(ref suppressDefaultLog, apiResponseLocalVar, transferNativeTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterTransferNativeToken(ref bool suppressDefaultLog, ITransferNativeTokenApiResponse apiResponseLocalVar, TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorTransferNativeTokenDefaultImplementation(Exception exception, string pathFormat, string path, TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorTransferNativeToken(ref suppressDefaultLog, exception, pathFormat, path, transferNativeTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorTransferNativeToken(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId);

        /// <summary>
        /// Transfer the native token (MC) 
        /// </summary>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenApiResponse"/>&gt;</returns>
        public async Task<ITransferNativeTokenApiResponse> TransferNativeTokenOrDefaultAsync(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferNativeTokenAsync(transferNativeTokenRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer the native token (MC) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferNativeTokenApiResponse"/>&gt;</returns>
        public async Task<ITransferNativeTokenApiResponse> TransferNativeTokenAsync(TransferNativeTokenRequestInput transferNativeTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferNativeToken(transferNativeTokenRequestInput, entityId);

                FormatTransferNativeToken(transferNativeTokenRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/profiles/{entityId}/transfer-native";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (transferNativeTokenRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transferNativeTokenRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferNativeTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferNativeTokenApiResponse>();

                        TransferNativeTokenApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/profiles/{entityId}/transfer-native", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferNativeTokenDefaultImplementation(apiResponseLocalVar, transferNativeTokenRequestInput, entityId);

                        Events.ExecuteOnTransferNativeToken(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferNativeTokenDefaultImplementation(e, "/v1/assets/profiles/{entityId}/transfer-native", uriBuilderLocalVar.Path, transferNativeTokenRequestInput, entityId);
                Events.ExecuteOnErrorTransferNativeToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferNativeTokenApiResponse"/>
        /// </summary>
        public partial class TransferNativeTokenApiResponse : Beam.Client.ApiResponse, ITransferNativeTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferNativeTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferNativeTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferNativeTokenApiResponse(ILogger<TransferNativeTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Beam.Model.TransferTokenResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.TransferTokenResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Beam.Model.TransferTokenResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatTransferToken(TransferTokenRequestInput transferTokenRequestInput, ref string entityId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <returns></returns>
        private void ValidateTransferToken(TransferTokenRequestInput transferTokenRequestInput, string entityId)
        {
            if (transferTokenRequestInput == null)
                throw new ArgumentNullException(nameof(transferTokenRequestInput));

            if (entityId == null)
                throw new ArgumentNullException(nameof(entityId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void AfterTransferTokenDefaultImplementation(ITransferTokenApiResponse apiResponseLocalVar, TransferTokenRequestInput transferTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            AfterTransferToken(ref suppressDefaultLog, apiResponseLocalVar, transferTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void AfterTransferToken(ref bool suppressDefaultLog, ITransferTokenApiResponse apiResponseLocalVar, TransferTokenRequestInput transferTokenRequestInput, string entityId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        private void OnErrorTransferTokenDefaultImplementation(Exception exception, string pathFormat, string path, TransferTokenRequestInput transferTokenRequestInput, string entityId)
        {
            bool suppressDefaultLog = false;
            OnErrorTransferToken(ref suppressDefaultLog, exception, pathFormat, path, transferTokenRequestInput, entityId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        partial void OnErrorTransferToken(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, TransferTokenRequestInput transferTokenRequestInput, string entityId);

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenApiResponse"/>&gt;</returns>
        public async Task<ITransferTokenApiResponse> TransferTokenOrDefaultAsync(TransferTokenRequestInput transferTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await TransferTokenAsync(transferTokenRequestInput, entityId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ITransferTokenApiResponse"/>&gt;</returns>
        public async Task<ITransferTokenApiResponse> TransferTokenAsync(TransferTokenRequestInput transferTokenRequestInput, string entityId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateTransferToken(transferTokenRequestInput, entityId);

                FormatTransferToken(transferTokenRequestInput, ref entityId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/v1/assets/profiles/{entityId}/transfer-token";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BentityId%7D", Uri.EscapeDataString(entityId.ToString()));

                    httpRequestMessageLocalVar.Content = (transferTokenRequestInput as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(transferTokenRequestInput, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("x-api-key", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<TransferTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<TransferTokenApiResponse>();

                        TransferTokenApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v1/assets/profiles/{entityId}/transfer-token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterTransferTokenDefaultImplementation(apiResponseLocalVar, transferTokenRequestInput, entityId);

                        Events.ExecuteOnTransferToken(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorTransferTokenDefaultImplementation(e, "/v1/assets/profiles/{entityId}/transfer-token", uriBuilderLocalVar.Path, transferTokenRequestInput, entityId);
                Events.ExecuteOnErrorTransferToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="TransferTokenApiResponse"/>
        /// </summary>
        public partial class TransferTokenApiResponse : Beam.Client.ApiResponse, ITransferTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<TransferTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="TransferTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public TransferTokenApiResponse(ILogger<TransferTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Beam.Model.TransferTokenResponse Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Beam.Model.TransferTokenResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Beam.Model.TransferTokenResponse result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
