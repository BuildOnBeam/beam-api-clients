/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Beam.Client;
using Beam.Model;

namespace Beam.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <returns>GetAssetResponse</returns>
        GetAssetResponse GetAsset(string assetAddress, string assetId, decimal? chainId, string? entityId);

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetResponse</returns>
        ApiResponse<GetAssetResponse> GetAssetWithHttpInfo(string assetAddress, string assetId, decimal? chainId, string? entityId);
        /// <summary>
        /// Get all the asset sorting optiond (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetAssetSortOptionsResponse</returns>
        GetAssetSortOptionsResponse GetAssetSortOptions();

        /// <summary>
        /// Get all the asset sorting optiond (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetAssetSortOptionsResponse</returns>
        ApiResponse<GetAssetSortOptionsResponse> GetAssetSortOptionsWithHttpInfo();
        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>GetAssetsResponse</returns>
        [Obsolete]
        GetAssetsResponse GetContractAssets(string assetAddress, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of GetAssetsResponse</returns>
        [Obsolete]
        ApiResponse<GetAssetsResponse> GetContractAssetsWithHttpInfo(string assetAddress, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort);
        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetAssetsResponse</returns>
        GetAssetsResponse GetContractAssetsPost(string assetAddress, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId);

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetsResponse</returns>
        ApiResponse<GetAssetsResponse> GetContractAssetsPostWithHttpInfo(string assetAddress, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId);
        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>GetAssetsResponse</returns>
        [Obsolete]
        GetAssetsResponse GetProfileAssetsForGame(string entityId, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of GetAssetsResponse</returns>
        [Obsolete]
        ApiResponse<GetAssetsResponse> GetProfileAssetsForGameWithHttpInfo(string entityId, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort);
        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetAssetsResponse</returns>
        GetAssetsResponse GetProfileAssetsForGamePost(string entityId, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId);

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetsResponse</returns>
        ApiResponse<GetAssetsResponse> GetProfileAssetsForGamePostWithHttpInfo(string entityId, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId);
        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetProfileCurrenciesResponse</returns>
        GetProfileCurrenciesResponse GetProfileCurrencies(string entityId, decimal? chainId);

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetProfileCurrenciesResponse</returns>
        ApiResponse<GetProfileCurrenciesResponse> GetProfileCurrenciesWithHttpInfo(string entityId, decimal? chainId);
        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetProfileNativeCurrencyResponse</returns>
        GetProfileNativeCurrencyResponse GetProfileNativeCurrency(string entityId, decimal? chainId);

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetProfileNativeCurrencyResponse</returns>
        ApiResponse<GetProfileNativeCurrencyResponse> GetProfileNativeCurrencyWithHttpInfo(string entityId, decimal? chainId);
        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <returns>TransferAssetResponse</returns>
        TransferAssetResponse TransferAsset(string entityId, TransferAssetRequestInput transferAssetRequestInput);

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <returns>ApiResponse of TransferAssetResponse</returns>
        ApiResponse<TransferAssetResponse> TransferAssetWithHttpInfo(string entityId, TransferAssetRequestInput transferAssetRequestInput);
        /// <summary>
        /// Transfer the native token (MC)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <returns>TransferTokenResponse</returns>
        TransferTokenResponse TransferNativeToken(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput);

        /// <summary>
        /// Transfer the native token (MC)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <returns>ApiResponse of TransferTokenResponse</returns>
        ApiResponse<TransferTokenResponse> TransferNativeTokenWithHttpInfo(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput);
        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <returns>TransferTokenResponse</returns>
        TransferTokenResponse TransferToken(string entityId, TransferTokenRequestInput transferTokenRequestInput);

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <returns>ApiResponse of TransferTokenResponse</returns>
        ApiResponse<TransferTokenResponse> TransferTokenWithHttpInfo(string entityId, TransferTokenRequestInput transferTokenRequestInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetResponse</returns>
        System.Threading.Tasks.Task<GetAssetResponse> GetAssetAsync(string assetAddress, string assetId, decimal? chainId, string? entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetResponse>> GetAssetWithHttpInfoAsync(string assetAddress, string assetId, decimal? chainId, string? entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the asset sorting optiond (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetSortOptionsResponse</returns>
        System.Threading.Tasks.Task<GetAssetSortOptionsResponse> GetAssetSortOptionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the asset sorting optiond (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetSortOptionsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetSortOptionsResponse>> GetAssetSortOptionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GetAssetsResponse> GetContractAssetsAsync(string assetAddress, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GetAssetsResponse>> GetContractAssetsWithHttpInfoAsync(string assetAddress, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsResponse</returns>
        System.Threading.Tasks.Task<GetAssetsResponse> GetContractAssetsPostAsync(string assetAddress, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetsResponse>> GetContractAssetsPostWithHttpInfoAsync(string assetAddress, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsResponse</returns>
        [Obsolete]
        System.Threading.Tasks.Task<GetAssetsResponse> GetProfileAssetsForGameAsync(string entityId, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// This endpoint is deprecated. Use POST route instead.
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsResponse)</returns>
        [Obsolete]
        System.Threading.Tasks.Task<ApiResponse<GetAssetsResponse>> GetProfileAssetsForGameWithHttpInfoAsync(string entityId, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsResponse</returns>
        System.Threading.Tasks.Task<GetAssetsResponse> GetProfileAssetsForGamePostAsync(string entityId, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAssetsResponse>> GetProfileAssetsForGamePostWithHttpInfoAsync(string entityId, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfileCurrenciesResponse</returns>
        System.Threading.Tasks.Task<GetProfileCurrenciesResponse> GetProfileCurrenciesAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get all the currencies owned by an account (ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfileCurrenciesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProfileCurrenciesResponse>> GetProfileCurrenciesWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfileNativeCurrencyResponse</returns>
        System.Threading.Tasks.Task<GetProfileNativeCurrencyResponse> GetProfileNativeCurrencyAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get the native token balance
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfileNativeCurrencyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProfileNativeCurrencyResponse>> GetProfileNativeCurrencyWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferAssetResponse</returns>
        System.Threading.Tasks.Task<TransferAssetResponse> TransferAssetAsync(string entityId, TransferAssetRequestInput transferAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferAssetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferAssetResponse>> TransferAssetWithHttpInfoAsync(string entityId, TransferAssetRequestInput transferAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfer the native token (MC)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferTokenResponse</returns>
        System.Threading.Tasks.Task<TransferTokenResponse> TransferNativeTokenAsync(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfer the native token (MC)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferTokenResponse>> TransferNativeTokenWithHttpInfoAsync(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferTokenResponse</returns>
        System.Threading.Tasks.Task<TransferTokenResponse> TransferTokenAsync(string entityId, TransferTokenRequestInput transferTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfer a token (token assets, ERC20)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferTokenResponse>> TransferTokenWithHttpInfoAsync(string entityId, TransferTokenRequestInput transferTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAssetsApi : IAssetsApiSync, IAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AssetsApi : IDisposable, IAssetsApi
    {
        private Beam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public AssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public AssetsApi(string basePath)
        {
            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public AssetsApi(Beam.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AssetsApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AssetsApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public AssetsApi(HttpClient client, Beam.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public AssetsApi(Beam.Client.ISynchronousClient client, Beam.Client.IAsynchronousClient asyncClient, Beam.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Beam.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Beam.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Beam.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Beam.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Beam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <returns>GetAssetResponse</returns>
        public GetAssetResponse GetAsset(string assetAddress, string assetId, decimal? chainId, string? entityId)
        {
            Beam.Client.ApiResponse<GetAssetResponse> localVarResponse = GetAssetWithHttpInfo(assetAddress, assetId, chainId, entityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetResponse</returns>
        public Beam.Client.ApiResponse<GetAssetResponse> GetAssetWithHttpInfo(string assetAddress, string assetId, decimal? chainId, string? entityId)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetAsset");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'assetId' when calling AssetsApi->GetAsset");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", Beam.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", Beam.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetResponse>("/v1/assets/{assetAddress}/{assetId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetResponse> GetAssetAsync(string assetAddress, string assetId, decimal? chainId, string? entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetResponse> localVarResponse = await GetAssetWithHttpInfoAsync(assetAddress, assetId, chainId, entityId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a single NFT (e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="assetId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="entityId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetResponse>> GetAssetWithHttpInfoAsync(string assetAddress, string assetId, decimal? chainId, string? entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetAsset");

            // verify the required parameter 'assetId' is set
            if (assetId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'assetId' when calling AssetsApi->GetAsset");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", Beam.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            localVarRequestOptions.PathParameters.Add("assetId", Beam.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (entityId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "entityId", entityId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetResponse>("/v1/assets/{assetAddress}/{assetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the asset sorting optiond (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetAssetSortOptionsResponse</returns>
        public GetAssetSortOptionsResponse GetAssetSortOptions()
        {
            Beam.Client.ApiResponse<GetAssetSortOptionsResponse> localVarResponse = GetAssetSortOptionsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the asset sorting optiond (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetAssetSortOptionsResponse</returns>
        public Beam.Client.ApiResponse<GetAssetSortOptionsResponse> GetAssetSortOptionsWithHttpInfo()
        {
            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetSortOptionsResponse>("/v1/assets/asset-sort-options", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetSortOptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the asset sorting optiond (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetSortOptionsResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetSortOptionsResponse> GetAssetSortOptionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetSortOptionsResponse> localVarResponse = await GetAssetSortOptionsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the asset sorting optiond (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetSortOptionsResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetSortOptionsResponse>> GetAssetSortOptionsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetSortOptionsResponse>("/v1/assets/asset-sort-options", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAssetSortOptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>GetAssetsResponse</returns>
        [Obsolete]
        public GetAssetsResponse GetContractAssets(string assetAddress, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort)
        {
            Beam.Client.ApiResponse<GetAssetsResponse> localVarResponse = GetContractAssetsWithHttpInfo(assetAddress, limit, offset, chainId, filter, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of GetAssetsResponse</returns>
        [Obsolete]
        public Beam.Client.ApiResponse<GetAssetsResponse> GetContractAssetsWithHttpInfo(string assetAddress, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetContractAssets");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", Beam.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetsResponse>("/v1/assets/{assetAddress}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GetAssetsResponse> GetContractAssetsAsync(string assetAddress, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetsResponse> localVarResponse = await GetContractAssetsWithHttpInfoAsync(assetAddress, limit, offset, chainId, filter, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetsResponse>> GetContractAssetsWithHttpInfoAsync(string assetAddress, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetContractAssets");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", Beam.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetsResponse>("/v1/assets/{assetAddress}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractAssets", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetAssetsResponse</returns>
        public GetAssetsResponse GetContractAssetsPost(string assetAddress, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId)
        {
            Beam.Client.ApiResponse<GetAssetsResponse> localVarResponse = GetContractAssetsPostWithHttpInfo(assetAddress, getAssetsBodyInput, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetsResponse</returns>
        public Beam.Client.ApiResponse<GetAssetsResponse> GetContractAssetsPostWithHttpInfo(string assetAddress, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId)
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetContractAssetsPost");

            // verify the required parameter 'getAssetsBodyInput' is set
            if (getAssetsBodyInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'getAssetsBodyInput' when calling AssetsApi->GetContractAssetsPost");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", Beam.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getAssetsBodyInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAssetsResponse>("/v1/assets/{assetAddress}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractAssetsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetsResponse> GetContractAssetsPostAsync(string assetAddress, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetsResponse> localVarResponse = await GetContractAssetsPostWithHttpInfoAsync(assetAddress, getAssetsBodyInput, chainId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of contract (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetAddress"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetsResponse>> GetContractAssetsPostWithHttpInfoAsync(string assetAddress, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetAddress' is set
            if (assetAddress == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'assetAddress' when calling AssetsApi->GetContractAssetsPost");

            // verify the required parameter 'getAssetsBodyInput' is set
            if (getAssetsBodyInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'getAssetsBodyInput' when calling AssetsApi->GetContractAssetsPost");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("assetAddress", Beam.Client.ClientUtils.ParameterToString(assetAddress)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getAssetsBodyInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetAssetsResponse>("/v1/assets/{assetAddress}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContractAssetsPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>GetAssetsResponse</returns>
        [Obsolete]
        public GetAssetsResponse GetProfileAssetsForGame(string entityId, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort)
        {
            Beam.Client.ApiResponse<GetAssetsResponse> localVarResponse = GetProfileAssetsForGameWithHttpInfo(entityId, limit, offset, chainId, filter, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <returns>ApiResponse of GetAssetsResponse</returns>
        [Obsolete]
        public Beam.Client.ApiResponse<GetAssetsResponse> GetProfileAssetsForGameWithHttpInfo(string entityId, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetProfileAssetsForGame");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAssetsResponse>("/v1/assets/profiles/{entityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileAssetsForGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsResponse</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<GetAssetsResponse> GetProfileAssetsForGameAsync(string entityId, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetsResponse> localVarResponse = await GetProfileAssetsForGameWithHttpInfoAsync(entityId, limit, offset, chainId, filter, sort, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) This endpoint is deprecated. Use POST route instead.
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsResponse)</returns>
        [Obsolete]
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetsResponse>> GetProfileAssetsForGameWithHttpInfoAsync(string entityId, decimal? limit, decimal? offset, decimal? chainId, GetProfileAssetsForGameFilterParameter? filter, GetProfileAssetsForGameSortParameter? sort, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetProfileAssetsForGame");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            if (filter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "filter", filter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAssetsResponse>("/v1/assets/profiles/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileAssetsForGame", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetAssetsResponse</returns>
        public GetAssetsResponse GetProfileAssetsForGamePost(string entityId, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId)
        {
            Beam.Client.ApiResponse<GetAssetsResponse> localVarResponse = GetProfileAssetsForGamePostWithHttpInfo(entityId, getAssetsBodyInput, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetAssetsResponse</returns>
        public Beam.Client.ApiResponse<GetAssetsResponse> GetProfileAssetsForGamePostWithHttpInfo(string entityId, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetProfileAssetsForGamePost");

            // verify the required parameter 'getAssetsBodyInput' is set
            if (getAssetsBodyInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'getAssetsBodyInput' when calling AssetsApi->GetProfileAssetsForGamePost");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getAssetsBodyInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAssetsResponse>("/v1/assets/profiles/{entityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileAssetsForGamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAssetsResponse</returns>
        public async System.Threading.Tasks.Task<GetAssetsResponse> GetProfileAssetsForGamePostAsync(string entityId, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAssetsResponse> localVarResponse = await GetProfileAssetsForGamePostWithHttpInfoAsync(entityId, getAssetsBodyInput, chainId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the assets of a profile (NFT assets, e.g. ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="getAssetsBodyInput"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAssetsResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAssetsResponse>> GetProfileAssetsForGamePostWithHttpInfoAsync(string entityId, GetAssetsBodyInput getAssetsBodyInput, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetProfileAssetsForGamePost");

            // verify the required parameter 'getAssetsBodyInput' is set
            if (getAssetsBodyInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'getAssetsBodyInput' when calling AssetsApi->GetProfileAssetsForGamePost");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }
            localVarRequestOptions.Data = getAssetsBodyInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GetAssetsResponse>("/v1/assets/profiles/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileAssetsForGamePost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetProfileCurrenciesResponse</returns>
        public GetProfileCurrenciesResponse GetProfileCurrencies(string entityId, decimal? chainId)
        {
            Beam.Client.ApiResponse<GetProfileCurrenciesResponse> localVarResponse = GetProfileCurrenciesWithHttpInfo(entityId, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetProfileCurrenciesResponse</returns>
        public Beam.Client.ApiResponse<GetProfileCurrenciesResponse> GetProfileCurrenciesWithHttpInfo(string entityId, decimal? chainId)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetProfileCurrencies");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProfileCurrenciesResponse>("/v1/assets/profiles/{entityId}/currencies", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfileCurrenciesResponse</returns>
        public async System.Threading.Tasks.Task<GetProfileCurrenciesResponse> GetProfileCurrenciesAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetProfileCurrenciesResponse> localVarResponse = await GetProfileCurrenciesWithHttpInfoAsync(entityId, chainId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the currencies owned by an account (ERC20) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfileCurrenciesResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetProfileCurrenciesResponse>> GetProfileCurrenciesWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetProfileCurrencies");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProfileCurrenciesResponse>("/v1/assets/profiles/{entityId}/currencies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileCurrencies", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>GetProfileNativeCurrencyResponse</returns>
        public GetProfileNativeCurrencyResponse GetProfileNativeCurrency(string entityId, decimal? chainId)
        {
            Beam.Client.ApiResponse<GetProfileNativeCurrencyResponse> localVarResponse = GetProfileNativeCurrencyWithHttpInfo(entityId, chainId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <returns>ApiResponse of GetProfileNativeCurrencyResponse</returns>
        public Beam.Client.ApiResponse<GetProfileNativeCurrencyResponse> GetProfileNativeCurrencyWithHttpInfo(string entityId, decimal? chainId)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetProfileNativeCurrency");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProfileNativeCurrencyResponse>("/v1/assets/profiles/{entityId}/native", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileNativeCurrency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfileNativeCurrencyResponse</returns>
        public async System.Threading.Tasks.Task<GetProfileNativeCurrencyResponse> GetProfileNativeCurrencyAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetProfileNativeCurrencyResponse> localVarResponse = await GetProfileNativeCurrencyWithHttpInfoAsync(entityId, chainId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the native token balance 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="chainId"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfileNativeCurrencyResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetProfileNativeCurrencyResponse>> GetProfileNativeCurrencyWithHttpInfoAsync(string entityId, decimal? chainId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->GetProfileNativeCurrency");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            if (chainId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "chainId", chainId));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProfileNativeCurrencyResponse>("/v1/assets/profiles/{entityId}/native", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfileNativeCurrency", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <returns>TransferAssetResponse</returns>
        public TransferAssetResponse TransferAsset(string entityId, TransferAssetRequestInput transferAssetRequestInput)
        {
            Beam.Client.ApiResponse<TransferAssetResponse> localVarResponse = TransferAssetWithHttpInfo(entityId, transferAssetRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <returns>ApiResponse of TransferAssetResponse</returns>
        public Beam.Client.ApiResponse<TransferAssetResponse> TransferAssetWithHttpInfo(string entityId, TransferAssetRequestInput transferAssetRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferAsset");

            // verify the required parameter 'transferAssetRequestInput' is set
            if (transferAssetRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'transferAssetRequestInput' when calling AssetsApi->TransferAsset");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferAssetRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferAssetResponse>("/v1/assets/profiles/{entityId}/transfer-asset", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferAssetResponse</returns>
        public async System.Threading.Tasks.Task<TransferAssetResponse> TransferAssetAsync(string entityId, TransferAssetRequestInput transferAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<TransferAssetResponse> localVarResponse = await TransferAssetWithHttpInfoAsync(entityId, transferAssetRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer an asset (NFT assets, ERC721 / ERC1155) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferAssetRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferAssetResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<TransferAssetResponse>> TransferAssetWithHttpInfoAsync(string entityId, TransferAssetRequestInput transferAssetRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferAsset");

            // verify the required parameter 'transferAssetRequestInput' is set
            if (transferAssetRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'transferAssetRequestInput' when calling AssetsApi->TransferAsset");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferAssetRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferAssetResponse>("/v1/assets/profiles/{entityId}/transfer-asset", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferAsset", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer the native token (MC) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <returns>TransferTokenResponse</returns>
        public TransferTokenResponse TransferNativeToken(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput)
        {
            Beam.Client.ApiResponse<TransferTokenResponse> localVarResponse = TransferNativeTokenWithHttpInfo(entityId, transferNativeTokenRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer the native token (MC) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <returns>ApiResponse of TransferTokenResponse</returns>
        public Beam.Client.ApiResponse<TransferTokenResponse> TransferNativeTokenWithHttpInfo(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferNativeToken");

            // verify the required parameter 'transferNativeTokenRequestInput' is set
            if (transferNativeTokenRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'transferNativeTokenRequestInput' when calling AssetsApi->TransferNativeToken");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferNativeTokenRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferTokenResponse>("/v1/assets/profiles/{entityId}/transfer-native", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferNativeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer the native token (MC) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferTokenResponse</returns>
        public async System.Threading.Tasks.Task<TransferTokenResponse> TransferNativeTokenAsync(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<TransferTokenResponse> localVarResponse = await TransferNativeTokenWithHttpInfoAsync(entityId, transferNativeTokenRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer the native token (MC) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferNativeTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<TransferTokenResponse>> TransferNativeTokenWithHttpInfoAsync(string entityId, TransferNativeTokenRequestInput transferNativeTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferNativeToken");

            // verify the required parameter 'transferNativeTokenRequestInput' is set
            if (transferNativeTokenRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'transferNativeTokenRequestInput' when calling AssetsApi->TransferNativeToken");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferNativeTokenRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferTokenResponse>("/v1/assets/profiles/{entityId}/transfer-native", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferNativeToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <returns>TransferTokenResponse</returns>
        public TransferTokenResponse TransferToken(string entityId, TransferTokenRequestInput transferTokenRequestInput)
        {
            Beam.Client.ApiResponse<TransferTokenResponse> localVarResponse = TransferTokenWithHttpInfo(entityId, transferTokenRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <returns>ApiResponse of TransferTokenResponse</returns>
        public Beam.Client.ApiResponse<TransferTokenResponse> TransferTokenWithHttpInfo(string entityId, TransferTokenRequestInput transferTokenRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferToken");

            // verify the required parameter 'transferTokenRequestInput' is set
            if (transferTokenRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'transferTokenRequestInput' when calling AssetsApi->TransferToken");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferTokenRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferTokenResponse>("/v1/assets/profiles/{entityId}/transfer-token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferTokenResponse</returns>
        public async System.Threading.Tasks.Task<TransferTokenResponse> TransferTokenAsync(string entityId, TransferTokenRequestInput transferTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<TransferTokenResponse> localVarResponse = await TransferTokenWithHttpInfoAsync(entityId, transferTokenRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer a token (token assets, ERC20) 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="transferTokenRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<TransferTokenResponse>> TransferTokenWithHttpInfoAsync(string entityId, TransferTokenRequestInput transferTokenRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling AssetsApi->TransferToken");

            // verify the required parameter 'transferTokenRequestInput' is set
            if (transferTokenRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'transferTokenRequestInput' when calling AssetsApi->TransferToken");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = transferTokenRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TransferTokenResponse>("/v1/assets/profiles/{entityId}/transfer-token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
