/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Beam.Client;
using Beam.Model;

namespace Beam.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateLinkCodeRequestInput"></param>
        /// <returns>GenerateLinkCodeResponse</returns>
        GenerateLinkCodeResponse CreateConnectionRequest(string entityId, string xApiKey, GenerateLinkCodeRequestInput generateLinkCodeRequestInput);

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateLinkCodeRequestInput"></param>
        /// <returns>ApiResponse of GenerateLinkCodeResponse</returns>
        ApiResponse<GenerateLinkCodeResponse> CreateConnectionRequestWithHttpInfo(string entityId, string xApiKey, GenerateLinkCodeRequestInput generateLinkCodeRequestInput);
        /// <summary>
        /// Creating a profile
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequestInput"></param>
        /// <returns>CreateProfileResponse</returns>
        CreateProfileResponse CreateProfile(CreateProfileRequestInput createProfileRequestInput);

        /// <summary>
        /// Creating a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequestInput"></param>
        /// <returns>ApiResponse of CreateProfileResponse</returns>
        ApiResponse<CreateProfileResponse> CreateProfileWithHttpInfo(CreateProfileRequestInput createProfileRequestInput);
        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateSignInCodeRequestInput"></param>
        /// <returns>GenerateSignInCodeResponse</returns>
        GenerateSignInCodeResponse CreateSignInRequest(string entityId, string xApiKey, GenerateSignInCodeRequestInput generateSignInCodeRequestInput);

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateSignInCodeRequestInput"></param>
        /// <returns>ApiResponse of GenerateSignInCodeResponse</returns>
        ApiResponse<GenerateSignInCodeResponse> CreateSignInRequestWithHttpInfo(string entityId, string xApiKey, GenerateSignInCodeRequestInput generateSignInCodeRequestInput);
        /// <summary>
        /// Getting all profiles
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>GetAllProfilesResponse</returns>
        GetAllProfilesResponse GetAllProfiles(decimal? limit, decimal? offset);

        /// <summary>
        /// Getting all profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of GetAllProfilesResponse</returns>
        ApiResponse<GetAllProfilesResponse> GetAllProfilesWithHttpInfo(decimal? limit, decimal? offset);
        /// <summary>
        /// Getting information on a profile
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <returns>GetProfileResponse</returns>
        GetProfileResponse GetProfile(string entityId);

        /// <summary>
        /// Getting information on a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <returns>ApiResponse of GetProfileResponse</returns>
        ApiResponse<GetProfileResponse> GetProfileWithHttpInfo(string entityId);
        /// <summary>
        /// Update a profile
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="updateProfileRequestInput"></param>
        /// <returns>UpdateProfileResponse</returns>
        UpdateProfileResponse UpdateProfile(string entityId, UpdateProfileRequestInput updateProfileRequestInput);

        /// <summary>
        /// Update a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="updateProfileRequestInput"></param>
        /// <returns>ApiResponse of UpdateProfileResponse</returns>
        ApiResponse<UpdateProfileResponse> UpdateProfileWithHttpInfo(string entityId, UpdateProfileRequestInput updateProfileRequestInput);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateLinkCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateLinkCodeResponse</returns>
        System.Threading.Tasks.Task<GenerateLinkCodeResponse> CreateConnectionRequestAsync(string entityId, string xApiKey, GenerateLinkCodeRequestInput generateLinkCodeRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateLinkCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateLinkCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateLinkCodeResponse>> CreateConnectionRequestWithHttpInfoAsync(string entityId, string xApiKey, GenerateLinkCodeRequestInput generateLinkCodeRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creating a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateProfileResponse</returns>
        System.Threading.Tasks.Task<CreateProfileResponse> CreateProfileAsync(CreateProfileRequestInput createProfileRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creating a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateProfileResponse>> CreateProfileWithHttpInfoAsync(CreateProfileRequestInput createProfileRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateSignInCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateSignInCodeResponse</returns>
        System.Threading.Tasks.Task<GenerateSignInCodeResponse> CreateSignInRequestAsync(string entityId, string xApiKey, GenerateSignInCodeRequestInput generateSignInCodeRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateSignInCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateSignInCodeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateSignInCodeResponse>> CreateSignInRequestWithHttpInfoAsync(string entityId, string xApiKey, GenerateSignInCodeRequestInput generateSignInCodeRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getting all profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllProfilesResponse</returns>
        System.Threading.Tasks.Task<GetAllProfilesResponse> GetAllProfilesAsync(decimal? limit, decimal? offset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getting all profiles
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllProfilesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllProfilesResponse>> GetAllProfilesWithHttpInfoAsync(decimal? limit, decimal? offset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Getting information on a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfileResponse</returns>
        System.Threading.Tasks.Task<GetProfileResponse> GetProfileAsync(string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Getting information on a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetProfileResponse>> GetProfileWithHttpInfoAsync(string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="updateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateProfileResponse</returns>
        System.Threading.Tasks.Task<UpdateProfileResponse> UpdateProfileAsync(string entityId, UpdateProfileRequestInput updateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a profile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="updateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateProfileResponse>> UpdateProfileWithHttpInfoAsync(string entityId, UpdateProfileRequestInput updateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfilesApi : IProfilesApiSync, IProfilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProfilesApi : IDisposable, IProfilesApi
    {
        private Beam.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ProfilesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ProfilesApi(string basePath)
        {
            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ProfilesApi(Beam.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProfilesApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProfilesApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                new Beam.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ProfilesApi(HttpClient client, Beam.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Beam.Client.Configuration.MergeConfigurations(
                Beam.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Beam.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfilesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ProfilesApi(Beam.Client.ISynchronousClient client, Beam.Client.IAsynchronousClient asyncClient, Beam.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Beam.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Beam.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Beam.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Beam.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Beam.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Beam.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateLinkCodeRequestInput"></param>
        /// <returns>GenerateLinkCodeResponse</returns>
        public GenerateLinkCodeResponse CreateConnectionRequest(string entityId, string xApiKey, GenerateLinkCodeRequestInput generateLinkCodeRequestInput)
        {
            Beam.Client.ApiResponse<GenerateLinkCodeResponse> localVarResponse = CreateConnectionRequestWithHttpInfo(entityId, xApiKey, generateLinkCodeRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateLinkCodeRequestInput"></param>
        /// <returns>ApiResponse of GenerateLinkCodeResponse</returns>
        public Beam.Client.ApiResponse<GenerateLinkCodeResponse> CreateConnectionRequestWithHttpInfo(string entityId, string xApiKey, GenerateLinkCodeRequestInput generateLinkCodeRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ProfilesApi->CreateConnectionRequest");

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling ProfilesApi->CreateConnectionRequest");

            // verify the required parameter 'generateLinkCodeRequestInput' is set
            if (generateLinkCodeRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'generateLinkCodeRequestInput' when calling ProfilesApi->CreateConnectionRequest");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Beam.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = generateLinkCodeRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateLinkCodeResponse>("/v1/profiles/{entityId}/create-connection-request", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectionRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateLinkCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateLinkCodeResponse</returns>
        public async System.Threading.Tasks.Task<GenerateLinkCodeResponse> CreateConnectionRequestAsync(string entityId, string xApiKey, GenerateLinkCodeRequestInput generateLinkCodeRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GenerateLinkCodeResponse> localVarResponse = await CreateConnectionRequestWithHttpInfoAsync(entityId, xApiKey, generateLinkCodeRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to take control of the profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateLinkCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateLinkCodeResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GenerateLinkCodeResponse>> CreateConnectionRequestWithHttpInfoAsync(string entityId, string xApiKey, GenerateLinkCodeRequestInput generateLinkCodeRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ProfilesApi->CreateConnectionRequest");

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling ProfilesApi->CreateConnectionRequest");

            // verify the required parameter 'generateLinkCodeRequestInput' is set
            if (generateLinkCodeRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'generateLinkCodeRequestInput' when calling ProfilesApi->CreateConnectionRequest");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Beam.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = generateLinkCodeRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateLinkCodeResponse>("/v1/profiles/{entityId}/create-connection-request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateConnectionRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequestInput"></param>
        /// <returns>CreateProfileResponse</returns>
        public CreateProfileResponse CreateProfile(CreateProfileRequestInput createProfileRequestInput)
        {
            Beam.Client.ApiResponse<CreateProfileResponse> localVarResponse = CreateProfileWithHttpInfo(createProfileRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequestInput"></param>
        /// <returns>ApiResponse of CreateProfileResponse</returns>
        public Beam.Client.ApiResponse<CreateProfileResponse> CreateProfileWithHttpInfo(CreateProfileRequestInput createProfileRequestInput)
        {
            // verify the required parameter 'createProfileRequestInput' is set
            if (createProfileRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'createProfileRequestInput' when calling ProfilesApi->CreateProfile");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createProfileRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateProfileResponse>("/v1/profiles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creating a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateProfileResponse</returns>
        public async System.Threading.Tasks.Task<CreateProfileResponse> CreateProfileAsync(CreateProfileRequestInput createProfileRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<CreateProfileResponse> localVarResponse = await CreateProfileWithHttpInfoAsync(createProfileRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<CreateProfileResponse>> CreateProfileWithHttpInfoAsync(CreateProfileRequestInput createProfileRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createProfileRequestInput' is set
            if (createProfileRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'createProfileRequestInput' when calling ProfilesApi->CreateProfile");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createProfileRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateProfileResponse>("/v1/profiles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateSignInCodeRequestInput"></param>
        /// <returns>GenerateSignInCodeResponse</returns>
        public GenerateSignInCodeResponse CreateSignInRequest(string entityId, string xApiKey, GenerateSignInCodeRequestInput generateSignInCodeRequestInput)
        {
            Beam.Client.ApiResponse<GenerateSignInCodeResponse> localVarResponse = CreateSignInRequestWithHttpInfo(entityId, xApiKey, generateSignInCodeRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateSignInCodeRequestInput"></param>
        /// <returns>ApiResponse of GenerateSignInCodeResponse</returns>
        public Beam.Client.ApiResponse<GenerateSignInCodeResponse> CreateSignInRequestWithHttpInfo(string entityId, string xApiKey, GenerateSignInCodeRequestInput generateSignInCodeRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ProfilesApi->CreateSignInRequest");

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling ProfilesApi->CreateSignInRequest");

            // verify the required parameter 'generateSignInCodeRequestInput' is set
            if (generateSignInCodeRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'generateSignInCodeRequestInput' when calling ProfilesApi->CreateSignInRequest");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Beam.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = generateSignInCodeRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenerateSignInCodeResponse>("/v1/profiles/{entityId}/create-sign-in-request", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSignInRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateSignInCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateSignInCodeResponse</returns>
        public async System.Threading.Tasks.Task<GenerateSignInCodeResponse> CreateSignInRequestAsync(string entityId, string xApiKey, GenerateSignInCodeRequestInput generateSignInCodeRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GenerateSignInCodeResponse> localVarResponse = await CreateSignInRequestWithHttpInfoAsync(entityId, xApiKey, generateSignInCodeRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a challenge which can be encoded in a QR code / app link for the user to sign in to the game 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="xApiKey"></param>
        /// <param name="generateSignInCodeRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateSignInCodeResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GenerateSignInCodeResponse>> CreateSignInRequestWithHttpInfoAsync(string entityId, string xApiKey, GenerateSignInCodeRequestInput generateSignInCodeRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ProfilesApi->CreateSignInRequest");

            // verify the required parameter 'xApiKey' is set
            if (xApiKey == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'xApiKey' when calling ProfilesApi->CreateSignInRequest");

            // verify the required parameter 'generateSignInCodeRequestInput' is set
            if (generateSignInCodeRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'generateSignInCodeRequestInput' when calling ProfilesApi->CreateSignInRequest");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.HeaderParameters.Add("x-api-key", Beam.Client.ClientUtils.ParameterToString(xApiKey)); // header parameter
            localVarRequestOptions.Data = generateSignInCodeRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<GenerateSignInCodeResponse>("/v1/profiles/{entityId}/create-sign-in-request", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSignInRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all profiles 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>GetAllProfilesResponse</returns>
        public GetAllProfilesResponse GetAllProfiles(decimal? limit, decimal? offset)
        {
            Beam.Client.ApiResponse<GetAllProfilesResponse> localVarResponse = GetAllProfilesWithHttpInfo(limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all profiles 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <returns>ApiResponse of GetAllProfilesResponse</returns>
        public Beam.Client.ApiResponse<GetAllProfilesResponse> GetAllProfilesWithHttpInfo(decimal? limit, decimal? offset)
        {
            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllProfilesResponse>("/v1/profiles", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting all profiles 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllProfilesResponse</returns>
        public async System.Threading.Tasks.Task<GetAllProfilesResponse> GetAllProfilesAsync(decimal? limit, decimal? offset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetAllProfilesResponse> localVarResponse = await GetAllProfilesWithHttpInfoAsync(limit, offset, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all profiles 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit"> (optional)</param>
        /// <param name="offset"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllProfilesResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetAllProfilesResponse>> GetAllProfilesWithHttpInfoAsync(decimal? limit, decimal? offset, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Beam.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllProfilesResponse>("/v1/profiles", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllProfiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting information on a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <returns>GetProfileResponse</returns>
        public GetProfileResponse GetProfile(string entityId)
        {
            Beam.Client.ApiResponse<GetProfileResponse> localVarResponse = GetProfileWithHttpInfo(entityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting information on a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <returns>ApiResponse of GetProfileResponse</returns>
        public Beam.Client.ApiResponse<GetProfileResponse> GetProfileWithHttpInfo(string entityId)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ProfilesApi->GetProfile");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetProfileResponse>("/v1/profiles/{entityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Getting information on a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetProfileResponse</returns>
        public async System.Threading.Tasks.Task<GetProfileResponse> GetProfileAsync(string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<GetProfileResponse> localVarResponse = await GetProfileWithHttpInfoAsync(entityId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Getting information on a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<GetProfileResponse>> GetProfileWithHttpInfoAsync(string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ProfilesApi->GetProfile");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetProfileResponse>("/v1/profiles/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="updateProfileRequestInput"></param>
        /// <returns>UpdateProfileResponse</returns>
        public UpdateProfileResponse UpdateProfile(string entityId, UpdateProfileRequestInput updateProfileRequestInput)
        {
            Beam.Client.ApiResponse<UpdateProfileResponse> localVarResponse = UpdateProfileWithHttpInfo(entityId, updateProfileRequestInput);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="updateProfileRequestInput"></param>
        /// <returns>ApiResponse of UpdateProfileResponse</returns>
        public Beam.Client.ApiResponse<UpdateProfileResponse> UpdateProfileWithHttpInfo(string entityId, UpdateProfileRequestInput updateProfileRequestInput)
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ProfilesApi->UpdateProfile");

            // verify the required parameter 'updateProfileRequestInput' is set
            if (updateProfileRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'updateProfileRequestInput' when calling ProfilesApi->UpdateProfile");

            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = updateProfileRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UpdateProfileResponse>("/v1/profiles/{entityId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="updateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateProfileResponse</returns>
        public async System.Threading.Tasks.Task<UpdateProfileResponse> UpdateProfileAsync(string entityId, UpdateProfileRequestInput updateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Beam.Client.ApiResponse<UpdateProfileResponse> localVarResponse = await UpdateProfileWithHttpInfoAsync(entityId, updateProfileRequestInput, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a profile 
        /// </summary>
        /// <exception cref="Beam.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="entityId"></param>
        /// <param name="updateProfileRequestInput"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateProfileResponse)</returns>
        public async System.Threading.Tasks.Task<Beam.Client.ApiResponse<UpdateProfileResponse>> UpdateProfileWithHttpInfoAsync(string entityId, UpdateProfileRequestInput updateProfileRequestInput, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'entityId' is set
            if (entityId == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'entityId' when calling ProfilesApi->UpdateProfile");

            // verify the required parameter 'updateProfileRequestInput' is set
            if (updateProfileRequestInput == null)
                throw new Beam.Client.ApiException(400, "Missing required parameter 'updateProfileRequestInput' when calling ProfilesApi->UpdateProfile");


            Beam.Client.RequestOptions localVarRequestOptions = new Beam.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Beam.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Beam.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("entityId", Beam.Client.ClientUtils.ParameterToString(entityId)); // path parameter
            localVarRequestOptions.Data = updateProfileRequestInput;

            // authentication (Beam API game key) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<UpdateProfileResponse>("/v1/profiles/{entityId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
