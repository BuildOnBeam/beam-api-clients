// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetResponse
    /// </summary>
    public partial class GetAssetResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetResponse" /> class.
        /// </summary>
        /// <param name="chainId">chainId</param>
        /// <param name="contract">contract</param>
        /// <param name="contractAddress">contractAddress</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="network">network</param>
        /// <param name="tokenId">tokenId</param>
        /// <param name="tokenUri">tokenUri</param>
        /// <param name="attributes">attributes</param>
        /// <param name="backgroundColor">backgroundColor</param>
        /// <param name="description">description</param>
        /// <param name="externalUrl">externalUrl</param>
        /// <param name="indexerDataSyncedAt">indexerDataSyncedAt</param>
        /// <param name="lastSoldTokenAmount">lastSoldTokenAmount</param>
        /// <param name="lastSoldTokenCurrency">lastSoldTokenCurrency</param>
        /// <param name="listing">listing</param>
        /// <param name="mintedAt">mintedAt</param>
        /// <param name="normalizedRarityScore">normalizedRarityScore</param>
        /// <param name="ownershipByAddresses">ownershipByAddresses</param>
        /// <param name="rarity">rarity</param>
        /// <param name="rarityScore">rarityScore</param>
        /// <param name="standardImageUrl">standardImageUrl</param>
        /// <param name="thumbnailImageUrl">thumbnailImageUrl</param>
        /// <param name="youtubeUrl">youtubeUrl</param>
        [JsonConstructor]
        public GetAssetResponse(decimal chainId, GetAssetResponseContract contract, string contractAddress, string id, string name, NetworkEnum network, string tokenId, string tokenUri, List<GetAssetsResponseDataInnerAttributesInner> attributes = default, string backgroundColor = default, string description = default, string externalUrl = default, string indexerDataSyncedAt = default, string lastSoldTokenAmount = default, LastSoldTokenCurrencyEnum? lastSoldTokenCurrency = default, GetAssetResponseListing listing = default, string mintedAt = default, decimal? normalizedRarityScore = default, List<GetAssetResponseOwnershipByAddressesInner> ownershipByAddresses = default, RarityEnum? rarity = default, decimal? rarityScore = default, string standardImageUrl = default, string thumbnailImageUrl = default, string youtubeUrl = default)
        {
            ChainId = chainId;
            Contract = contract;
            ContractAddress = contractAddress;
            Id = id;
            Name = name;
            Network = network;
            TokenId = tokenId;
            TokenUri = tokenUri;
            Attributes = attributes;
            BackgroundColor = backgroundColor;
            Description = description;
            ExternalUrl = externalUrl;
            IndexerDataSyncedAt = indexerDataSyncedAt;
            LastSoldTokenAmount = lastSoldTokenAmount;
            LastSoldTokenCurrency = lastSoldTokenCurrency;
            Listing = listing;
            MintedAt = mintedAt;
            NormalizedRarityScore = normalizedRarityScore;
            OwnershipByAddresses = ownershipByAddresses;
            Rarity = rarity;
            RarityScore = rarityScore;
            StandardImageUrl = standardImageUrl;
            ThumbnailImageUrl = thumbnailImageUrl;
            YoutubeUrl = youtubeUrl;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Network
        /// </summary>
        public enum NetworkEnum
        {
            /// <summary>
            /// Enum Avalanche for value: Avalanche
            /// </summary>
            Avalanche = 1,

            /// <summary>
            /// Enum Beam for value: Beam
            /// </summary>
            Beam = 2,

            /// <summary>
            /// Enum Ethereum for value: Ethereum
            /// </summary>
            Ethereum = 3,

            /// <summary>
            /// Enum Polygon for value: Polygon
            /// </summary>
            Polygon = 4
        }

        /// <summary>
        /// Returns a <see cref="NetworkEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static NetworkEnum NetworkEnumFromString(string value)
        {
            if (value.Equals("Avalanche"))
                return NetworkEnum.Avalanche;

            if (value.Equals("Beam"))
                return NetworkEnum.Beam;

            if (value.Equals("Ethereum"))
                return NetworkEnum.Ethereum;

            if (value.Equals("Polygon"))
                return NetworkEnum.Polygon;

            throw new NotImplementedException($"Could not convert value to type NetworkEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="NetworkEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NetworkEnum? NetworkEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Avalanche"))
                return NetworkEnum.Avalanche;

            if (value.Equals("Beam"))
                return NetworkEnum.Beam;

            if (value.Equals("Ethereum"))
                return NetworkEnum.Ethereum;

            if (value.Equals("Polygon"))
                return NetworkEnum.Polygon;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NetworkEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string NetworkEnumToJsonValue(NetworkEnum value)
        {

            if (value == NetworkEnum.Avalanche)
                return "Avalanche";

            if (value == NetworkEnum.Beam)
                return "Beam";

            if (value == NetworkEnum.Ethereum)
                return "Ethereum";

            if (value == NetworkEnum.Polygon)
                return "Polygon";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [JsonPropertyName("network")]
        public NetworkEnum Network { get; set; }

        /// <summary>
        /// Defines LastSoldTokenCurrency
        /// </summary>
        public enum LastSoldTokenCurrencyEnum
        {
            /// <summary>
            /// Enum Avax for value: Avax
            /// </summary>
            Avax = 1,

            /// <summary>
            /// Enum Beam for value: Beam
            /// </summary>
            Beam = 2,

            /// <summary>
            /// Enum Eth for value: Eth
            /// </summary>
            Eth = 3,

            /// <summary>
            /// Enum Matic for value: Matic
            /// </summary>
            Matic = 4,

            /// <summary>
            /// Enum Mc for value: Mc
            /// </summary>
            Mc = 5,

            /// <summary>
            /// Enum Usdc for value: Usdc
            /// </summary>
            Usdc = 6,

            /// <summary>
            /// Enum Usdt for value: Usdt
            /// </summary>
            Usdt = 7,

            /// <summary>
            /// Enum Wavax for value: Wavax
            /// </summary>
            Wavax = 8,

            /// <summary>
            /// Enum Wbeam for value: Wbeam
            /// </summary>
            Wbeam = 9,

            /// <summary>
            /// Enum Weth for value: Weth
            /// </summary>
            Weth = 10,

            /// <summary>
            /// Enum Wmatic for value: Wmatic
            /// </summary>
            Wmatic = 11,

            /// <summary>
            /// Enum Wmc for value: Wmc
            /// </summary>
            Wmc = 12
        }

        /// <summary>
        /// Returns a <see cref="LastSoldTokenCurrencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LastSoldTokenCurrencyEnum LastSoldTokenCurrencyEnumFromString(string value)
        {
            if (value.Equals("Avax"))
                return LastSoldTokenCurrencyEnum.Avax;

            if (value.Equals("Beam"))
                return LastSoldTokenCurrencyEnum.Beam;

            if (value.Equals("Eth"))
                return LastSoldTokenCurrencyEnum.Eth;

            if (value.Equals("Matic"))
                return LastSoldTokenCurrencyEnum.Matic;

            if (value.Equals("Mc"))
                return LastSoldTokenCurrencyEnum.Mc;

            if (value.Equals("Usdc"))
                return LastSoldTokenCurrencyEnum.Usdc;

            if (value.Equals("Usdt"))
                return LastSoldTokenCurrencyEnum.Usdt;

            if (value.Equals("Wavax"))
                return LastSoldTokenCurrencyEnum.Wavax;

            if (value.Equals("Wbeam"))
                return LastSoldTokenCurrencyEnum.Wbeam;

            if (value.Equals("Weth"))
                return LastSoldTokenCurrencyEnum.Weth;

            if (value.Equals("Wmatic"))
                return LastSoldTokenCurrencyEnum.Wmatic;

            if (value.Equals("Wmc"))
                return LastSoldTokenCurrencyEnum.Wmc;

            throw new NotImplementedException($"Could not convert value to type LastSoldTokenCurrencyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LastSoldTokenCurrencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LastSoldTokenCurrencyEnum? LastSoldTokenCurrencyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Avax"))
                return LastSoldTokenCurrencyEnum.Avax;

            if (value.Equals("Beam"))
                return LastSoldTokenCurrencyEnum.Beam;

            if (value.Equals("Eth"))
                return LastSoldTokenCurrencyEnum.Eth;

            if (value.Equals("Matic"))
                return LastSoldTokenCurrencyEnum.Matic;

            if (value.Equals("Mc"))
                return LastSoldTokenCurrencyEnum.Mc;

            if (value.Equals("Usdc"))
                return LastSoldTokenCurrencyEnum.Usdc;

            if (value.Equals("Usdt"))
                return LastSoldTokenCurrencyEnum.Usdt;

            if (value.Equals("Wavax"))
                return LastSoldTokenCurrencyEnum.Wavax;

            if (value.Equals("Wbeam"))
                return LastSoldTokenCurrencyEnum.Wbeam;

            if (value.Equals("Weth"))
                return LastSoldTokenCurrencyEnum.Weth;

            if (value.Equals("Wmatic"))
                return LastSoldTokenCurrencyEnum.Wmatic;

            if (value.Equals("Wmc"))
                return LastSoldTokenCurrencyEnum.Wmc;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LastSoldTokenCurrencyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? LastSoldTokenCurrencyEnumToJsonValue(LastSoldTokenCurrencyEnum? value)
        {
            if (value == null)
                return null;

            if (value == LastSoldTokenCurrencyEnum.Avax)
                return "Avax";

            if (value == LastSoldTokenCurrencyEnum.Beam)
                return "Beam";

            if (value == LastSoldTokenCurrencyEnum.Eth)
                return "Eth";

            if (value == LastSoldTokenCurrencyEnum.Matic)
                return "Matic";

            if (value == LastSoldTokenCurrencyEnum.Mc)
                return "Mc";

            if (value == LastSoldTokenCurrencyEnum.Usdc)
                return "Usdc";

            if (value == LastSoldTokenCurrencyEnum.Usdt)
                return "Usdt";

            if (value == LastSoldTokenCurrencyEnum.Wavax)
                return "Wavax";

            if (value == LastSoldTokenCurrencyEnum.Wbeam)
                return "Wbeam";

            if (value == LastSoldTokenCurrencyEnum.Weth)
                return "Weth";

            if (value == LastSoldTokenCurrencyEnum.Wmatic)
                return "Wmatic";

            if (value == LastSoldTokenCurrencyEnum.Wmc)
                return "Wmc";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets LastSoldTokenCurrency
        /// </summary>
        [JsonPropertyName("lastSoldTokenCurrency")]
        public LastSoldTokenCurrencyEnum? LastSoldTokenCurrency { get; set; }

        /// <summary>
        /// Defines Rarity
        /// </summary>
        public enum RarityEnum
        {
            /// <summary>
            /// Enum Common for value: Common
            /// </summary>
            Common = 1,

            /// <summary>
            /// Enum ExtremelyRare for value: ExtremelyRare
            /// </summary>
            ExtremelyRare = 2,

            /// <summary>
            /// Enum Rare for value: Rare
            /// </summary>
            Rare = 3,

            /// <summary>
            /// Enum Uncommon for value: Uncommon
            /// </summary>
            Uncommon = 4,

            /// <summary>
            /// Enum VeryRare for value: VeryRare
            /// </summary>
            VeryRare = 5
        }

        /// <summary>
        /// Returns a <see cref="RarityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RarityEnum RarityEnumFromString(string value)
        {
            if (value.Equals("Common"))
                return RarityEnum.Common;

            if (value.Equals("ExtremelyRare"))
                return RarityEnum.ExtremelyRare;

            if (value.Equals("Rare"))
                return RarityEnum.Rare;

            if (value.Equals("Uncommon"))
                return RarityEnum.Uncommon;

            if (value.Equals("VeryRare"))
                return RarityEnum.VeryRare;

            throw new NotImplementedException($"Could not convert value to type RarityEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RarityEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RarityEnum? RarityEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Common"))
                return RarityEnum.Common;

            if (value.Equals("ExtremelyRare"))
                return RarityEnum.ExtremelyRare;

            if (value.Equals("Rare"))
                return RarityEnum.Rare;

            if (value.Equals("Uncommon"))
                return RarityEnum.Uncommon;

            if (value.Equals("VeryRare"))
                return RarityEnum.VeryRare;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RarityEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string? RarityEnumToJsonValue(RarityEnum? value)
        {
            if (value == null)
                return null;

            if (value == RarityEnum.Common)
                return "Common";

            if (value == RarityEnum.ExtremelyRare)
                return "ExtremelyRare";

            if (value == RarityEnum.Rare)
                return "Rare";

            if (value == RarityEnum.Uncommon)
                return "Uncommon";

            if (value == RarityEnum.VeryRare)
                return "VeryRare";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Rarity
        /// </summary>
        [JsonPropertyName("rarity")]
        public RarityEnum? Rarity { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public decimal ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [JsonPropertyName("contract")]
        public GetAssetResponseContract Contract { get; set; }

        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [JsonPropertyName("contractAddress")]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets TokenId
        /// </summary>
        [JsonPropertyName("tokenId")]
        public string TokenId { get; set; }

        /// <summary>
        /// Gets or Sets TokenUri
        /// </summary>
        [JsonPropertyName("tokenUri")]
        public string TokenUri { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [JsonPropertyName("attributes")]
        public List<GetAssetsResponseDataInnerAttributesInner> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [JsonPropertyName("backgroundColor")]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets ExternalUrl
        /// </summary>
        [JsonPropertyName("externalUrl")]
        public string ExternalUrl { get; set; }

        /// <summary>
        /// Gets or Sets IndexerDataSyncedAt
        /// </summary>
        [JsonPropertyName("indexerDataSyncedAt")]
        public string IndexerDataSyncedAt { get; set; }

        /// <summary>
        /// Gets or Sets LastSoldTokenAmount
        /// </summary>
        [JsonPropertyName("lastSoldTokenAmount")]
        public string LastSoldTokenAmount { get; set; }

        /// <summary>
        /// Gets or Sets Listing
        /// </summary>
        [JsonPropertyName("listing")]
        public GetAssetResponseListing Listing { get; set; }

        /// <summary>
        /// Gets or Sets MintedAt
        /// </summary>
        [JsonPropertyName("mintedAt")]
        public string MintedAt { get; set; }

        /// <summary>
        /// Gets or Sets NormalizedRarityScore
        /// </summary>
        [JsonPropertyName("normalizedRarityScore")]
        public decimal? NormalizedRarityScore { get; set; }

        /// <summary>
        /// Gets or Sets OwnershipByAddresses
        /// </summary>
        [JsonPropertyName("ownershipByAddresses")]
        public List<GetAssetResponseOwnershipByAddressesInner> OwnershipByAddresses { get; set; }

        /// <summary>
        /// Gets or Sets RarityScore
        /// </summary>
        [JsonPropertyName("rarityScore")]
        public decimal? RarityScore { get; set; }

        /// <summary>
        /// Gets or Sets StandardImageUrl
        /// </summary>
        [JsonPropertyName("standardImageUrl")]
        public string StandardImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailImageUrl
        /// </summary>
        [JsonPropertyName("thumbnailImageUrl")]
        public string ThumbnailImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets YoutubeUrl
        /// </summary>
        [JsonPropertyName("youtubeUrl")]
        public string YoutubeUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetResponse {\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  TokenId: ").Append(TokenId).Append("\n");
            sb.Append("  TokenUri: ").Append(TokenUri).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  IndexerDataSyncedAt: ").Append(IndexerDataSyncedAt).Append("\n");
            sb.Append("  LastSoldTokenAmount: ").Append(LastSoldTokenAmount).Append("\n");
            sb.Append("  LastSoldTokenCurrency: ").Append(LastSoldTokenCurrency).Append("\n");
            sb.Append("  Listing: ").Append(Listing).Append("\n");
            sb.Append("  MintedAt: ").Append(MintedAt).Append("\n");
            sb.Append("  NormalizedRarityScore: ").Append(NormalizedRarityScore).Append("\n");
            sb.Append("  OwnershipByAddresses: ").Append(OwnershipByAddresses).Append("\n");
            sb.Append("  Rarity: ").Append(Rarity).Append("\n");
            sb.Append("  RarityScore: ").Append(RarityScore).Append("\n");
            sb.Append("  StandardImageUrl: ").Append(StandardImageUrl).Append("\n");
            sb.Append("  ThumbnailImageUrl: ").Append(ThumbnailImageUrl).Append("\n");
            sb.Append("  YoutubeUrl: ").Append(YoutubeUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetResponse" />
    /// </summary>
    public class GetAssetResponseJsonConverter : JsonConverter<GetAssetResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            decimal? chainId = default;
            GetAssetResponseContract contract = default;
            string contractAddress = default;
            string id = default;
            string name = default;
            GetAssetResponse.NetworkEnum? network = default;
            string tokenId = default;
            string tokenUri = default;
            List<GetAssetsResponseDataInnerAttributesInner> attributes = default;
            string backgroundColor = default;
            string description = default;
            string externalUrl = default;
            string indexerDataSyncedAt = default;
            string lastSoldTokenAmount = default;
            GetAssetResponse.LastSoldTokenCurrencyEnum? lastSoldTokenCurrency = default;
            GetAssetResponseListing listing = default;
            string mintedAt = default;
            decimal? normalizedRarityScore = default;
            List<GetAssetResponseOwnershipByAddressesInner> ownershipByAddresses = default;
            GetAssetResponse.RarityEnum? rarity = default;
            decimal? rarityScore = default;
            string standardImageUrl = default;
            string thumbnailImageUrl = default;
            string youtubeUrl = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = utf8JsonReader.GetDecimal();
                            break;
                        case "contract":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contract = JsonSerializer.Deserialize<GetAssetResponseContract>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "contractAddress":
                            contractAddress = utf8JsonReader.GetString();
                            break;
                        case "_id":
                            id = utf8JsonReader.GetString();
                            break;
                        case "name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "network":
                            string networkRawValue = utf8JsonReader.GetString();
                            network = networkRawValue == null
                                ? null
                                : GetAssetResponse.NetworkEnumFromStringOrDefault(networkRawValue);
                            break;
                        case "tokenId":
                            tokenId = utf8JsonReader.GetString();
                            break;
                        case "tokenUri":
                            tokenUri = utf8JsonReader.GetString();
                            break;
                        case "attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attributes = JsonSerializer.Deserialize<List<GetAssetsResponseDataInnerAttributesInner>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "backgroundColor":
                            backgroundColor = utf8JsonReader.GetString();
                            break;
                        case "description":
                            description = utf8JsonReader.GetString();
                            break;
                        case "externalUrl":
                            externalUrl = utf8JsonReader.GetString();
                            break;
                        case "indexerDataSyncedAt":
                            indexerDataSyncedAt = utf8JsonReader.GetString();
                            break;
                        case "lastSoldTokenAmount":
                            lastSoldTokenAmount = utf8JsonReader.GetString();
                            break;
                        case "lastSoldTokenCurrency":
                            string lastSoldTokenCurrencyRawValue = utf8JsonReader.GetString();
                            lastSoldTokenCurrency = lastSoldTokenCurrencyRawValue == null
                                ? null
                                : GetAssetResponse.LastSoldTokenCurrencyEnumFromStringOrDefault(lastSoldTokenCurrencyRawValue);
                            break;
                        case "listing":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                listing = JsonSerializer.Deserialize<GetAssetResponseListing>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "mintedAt":
                            mintedAt = utf8JsonReader.GetString();
                            break;
                        case "normalizedRarityScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                normalizedRarityScore = utf8JsonReader.GetDecimal();
                            break;
                        case "ownershipByAddresses":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ownershipByAddresses = JsonSerializer.Deserialize<List<GetAssetResponseOwnershipByAddressesInner>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "rarity":
                            string rarityRawValue = utf8JsonReader.GetString();
                            rarity = rarityRawValue == null
                                ? null
                                : GetAssetResponse.RarityEnumFromStringOrDefault(rarityRawValue);
                            break;
                        case "rarityScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rarityScore = utf8JsonReader.GetDecimal();
                            break;
                        case "standardImageUrl":
                            standardImageUrl = utf8JsonReader.GetString();
                            break;
                        case "thumbnailImageUrl":
                            thumbnailImageUrl = utf8JsonReader.GetString();
                            break;
                        case "youtubeUrl":
                            youtubeUrl = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (chainId == null)
                throw new ArgumentNullException(nameof(chainId), "Property is required for class GetAssetResponse.");

            if (contract == null)
                throw new ArgumentNullException(nameof(contract), "Property is required for class GetAssetResponse.");

            if (contractAddress == null)
                throw new ArgumentNullException(nameof(contractAddress), "Property is required for class GetAssetResponse.");

            if (id == null)
                throw new ArgumentNullException(nameof(id), "Property is required for class GetAssetResponse.");

            if (name == null)
                throw new ArgumentNullException(nameof(name), "Property is required for class GetAssetResponse.");

            if (network == null)
                throw new ArgumentNullException(nameof(network), "Property is required for class GetAssetResponse.");

            if (tokenId == null)
                throw new ArgumentNullException(nameof(tokenId), "Property is required for class GetAssetResponse.");

            if (tokenUri == null)
                throw new ArgumentNullException(nameof(tokenUri), "Property is required for class GetAssetResponse.");

            return new GetAssetResponse(chainId.Value, contract, contractAddress, id, name, network.Value, tokenId, tokenUri, attributes, backgroundColor, description, externalUrl, indexerDataSyncedAt, lastSoldTokenAmount, lastSoldTokenCurrency, listing, mintedAt, normalizedRarityScore, ownershipByAddresses, rarity, rarityScore, standardImageUrl, thumbnailImageUrl, youtubeUrl);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetResponse getAssetResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetResponse getAssetResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("chainId", getAssetResponse.ChainId);
            writer.WritePropertyName("contract");
            JsonSerializer.Serialize(writer, getAssetResponse.Contract, jsonSerializerOptions);
            writer.WriteString("contractAddress", getAssetResponse.ContractAddress);
            writer.WriteString("_id", getAssetResponse.Id);
            writer.WriteString("name", getAssetResponse.Name);

            var networkRawValue = GetAssetResponse.NetworkEnumToJsonValue(getAssetResponse.Network);
            if (networkRawValue != null)
                writer.WriteString("network", networkRawValue);
            else
                writer.WriteNull("network");

            writer.WriteString("tokenId", getAssetResponse.TokenId);
            writer.WriteString("tokenUri", getAssetResponse.TokenUri);
            writer.WritePropertyName("attributes");
            JsonSerializer.Serialize(writer, getAssetResponse.Attributes, jsonSerializerOptions);
            writer.WriteString("backgroundColor", getAssetResponse.BackgroundColor);
            writer.WriteString("description", getAssetResponse.Description);
            writer.WriteString("externalUrl", getAssetResponse.ExternalUrl);
            writer.WriteString("indexerDataSyncedAt", getAssetResponse.IndexerDataSyncedAt);
            writer.WriteString("lastSoldTokenAmount", getAssetResponse.LastSoldTokenAmount);

            var lastSoldTokenCurrencyRawValue = GetAssetResponse.LastSoldTokenCurrencyEnumToJsonValue(getAssetResponse.LastSoldTokenCurrency);
            if (lastSoldTokenCurrencyRawValue != null)
                writer.WriteString("lastSoldTokenCurrency", lastSoldTokenCurrencyRawValue);
            else
                writer.WriteNull("lastSoldTokenCurrency");

            writer.WritePropertyName("listing");
            JsonSerializer.Serialize(writer, getAssetResponse.Listing, jsonSerializerOptions);
            writer.WriteString("mintedAt", getAssetResponse.MintedAt);

            if (getAssetResponse.NormalizedRarityScore != null)
                writer.WriteNumber("normalizedRarityScore", getAssetResponse.NormalizedRarityScore.Value);
            else
                writer.WriteNull("normalizedRarityScore");

            writer.WritePropertyName("ownershipByAddresses");
            JsonSerializer.Serialize(writer, getAssetResponse.OwnershipByAddresses, jsonSerializerOptions);

            var rarityRawValue = GetAssetResponse.RarityEnumToJsonValue(getAssetResponse.Rarity);
            if (rarityRawValue != null)
                writer.WriteString("rarity", rarityRawValue);
            else
                writer.WriteNull("rarity");

            if (getAssetResponse.RarityScore != null)
                writer.WriteNumber("rarityScore", getAssetResponse.RarityScore.Value);
            else
                writer.WriteNull("rarityScore");

            writer.WriteString("standardImageUrl", getAssetResponse.StandardImageUrl);
            writer.WriteString("thumbnailImageUrl", getAssetResponse.ThumbnailImageUrl);
            writer.WriteString("youtubeUrl", getAssetResponse.YoutubeUrl);
        }
    }
}
