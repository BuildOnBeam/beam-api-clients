// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetsBodyInputFilter
    /// </summary>
    public partial class GetAssetsBodyInputFilter : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetsBodyInputFilter" /> class.
        /// </summary>
        /// <param name="attributes">attributes</param>
        /// <param name="sellTypes">sellTypes</param>
        [JsonConstructor]
        public GetAssetsBodyInputFilter(List<GetProfileAssetsForGameFilterParameterAttributesInner> attributes = default, List<GetAssetsBodyInputFilter.SellTypesEnum> sellTypes = default)
        {
            Attributes = attributes;
            SellTypes = sellTypes;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines SellTypes
        /// </summary>
        public enum SellTypesEnum
        {
            /// <summary>
            /// Enum AscendingAuction for value: AscendingAuction
            /// </summary>
            AscendingAuction = 1,

            /// <summary>
            /// Enum DescendingAuction for value: DescendingAuction
            /// </summary>
            DescendingAuction = 2,

            /// <summary>
            /// Enum FixedPrice for value: FixedPrice
            /// </summary>
            FixedPrice = 3,

            /// <summary>
            /// Enum NotForSale for value: NotForSale
            /// </summary>
            NotForSale = 4
        }

        /// <summary>
        /// Returns a <see cref="SellTypesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SellTypesEnum SellTypesEnumFromString(string value)
        {
            if (value.Equals("AscendingAuction"))
                return SellTypesEnum.AscendingAuction;

            if (value.Equals("DescendingAuction"))
                return SellTypesEnum.DescendingAuction;

            if (value.Equals("FixedPrice"))
                return SellTypesEnum.FixedPrice;

            if (value.Equals("NotForSale"))
                return SellTypesEnum.NotForSale;

            throw new NotImplementedException($"Could not convert value to type SellTypesEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SellTypesEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SellTypesEnum? SellTypesEnumFromStringOrDefault(string value)
        {
            if (value.Equals("AscendingAuction"))
                return SellTypesEnum.AscendingAuction;

            if (value.Equals("DescendingAuction"))
                return SellTypesEnum.DescendingAuction;

            if (value.Equals("FixedPrice"))
                return SellTypesEnum.FixedPrice;

            if (value.Equals("NotForSale"))
                return SellTypesEnum.NotForSale;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SellTypesEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SellTypesEnumToJsonValue(SellTypesEnum value)
        {

            if (value == SellTypesEnum.AscendingAuction)
                return "AscendingAuction";

            if (value == SellTypesEnum.DescendingAuction)
                return "DescendingAuction";

            if (value == SellTypesEnum.FixedPrice)
                return "FixedPrice";

            if (value == SellTypesEnum.NotForSale)
                return "NotForSale";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [JsonPropertyName("attributes")]
        public List<GetProfileAssetsForGameFilterParameterAttributesInner> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets SellTypes
        /// </summary>
        [JsonPropertyName("sellTypes")]
        public List<GetAssetsBodyInputFilter.SellTypesEnum> SellTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetsBodyInputFilter {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  SellTypes: ").Append(SellTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetsBodyInputFilter" />
    /// </summary>
    public class GetAssetsBodyInputFilterJsonConverter : JsonConverter<GetAssetsBodyInputFilter>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetsBodyInputFilter" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetsBodyInputFilter Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            List<GetProfileAssetsForGameFilterParameterAttributesInner> attributes = default;
            List<GetAssetsBodyInputFilter.SellTypesEnum> sellTypes = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attributes = JsonSerializer.Deserialize<List<GetProfileAssetsForGameFilterParameterAttributesInner>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "sellTypes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sellTypes = JsonSerializer.Deserialize<List<GetAssetsBodyInputFilter.SellTypesEnum>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            return new GetAssetsBodyInputFilter(attributes, sellTypes);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetsBodyInputFilter" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetsBodyInputFilter"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetsBodyInputFilter getAssetsBodyInputFilter, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetsBodyInputFilter, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetsBodyInputFilter" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetsBodyInputFilter"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetsBodyInputFilter getAssetsBodyInputFilter, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WritePropertyName("attributes");
            JsonSerializer.Serialize(writer, getAssetsBodyInputFilter.Attributes, jsonSerializerOptions);
            writer.WritePropertyName("sellTypes");
            JsonSerializer.Serialize(writer, getAssetsBodyInputFilter.SellTypes, jsonSerializerOptions);
        }
    }
}
