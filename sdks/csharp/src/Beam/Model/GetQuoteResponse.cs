/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Beam.Client.FileParameter;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// GetQuoteResponse
    /// </summary>
    [DataContract(Name = "GetQuoteResponse")]
    public partial class GetQuoteResponse : IEquatable<GetQuoteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetQuoteResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetQuoteResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetQuoteResponse" /> class.
        /// </summary>
        /// <param name="tokenIn">tokenIn (required).</param>
        /// <param name="tokenOut">tokenOut (required).</param>
        /// <param name="amountIn">amountIn (required).</param>
        /// <param name="amountOut">amountOut (required).</param>
        public GetQuoteResponse(string tokenIn = default(string), string tokenOut = default(string), string amountIn = default(string), string amountOut = default(string))
        {
            // to ensure "tokenIn" is required (not null)
            if (tokenIn == null)
            {
                throw new ArgumentNullException("tokenIn is a required property for GetQuoteResponse and cannot be null");
            }
            this.TokenIn = tokenIn;
            // to ensure "tokenOut" is required (not null)
            if (tokenOut == null)
            {
                throw new ArgumentNullException("tokenOut is a required property for GetQuoteResponse and cannot be null");
            }
            this.TokenOut = tokenOut;
            // to ensure "amountIn" is required (not null)
            if (amountIn == null)
            {
                throw new ArgumentNullException("amountIn is a required property for GetQuoteResponse and cannot be null");
            }
            this.AmountIn = amountIn;
            // to ensure "amountOut" is required (not null)
            if (amountOut == null)
            {
                throw new ArgumentNullException("amountOut is a required property for GetQuoteResponse and cannot be null");
            }
            this.AmountOut = amountOut;
        }

        /// <summary>
        /// Gets or Sets TokenIn
        /// </summary>
        [DataMember(Name = "tokenIn", IsRequired = true, EmitDefaultValue = true)]
        public string TokenIn { get; set; }

        /// <summary>
        /// Gets or Sets TokenOut
        /// </summary>
        [DataMember(Name = "tokenOut", IsRequired = true, EmitDefaultValue = true)]
        public string TokenOut { get; set; }

        /// <summary>
        /// Gets or Sets AmountIn
        /// </summary>
        [DataMember(Name = "amountIn", IsRequired = true, EmitDefaultValue = true)]
        public string AmountIn { get; set; }

        /// <summary>
        /// Gets or Sets AmountOut
        /// </summary>
        [DataMember(Name = "amountOut", IsRequired = true, EmitDefaultValue = true)]
        public string AmountOut { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetQuoteResponse {\n");
            sb.Append("  TokenIn: ").Append(TokenIn).Append("\n");
            sb.Append("  TokenOut: ").Append(TokenOut).Append("\n");
            sb.Append("  AmountIn: ").Append(AmountIn).Append("\n");
            sb.Append("  AmountOut: ").Append(AmountOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetQuoteResponse);
        }

        /// <summary>
        /// Returns true if GetQuoteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetQuoteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetQuoteResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TokenIn == input.TokenIn ||
                    (this.TokenIn != null &&
                    this.TokenIn.Equals(input.TokenIn))
                ) && 
                (
                    this.TokenOut == input.TokenOut ||
                    (this.TokenOut != null &&
                    this.TokenOut.Equals(input.TokenOut))
                ) && 
                (
                    this.AmountIn == input.AmountIn ||
                    (this.AmountIn != null &&
                    this.AmountIn.Equals(input.AmountIn))
                ) && 
                (
                    this.AmountOut == input.AmountOut ||
                    (this.AmountOut != null &&
                    this.AmountOut.Equals(input.AmountOut))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TokenIn != null)
                {
                    hashCode = (hashCode * 59) + this.TokenIn.GetHashCode();
                }
                if (this.TokenOut != null)
                {
                    hashCode = (hashCode * 59) + this.TokenOut.GetHashCode();
                }
                if (this.AmountIn != null)
                {
                    hashCode = (hashCode * 59) + this.AmountIn.GetHashCode();
                }
                if (this.AmountOut != null)
                {
                    hashCode = (hashCode * 59) + this.AmountOut.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
