// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetOffersResponseDataInner
    /// </summary>
    public partial class GetAssetOffersResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetOffersResponseDataInner" /> class.
        /// </summary>
        /// <param name="currency">currency</param>
        /// <param name="endTime">endTime</param>
        /// <param name="kind">kind</param>
        /// <param name="offerer">offerer</param>
        /// <param name="offererEntityId">offererEntityId</param>
        /// <param name="orderId">orderId</param>
        /// <param name="quantity">quantity</param>
        /// <param name="quantityAvailable">quantityAvailable</param>
        /// <param name="quantityFilled">quantityFilled</param>
        /// <param name="startTime">startTime</param>
        /// <param name="tokenAmount">tokenAmount</param>
        /// <param name="tokenAmountNumber">tokenAmountNumber</param>
        [JsonConstructor]
        public GetAssetOffersResponseDataInner(CurrencyEnum currency, DateTime endTime, KindEnum kind, string offerer, string offererEntityId, string orderId, decimal quantity, decimal quantityAvailable, decimal quantityFilled, DateTime startTime, string tokenAmount, decimal tokenAmountNumber)
        {
            Currency = currency;
            EndTime = endTime;
            Kind = kind;
            Offerer = offerer;
            OffererEntityId = offererEntityId;
            OrderId = orderId;
            Quantity = quantity;
            QuantityAvailable = quantityAvailable;
            QuantityFilled = quantityFilled;
            StartTime = startTime;
            TokenAmount = tokenAmount;
            TokenAmountNumber = tokenAmountNumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Currency
        /// </summary>
        public enum CurrencyEnum
        {
            /// <summary>
            /// Enum Avax for value: Avax
            /// </summary>
            Avax = 1,

            /// <summary>
            /// Enum Beam for value: Beam
            /// </summary>
            Beam = 2,

            /// <summary>
            /// Enum Eth for value: Eth
            /// </summary>
            Eth = 3,

            /// <summary>
            /// Enum Matic for value: Matic
            /// </summary>
            Matic = 4,

            /// <summary>
            /// Enum Mc for value: Mc
            /// </summary>
            Mc = 5,

            /// <summary>
            /// Enum Usdc for value: Usdc
            /// </summary>
            Usdc = 6,

            /// <summary>
            /// Enum Usdt for value: Usdt
            /// </summary>
            Usdt = 7,

            /// <summary>
            /// Enum Wavax for value: Wavax
            /// </summary>
            Wavax = 8,

            /// <summary>
            /// Enum Wbeam for value: Wbeam
            /// </summary>
            Wbeam = 9,

            /// <summary>
            /// Enum Weth for value: Weth
            /// </summary>
            Weth = 10,

            /// <summary>
            /// Enum Wmatic for value: Wmatic
            /// </summary>
            Wmatic = 11,

            /// <summary>
            /// Enum Wmc for value: Wmc
            /// </summary>
            Wmc = 12
        }

        /// <summary>
        /// Returns a <see cref="CurrencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CurrencyEnum CurrencyEnumFromString(string value)
        {
            if (value.Equals("Avax"))
                return CurrencyEnum.Avax;

            if (value.Equals("Beam"))
                return CurrencyEnum.Beam;

            if (value.Equals("Eth"))
                return CurrencyEnum.Eth;

            if (value.Equals("Matic"))
                return CurrencyEnum.Matic;

            if (value.Equals("Mc"))
                return CurrencyEnum.Mc;

            if (value.Equals("Usdc"))
                return CurrencyEnum.Usdc;

            if (value.Equals("Usdt"))
                return CurrencyEnum.Usdt;

            if (value.Equals("Wavax"))
                return CurrencyEnum.Wavax;

            if (value.Equals("Wbeam"))
                return CurrencyEnum.Wbeam;

            if (value.Equals("Weth"))
                return CurrencyEnum.Weth;

            if (value.Equals("Wmatic"))
                return CurrencyEnum.Wmatic;

            if (value.Equals("Wmc"))
                return CurrencyEnum.Wmc;

            throw new NotImplementedException($"Could not convert value to type CurrencyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CurrencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CurrencyEnum? CurrencyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Avax"))
                return CurrencyEnum.Avax;

            if (value.Equals("Beam"))
                return CurrencyEnum.Beam;

            if (value.Equals("Eth"))
                return CurrencyEnum.Eth;

            if (value.Equals("Matic"))
                return CurrencyEnum.Matic;

            if (value.Equals("Mc"))
                return CurrencyEnum.Mc;

            if (value.Equals("Usdc"))
                return CurrencyEnum.Usdc;

            if (value.Equals("Usdt"))
                return CurrencyEnum.Usdt;

            if (value.Equals("Wavax"))
                return CurrencyEnum.Wavax;

            if (value.Equals("Wbeam"))
                return CurrencyEnum.Wbeam;

            if (value.Equals("Weth"))
                return CurrencyEnum.Weth;

            if (value.Equals("Wmatic"))
                return CurrencyEnum.Wmatic;

            if (value.Equals("Wmc"))
                return CurrencyEnum.Wmc;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CurrencyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CurrencyEnumToJsonValue(CurrencyEnum value)
        {

            if (value == CurrencyEnum.Avax)
                return "Avax";

            if (value == CurrencyEnum.Beam)
                return "Beam";

            if (value == CurrencyEnum.Eth)
                return "Eth";

            if (value == CurrencyEnum.Matic)
                return "Matic";

            if (value == CurrencyEnum.Mc)
                return "Mc";

            if (value == CurrencyEnum.Usdc)
                return "Usdc";

            if (value == CurrencyEnum.Usdt)
                return "Usdt";

            if (value == CurrencyEnum.Wavax)
                return "Wavax";

            if (value == CurrencyEnum.Wbeam)
                return "Wbeam";

            if (value == CurrencyEnum.Weth)
                return "Weth";

            if (value == CurrencyEnum.Wmatic)
                return "Wmatic";

            if (value == CurrencyEnum.Wmc)
                return "Wmc";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonPropertyName("currency")]
        public CurrencyEnum Currency { get; set; }

        /// <summary>
        /// Defines Kind
        /// </summary>
        public enum KindEnum
        {
            /// <summary>
            /// Enum SignedCollectionOrder for value: SignedCollectionOrder
            /// </summary>
            SignedCollectionOrder = 1,

            /// <summary>
            /// Enum SignedSingleOrder for value: SignedSingleOrder
            /// </summary>
            SignedSingleOrder = 2
        }

        /// <summary>
        /// Returns a <see cref="KindEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static KindEnum KindEnumFromString(string value)
        {
            if (value.Equals("SignedCollectionOrder"))
                return KindEnum.SignedCollectionOrder;

            if (value.Equals("SignedSingleOrder"))
                return KindEnum.SignedSingleOrder;

            throw new NotImplementedException($"Could not convert value to type KindEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="KindEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static KindEnum? KindEnumFromStringOrDefault(string value)
        {
            if (value.Equals("SignedCollectionOrder"))
                return KindEnum.SignedCollectionOrder;

            if (value.Equals("SignedSingleOrder"))
                return KindEnum.SignedSingleOrder;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="KindEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string KindEnumToJsonValue(KindEnum value)
        {

            if (value == KindEnum.SignedCollectionOrder)
                return "SignedCollectionOrder";

            if (value == KindEnum.SignedSingleOrder)
                return "SignedSingleOrder";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [JsonPropertyName("kind")]
        public KindEnum Kind { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public DateTime EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Offerer
        /// </summary>
        [JsonPropertyName("offerer")]
        public string Offerer { get; set; }

        /// <summary>
        /// Gets or Sets OffererEntityId
        /// </summary>
        [JsonPropertyName("offererEntityId")]
        public string OffererEntityId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Gets or Sets QuantityAvailable
        /// </summary>
        [JsonPropertyName("quantityAvailable")]
        public decimal QuantityAvailable { get; set; }

        /// <summary>
        /// Gets or Sets QuantityFilled
        /// </summary>
        [JsonPropertyName("quantityFilled")]
        public decimal QuantityFilled { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets TokenAmount
        /// </summary>
        [JsonPropertyName("tokenAmount")]
        public string TokenAmount { get; set; }

        /// <summary>
        /// Gets or Sets TokenAmountNumber
        /// </summary>
        [JsonPropertyName("tokenAmountNumber")]
        public decimal TokenAmountNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetOffersResponseDataInner {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Offerer: ").Append(Offerer).Append("\n");
            sb.Append("  OffererEntityId: ").Append(OffererEntityId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  QuantityFilled: ").Append(QuantityFilled).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  TokenAmount: ").Append(TokenAmount).Append("\n");
            sb.Append("  TokenAmountNumber: ").Append(TokenAmountNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetOffersResponseDataInner" />
    /// </summary>
    public class GetAssetOffersResponseDataInnerJsonConverter : JsonConverter<GetAssetOffersResponseDataInner>
    {
        /// <summary>
        /// The format to use to serialize EndTime
        /// </summary>
        public static string EndTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize StartTime
        /// </summary>
        public static string StartTimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="GetAssetOffersResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetOffersResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            GetAssetOffersResponseDataInner.CurrencyEnum? currency = default;
            DateTime? endTime = default;
            GetAssetOffersResponseDataInner.KindEnum? kind = default;
            string offerer = default;
            string offererEntityId = default;
            string orderId = default;
            decimal? quantity = default;
            decimal? quantityAvailable = default;
            decimal? quantityFilled = default;
            DateTime? startTime = default;
            string tokenAmount = default;
            decimal? tokenAmountNumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "currency":
                            string currencyRawValue = utf8JsonReader.GetString();
                            currency = currencyRawValue == null
                                ? null
                                : GetAssetOffersResponseDataInner.CurrencyEnumFromStringOrDefault(currencyRawValue);
                            break;
                        case "endTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                endTime = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "kind":
                            string kindRawValue = utf8JsonReader.GetString();
                            kind = kindRawValue == null
                                ? null
                                : GetAssetOffersResponseDataInner.KindEnumFromStringOrDefault(kindRawValue);
                            break;
                        case "offerer":
                            offerer = utf8JsonReader.GetString();
                            break;
                        case "offererEntityId":
                            offererEntityId = utf8JsonReader.GetString();
                            break;
                        case "orderId":
                            orderId = utf8JsonReader.GetString();
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = utf8JsonReader.GetDecimal();
                            break;
                        case "quantityAvailable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityAvailable = utf8JsonReader.GetDecimal();
                            break;
                        case "quantityFilled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityFilled = utf8JsonReader.GetDecimal();
                            break;
                        case "startTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                startTime = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "tokenAmount":
                            tokenAmount = utf8JsonReader.GetString();
                            break;
                        case "tokenAmountNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tokenAmountNumber = utf8JsonReader.GetDecimal();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (currency == null)
                throw new ArgumentNullException(nameof(currency), "Property is required for class GetAssetOffersResponseDataInner.");

            if (endTime == null)
                throw new ArgumentNullException(nameof(endTime), "Property is required for class GetAssetOffersResponseDataInner.");

            if (kind == null)
                throw new ArgumentNullException(nameof(kind), "Property is required for class GetAssetOffersResponseDataInner.");

            if (offerer == null)
                throw new ArgumentNullException(nameof(offerer), "Property is required for class GetAssetOffersResponseDataInner.");

            if (offererEntityId == null)
                throw new ArgumentNullException(nameof(offererEntityId), "Property is required for class GetAssetOffersResponseDataInner.");

            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId), "Property is required for class GetAssetOffersResponseDataInner.");

            if (quantity == null)
                throw new ArgumentNullException(nameof(quantity), "Property is required for class GetAssetOffersResponseDataInner.");

            if (quantityAvailable == null)
                throw new ArgumentNullException(nameof(quantityAvailable), "Property is required for class GetAssetOffersResponseDataInner.");

            if (quantityFilled == null)
                throw new ArgumentNullException(nameof(quantityFilled), "Property is required for class GetAssetOffersResponseDataInner.");

            if (startTime == null)
                throw new ArgumentNullException(nameof(startTime), "Property is required for class GetAssetOffersResponseDataInner.");

            if (tokenAmount == null)
                throw new ArgumentNullException(nameof(tokenAmount), "Property is required for class GetAssetOffersResponseDataInner.");

            if (tokenAmountNumber == null)
                throw new ArgumentNullException(nameof(tokenAmountNumber), "Property is required for class GetAssetOffersResponseDataInner.");

            return new GetAssetOffersResponseDataInner(currency.Value, endTime.Value, kind.Value, offerer, offererEntityId, orderId, quantity.Value, quantityAvailable.Value, quantityFilled.Value, startTime.Value, tokenAmount, tokenAmountNumber.Value);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetOffersResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetOffersResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetOffersResponseDataInner getAssetOffersResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetOffersResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetOffersResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetOffersResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetOffersResponseDataInner getAssetOffersResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {

            var currencyRawValue = GetAssetOffersResponseDataInner.CurrencyEnumToJsonValue(getAssetOffersResponseDataInner.Currency);
            if (currencyRawValue != null)
                writer.WriteString("currency", currencyRawValue);
            else
                writer.WriteNull("currency");

            writer.WriteString("endTime", getAssetOffersResponseDataInner.EndTime.ToString(EndTimeFormat));

            var kindRawValue = GetAssetOffersResponseDataInner.KindEnumToJsonValue(getAssetOffersResponseDataInner.Kind);
            if (kindRawValue != null)
                writer.WriteString("kind", kindRawValue);
            else
                writer.WriteNull("kind");

            writer.WriteString("offerer", getAssetOffersResponseDataInner.Offerer);
            writer.WriteString("offererEntityId", getAssetOffersResponseDataInner.OffererEntityId);
            writer.WriteString("orderId", getAssetOffersResponseDataInner.OrderId);
            writer.WriteNumber("quantity", getAssetOffersResponseDataInner.Quantity);
            writer.WriteNumber("quantityAvailable", getAssetOffersResponseDataInner.QuantityAvailable);
            writer.WriteNumber("quantityFilled", getAssetOffersResponseDataInner.QuantityFilled);
            writer.WriteString("startTime", getAssetOffersResponseDataInner.StartTime.ToString(StartTimeFormat));
            writer.WriteString("tokenAmount", getAssetOffersResponseDataInner.TokenAmount);
            writer.WriteNumber("tokenAmountNumber", getAssetOffersResponseDataInner.TokenAmountNumber);
        }
    }
}
