// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Beam.Client;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetListingsResponseDataInner
    /// </summary>
    public partial class GetAssetListingsResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetListingsResponseDataInner" /> class.
        /// </summary>
        /// <param name="contractId">contractId</param>
        /// <param name="currency">currency</param>
        /// <param name="expiresAt">expiresAt</param>
        /// <param name="marketplaceId">marketplaceId</param>
        /// <param name="nft">nft</param>
        /// <param name="orderId">orderId</param>
        /// <param name="platformFee">platformFee</param>
        /// <param name="quantityAvailable">quantityAvailable</param>
        /// <param name="quantityFilled">quantityFilled</param>
        /// <param name="quantityListed">quantityListed</param>
        /// <param name="royaltyFee">royaltyFee</param>
        /// <param name="sellType">sellType</param>
        /// <param name="sellerAddress">sellerAddress</param>
        /// <param name="endPrice">endPrice</param>
        /// <param name="endTime">endTime</param>
        /// <param name="price">price</param>
        /// <param name="sellerEntityId">sellerEntityId</param>
        /// <param name="startPrice">startPrice</param>
        /// <param name="startTime">startTime</param>
        [JsonConstructor]
        public GetAssetListingsResponseDataInner(string contractId, string currency, string expiresAt, string marketplaceId, GetAssetListingsResponseDataInnerNft nft, string orderId, decimal platformFee, decimal quantityAvailable, decimal quantityFilled, decimal quantityListed, decimal royaltyFee, string sellType, string sellerAddress, string endPrice = default, string endTime = default, string price = default, Option<string> sellerEntityId = default, string startPrice = default, string startTime = default)
        {
            ContractId = contractId;
            Currency = currency;
            ExpiresAt = expiresAt;
            MarketplaceId = marketplaceId;
            Nft = nft;
            OrderId = orderId;
            PlatformFee = platformFee;
            QuantityAvailable = quantityAvailable;
            QuantityFilled = quantityFilled;
            QuantityListed = quantityListed;
            RoyaltyFee = royaltyFee;
            SellType = sellType;
            SellerAddress = sellerAddress;
            EndPrice = endPrice;
            EndTime = endTime;
            Price = price;
            SellerEntityIdOption = sellerEntityId;
            StartPrice = startPrice;
            StartTime = startTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceId
        /// </summary>
        [JsonPropertyName("marketplaceId")]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets Nft
        /// </summary>
        [JsonPropertyName("nft")]
        public GetAssetListingsResponseDataInnerNft Nft { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PlatformFee
        /// </summary>
        [JsonPropertyName("platformFee")]
        public decimal PlatformFee { get; set; }

        /// <summary>
        /// Gets or Sets QuantityAvailable
        /// </summary>
        [JsonPropertyName("quantityAvailable")]
        public decimal QuantityAvailable { get; set; }

        /// <summary>
        /// Gets or Sets QuantityFilled
        /// </summary>
        [JsonPropertyName("quantityFilled")]
        public decimal QuantityFilled { get; set; }

        /// <summary>
        /// Gets or Sets QuantityListed
        /// </summary>
        [JsonPropertyName("quantityListed")]
        public decimal QuantityListed { get; set; }

        /// <summary>
        /// Gets or Sets RoyaltyFee
        /// </summary>
        [JsonPropertyName("royaltyFee")]
        public decimal RoyaltyFee { get; set; }

        /// <summary>
        /// Gets or Sets SellType
        /// </summary>
        [JsonPropertyName("sellType")]
        public string SellType { get; set; }

        /// <summary>
        /// Gets or Sets SellerAddress
        /// </summary>
        [JsonPropertyName("sellerAddress")]
        public string SellerAddress { get; set; }

        /// <summary>
        /// Gets or Sets EndPrice
        /// </summary>
        [JsonPropertyName("endPrice")]
        public string EndPrice { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public string Price { get; set; }

        /// <summary>
        /// Used to track the state of SellerEntityId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> SellerEntityIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets SellerEntityId
        /// </summary>
        [JsonPropertyName("sellerEntityId")]
        public string SellerEntityId { get { return this. SellerEntityIdOption; } set { this.SellerEntityIdOption = new(value); } }

        /// <summary>
        /// Gets or Sets StartPrice
        /// </summary>
        [JsonPropertyName("startPrice")]
        public string StartPrice { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetListingsResponseDataInner {\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Nft: ").Append(Nft).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PlatformFee: ").Append(PlatformFee).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  QuantityFilled: ").Append(QuantityFilled).Append("\n");
            sb.Append("  QuantityListed: ").Append(QuantityListed).Append("\n");
            sb.Append("  RoyaltyFee: ").Append(RoyaltyFee).Append("\n");
            sb.Append("  SellType: ").Append(SellType).Append("\n");
            sb.Append("  SellerAddress: ").Append(SellerAddress).Append("\n");
            sb.Append("  EndPrice: ").Append(EndPrice).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SellerEntityId: ").Append(SellerEntityId).Append("\n");
            sb.Append("  StartPrice: ").Append(StartPrice).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetListingsResponseDataInner" />
    /// </summary>
    public class GetAssetListingsResponseDataInnerJsonConverter : JsonConverter<GetAssetListingsResponseDataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetListingsResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetListingsResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> contractId = default;
            Option<string> currency = default;
            Option<string> expiresAt = default;
            Option<string> marketplaceId = default;
            Option<GetAssetListingsResponseDataInnerNft> nft = default;
            Option<string> orderId = default;
            Option<decimal?> platformFee = default;
            Option<decimal?> quantityAvailable = default;
            Option<decimal?> quantityFilled = default;
            Option<decimal?> quantityListed = default;
            Option<decimal?> royaltyFee = default;
            Option<string> sellType = default;
            Option<string> sellerAddress = default;
            Option<string> endPrice = default;
            Option<string> endTime = default;
            Option<string> price = default;
            Option<string> sellerEntityId = default;
            Option<string> startPrice = default;
            Option<string> startTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contractId":
                            contractId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "currency":
                            currency = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "expiresAt":
                            expiresAt = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "marketplaceId":
                            marketplaceId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "nft":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nft = new Option<GetAssetListingsResponseDataInnerNft>(JsonSerializer.Deserialize<GetAssetListingsResponseDataInnerNft>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "orderId":
                            orderId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "platformFee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                platformFee = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "quantityAvailable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityAvailable = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "quantityFilled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityFilled = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "quantityListed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityListed = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "royaltyFee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                royaltyFee = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "sellType":
                            sellType = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sellerAddress":
                            sellerAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "endPrice":
                            endPrice = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "endTime":
                            endTime = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "price":
                            price = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "sellerEntityId":
                            sellerEntityId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "startPrice":
                            startPrice = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "startTime":
                            startTime = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contractId.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(contractId));

            if (!currency.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(currency));

            if (!expiresAt.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(expiresAt));

            if (!marketplaceId.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(marketplaceId));

            if (!nft.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(nft));

            if (!orderId.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(orderId));

            if (!platformFee.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(platformFee));

            if (!quantityAvailable.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(quantityAvailable));

            if (!quantityFilled.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(quantityFilled));

            if (!quantityListed.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(quantityListed));

            if (!royaltyFee.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(royaltyFee));

            if (!sellType.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(sellType));

            if (!sellerAddress.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(sellerAddress));

            if (!endPrice.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(endPrice));

            if (!endTime.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(endTime));

            if (!price.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(price));

            if (!startPrice.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(startPrice));

            if (!startTime.IsSet)
                throw new ArgumentException("Property is required for class GetAssetListingsResponseDataInner.", nameof(startTime));

            if (contractId.IsSet && contractId.Value == null)
                throw new ArgumentNullException(nameof(contractId), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (currency.IsSet && currency.Value == null)
                throw new ArgumentNullException(nameof(currency), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (expiresAt.IsSet && expiresAt.Value == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (marketplaceId.IsSet && marketplaceId.Value == null)
                throw new ArgumentNullException(nameof(marketplaceId), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (nft.IsSet && nft.Value == null)
                throw new ArgumentNullException(nameof(nft), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (orderId.IsSet && orderId.Value == null)
                throw new ArgumentNullException(nameof(orderId), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (platformFee.IsSet && platformFee.Value == null)
                throw new ArgumentNullException(nameof(platformFee), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (quantityAvailable.IsSet && quantityAvailable.Value == null)
                throw new ArgumentNullException(nameof(quantityAvailable), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (quantityFilled.IsSet && quantityFilled.Value == null)
                throw new ArgumentNullException(nameof(quantityFilled), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (quantityListed.IsSet && quantityListed.Value == null)
                throw new ArgumentNullException(nameof(quantityListed), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (royaltyFee.IsSet && royaltyFee.Value == null)
                throw new ArgumentNullException(nameof(royaltyFee), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (sellType.IsSet && sellType.Value == null)
                throw new ArgumentNullException(nameof(sellType), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (sellerAddress.IsSet && sellerAddress.Value == null)
                throw new ArgumentNullException(nameof(sellerAddress), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            if (sellerEntityId.IsSet && sellerEntityId.Value == null)
                throw new ArgumentNullException(nameof(sellerEntityId), "Property is not nullable for class GetAssetListingsResponseDataInner.");

            return new GetAssetListingsResponseDataInner(contractId.Value, currency.Value, expiresAt.Value, marketplaceId.Value, nft.Value, orderId.Value, platformFee.Value.Value, quantityAvailable.Value.Value, quantityFilled.Value.Value, quantityListed.Value.Value, royaltyFee.Value.Value, sellType.Value, sellerAddress.Value, endPrice.Value, endTime.Value, price.Value, sellerEntityId, startPrice.Value, startTime.Value);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetListingsResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetListingsResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetListingsResponseDataInner getAssetListingsResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetListingsResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetListingsResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetListingsResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetListingsResponseDataInner getAssetListingsResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAssetListingsResponseDataInner.ContractId == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseDataInner.ContractId), "Property is required for class GetAssetListingsResponseDataInner.");

            if (getAssetListingsResponseDataInner.Currency == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseDataInner.Currency), "Property is required for class GetAssetListingsResponseDataInner.");

            if (getAssetListingsResponseDataInner.ExpiresAt == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseDataInner.ExpiresAt), "Property is required for class GetAssetListingsResponseDataInner.");

            if (getAssetListingsResponseDataInner.MarketplaceId == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseDataInner.MarketplaceId), "Property is required for class GetAssetListingsResponseDataInner.");

            if (getAssetListingsResponseDataInner.Nft == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseDataInner.Nft), "Property is required for class GetAssetListingsResponseDataInner.");

            if (getAssetListingsResponseDataInner.OrderId == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseDataInner.OrderId), "Property is required for class GetAssetListingsResponseDataInner.");

            if (getAssetListingsResponseDataInner.SellType == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseDataInner.SellType), "Property is required for class GetAssetListingsResponseDataInner.");

            if (getAssetListingsResponseDataInner.SellerAddress == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseDataInner.SellerAddress), "Property is required for class GetAssetListingsResponseDataInner.");

            if (getAssetListingsResponseDataInner.SellerEntityIdOption.IsSet && getAssetListingsResponseDataInner.SellerEntityId == null)
                throw new ArgumentNullException(nameof(getAssetListingsResponseDataInner.SellerEntityId), "Property is required for class GetAssetListingsResponseDataInner.");

            writer.WriteString("contractId", getAssetListingsResponseDataInner.ContractId);

            writer.WriteString("currency", getAssetListingsResponseDataInner.Currency);

            writer.WriteString("expiresAt", getAssetListingsResponseDataInner.ExpiresAt);

            writer.WriteString("marketplaceId", getAssetListingsResponseDataInner.MarketplaceId);

            writer.WritePropertyName("nft");
            JsonSerializer.Serialize(writer, getAssetListingsResponseDataInner.Nft, jsonSerializerOptions);
            writer.WriteString("orderId", getAssetListingsResponseDataInner.OrderId);

            writer.WriteNumber("platformFee", getAssetListingsResponseDataInner.PlatformFee);

            writer.WriteNumber("quantityAvailable", getAssetListingsResponseDataInner.QuantityAvailable);

            writer.WriteNumber("quantityFilled", getAssetListingsResponseDataInner.QuantityFilled);

            writer.WriteNumber("quantityListed", getAssetListingsResponseDataInner.QuantityListed);

            writer.WriteNumber("royaltyFee", getAssetListingsResponseDataInner.RoyaltyFee);

            writer.WriteString("sellType", getAssetListingsResponseDataInner.SellType);

            writer.WriteString("sellerAddress", getAssetListingsResponseDataInner.SellerAddress);

            if (getAssetListingsResponseDataInner.EndPrice != null)
                writer.WriteString("endPrice", getAssetListingsResponseDataInner.EndPrice);
            else
                writer.WriteNull("endPrice");

            if (getAssetListingsResponseDataInner.EndTime != null)
                writer.WriteString("endTime", getAssetListingsResponseDataInner.EndTime);
            else
                writer.WriteNull("endTime");

            if (getAssetListingsResponseDataInner.Price != null)
                writer.WriteString("price", getAssetListingsResponseDataInner.Price);
            else
                writer.WriteNull("price");

            if (getAssetListingsResponseDataInner.SellerEntityIdOption.IsSet)
                writer.WriteString("sellerEntityId", getAssetListingsResponseDataInner.SellerEntityId);

            if (getAssetListingsResponseDataInner.StartPrice != null)
                writer.WriteString("startPrice", getAssetListingsResponseDataInner.StartPrice);
            else
                writer.WriteNull("startPrice");

            if (getAssetListingsResponseDataInner.StartTime != null)
                writer.WriteString("startTime", getAssetListingsResponseDataInner.StartTime);
            else
                writer.WriteNull("startTime");
        }
    }
}
