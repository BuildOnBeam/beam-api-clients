// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetListingsResponseDataInner
    /// </summary>
    public partial class GetAssetListingsResponseDataInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetListingsResponseDataInner" /> class.
        /// </summary>
        /// <param name="contractId">contractId</param>
        /// <param name="currency">currency</param>
        /// <param name="expiresAt">expiresAt</param>
        /// <param name="marketplaceId">marketplaceId</param>
        /// <param name="nft">nft</param>
        /// <param name="orderId">orderId</param>
        /// <param name="platformFee">platformFee</param>
        /// <param name="quantityAvailable">quantityAvailable</param>
        /// <param name="quantityFilled">quantityFilled</param>
        /// <param name="quantityListed">quantityListed</param>
        /// <param name="royaltyFee">royaltyFee</param>
        /// <param name="sellType">sellType</param>
        /// <param name="sellerAddress">sellerAddress</param>
        /// <param name="sellerEntityId">sellerEntityId</param>
        /// <param name="endPrice">endPrice</param>
        /// <param name="endTime">endTime</param>
        /// <param name="price">price</param>
        /// <param name="startPrice">startPrice</param>
        /// <param name="startTime">startTime</param>
        [JsonConstructor]
        public GetAssetListingsResponseDataInner(string contractId, string currency, string expiresAt, string marketplaceId, GetAssetListingsResponseDataInnerNft nft, string orderId, decimal platformFee, decimal quantityAvailable, decimal quantityFilled, decimal quantityListed, decimal royaltyFee, string sellType, string sellerAddress, string sellerEntityId, string endPrice = default, string endTime = default, string price = default, string startPrice = default, string startTime = default)
        {
            ContractId = contractId;
            Currency = currency;
            ExpiresAt = expiresAt;
            MarketplaceId = marketplaceId;
            Nft = nft;
            OrderId = orderId;
            PlatformFee = platformFee;
            QuantityAvailable = quantityAvailable;
            QuantityFilled = quantityFilled;
            QuantityListed = quantityListed;
            RoyaltyFee = royaltyFee;
            SellType = sellType;
            SellerAddress = sellerAddress;
            SellerEntityId = sellerEntityId;
            EndPrice = endPrice;
            EndTime = endTime;
            Price = price;
            StartPrice = startPrice;
            StartTime = startTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets MarketplaceId
        /// </summary>
        [JsonPropertyName("marketplaceId")]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets Nft
        /// </summary>
        [JsonPropertyName("nft")]
        public GetAssetListingsResponseDataInnerNft Nft { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PlatformFee
        /// </summary>
        [JsonPropertyName("platformFee")]
        public decimal PlatformFee { get; set; }

        /// <summary>
        /// Gets or Sets QuantityAvailable
        /// </summary>
        [JsonPropertyName("quantityAvailable")]
        public decimal QuantityAvailable { get; set; }

        /// <summary>
        /// Gets or Sets QuantityFilled
        /// </summary>
        [JsonPropertyName("quantityFilled")]
        public decimal QuantityFilled { get; set; }

        /// <summary>
        /// Gets or Sets QuantityListed
        /// </summary>
        [JsonPropertyName("quantityListed")]
        public decimal QuantityListed { get; set; }

        /// <summary>
        /// Gets or Sets RoyaltyFee
        /// </summary>
        [JsonPropertyName("royaltyFee")]
        public decimal RoyaltyFee { get; set; }

        /// <summary>
        /// Gets or Sets SellType
        /// </summary>
        [JsonPropertyName("sellType")]
        public string SellType { get; set; }

        /// <summary>
        /// Gets or Sets SellerAddress
        /// </summary>
        [JsonPropertyName("sellerAddress")]
        public string SellerAddress { get; set; }

        /// <summary>
        /// Gets or Sets SellerEntityId
        /// </summary>
        [JsonPropertyName("sellerEntityId")]
        public string SellerEntityId { get; set; }

        /// <summary>
        /// Gets or Sets EndPrice
        /// </summary>
        [JsonPropertyName("endPrice")]
        public string EndPrice { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets StartPrice
        /// </summary>
        [JsonPropertyName("startPrice")]
        public string StartPrice { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetListingsResponseDataInner {\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Nft: ").Append(Nft).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PlatformFee: ").Append(PlatformFee).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  QuantityFilled: ").Append(QuantityFilled).Append("\n");
            sb.Append("  QuantityListed: ").Append(QuantityListed).Append("\n");
            sb.Append("  RoyaltyFee: ").Append(RoyaltyFee).Append("\n");
            sb.Append("  SellType: ").Append(SellType).Append("\n");
            sb.Append("  SellerAddress: ").Append(SellerAddress).Append("\n");
            sb.Append("  SellerEntityId: ").Append(SellerEntityId).Append("\n");
            sb.Append("  EndPrice: ").Append(EndPrice).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  StartPrice: ").Append(StartPrice).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetListingsResponseDataInner" />
    /// </summary>
    public class GetAssetListingsResponseDataInnerJsonConverter : JsonConverter<GetAssetListingsResponseDataInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetListingsResponseDataInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetListingsResponseDataInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string contractId = default;
            string currency = default;
            string expiresAt = default;
            string marketplaceId = default;
            GetAssetListingsResponseDataInnerNft nft = default;
            string orderId = default;
            decimal? platformFee = default;
            decimal? quantityAvailable = default;
            decimal? quantityFilled = default;
            decimal? quantityListed = default;
            decimal? royaltyFee = default;
            string sellType = default;
            string sellerAddress = default;
            string sellerEntityId = default;
            string endPrice = default;
            string endTime = default;
            string price = default;
            string startPrice = default;
            string startTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contractId":
                            contractId = utf8JsonReader.GetString();
                            break;
                        case "currency":
                            currency = utf8JsonReader.GetString();
                            break;
                        case "expiresAt":
                            expiresAt = utf8JsonReader.GetString();
                            break;
                        case "marketplaceId":
                            marketplaceId = utf8JsonReader.GetString();
                            break;
                        case "nft":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nft = JsonSerializer.Deserialize<GetAssetListingsResponseDataInnerNft>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "orderId":
                            orderId = utf8JsonReader.GetString();
                            break;
                        case "platformFee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                platformFee = utf8JsonReader.GetDecimal();
                            break;
                        case "quantityAvailable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityAvailable = utf8JsonReader.GetDecimal();
                            break;
                        case "quantityFilled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityFilled = utf8JsonReader.GetDecimal();
                            break;
                        case "quantityListed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantityListed = utf8JsonReader.GetDecimal();
                            break;
                        case "royaltyFee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                royaltyFee = utf8JsonReader.GetDecimal();
                            break;
                        case "sellType":
                            sellType = utf8JsonReader.GetString();
                            break;
                        case "sellerAddress":
                            sellerAddress = utf8JsonReader.GetString();
                            break;
                        case "sellerEntityId":
                            sellerEntityId = utf8JsonReader.GetString();
                            break;
                        case "endPrice":
                            endPrice = utf8JsonReader.GetString();
                            break;
                        case "endTime":
                            endTime = utf8JsonReader.GetString();
                            break;
                        case "price":
                            price = utf8JsonReader.GetString();
                            break;
                        case "startPrice":
                            startPrice = utf8JsonReader.GetString();
                            break;
                        case "startTime":
                            startTime = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contractId == null)
                throw new ArgumentNullException(nameof(contractId), "Property is required for class GetAssetListingsResponseDataInner.");

            if (currency == null)
                throw new ArgumentNullException(nameof(currency), "Property is required for class GetAssetListingsResponseDataInner.");

            if (expiresAt == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is required for class GetAssetListingsResponseDataInner.");

            if (marketplaceId == null)
                throw new ArgumentNullException(nameof(marketplaceId), "Property is required for class GetAssetListingsResponseDataInner.");

            if (nft == null)
                throw new ArgumentNullException(nameof(nft), "Property is required for class GetAssetListingsResponseDataInner.");

            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId), "Property is required for class GetAssetListingsResponseDataInner.");

            if (platformFee == null)
                throw new ArgumentNullException(nameof(platformFee), "Property is required for class GetAssetListingsResponseDataInner.");

            if (quantityAvailable == null)
                throw new ArgumentNullException(nameof(quantityAvailable), "Property is required for class GetAssetListingsResponseDataInner.");

            if (quantityFilled == null)
                throw new ArgumentNullException(nameof(quantityFilled), "Property is required for class GetAssetListingsResponseDataInner.");

            if (quantityListed == null)
                throw new ArgumentNullException(nameof(quantityListed), "Property is required for class GetAssetListingsResponseDataInner.");

            if (royaltyFee == null)
                throw new ArgumentNullException(nameof(royaltyFee), "Property is required for class GetAssetListingsResponseDataInner.");

            if (sellType == null)
                throw new ArgumentNullException(nameof(sellType), "Property is required for class GetAssetListingsResponseDataInner.");

            if (sellerAddress == null)
                throw new ArgumentNullException(nameof(sellerAddress), "Property is required for class GetAssetListingsResponseDataInner.");

            if (sellerEntityId == null)
                throw new ArgumentNullException(nameof(sellerEntityId), "Property is required for class GetAssetListingsResponseDataInner.");

            return new GetAssetListingsResponseDataInner(contractId, currency, expiresAt, marketplaceId, nft, orderId, platformFee.Value, quantityAvailable.Value, quantityFilled.Value, quantityListed.Value, royaltyFee.Value, sellType, sellerAddress, sellerEntityId, endPrice, endTime, price, startPrice, startTime);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetListingsResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetListingsResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetListingsResponseDataInner getAssetListingsResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetListingsResponseDataInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetListingsResponseDataInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetListingsResponseDataInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetListingsResponseDataInner getAssetListingsResponseDataInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("contractId", getAssetListingsResponseDataInner.ContractId);
            writer.WriteString("currency", getAssetListingsResponseDataInner.Currency);
            writer.WriteString("expiresAt", getAssetListingsResponseDataInner.ExpiresAt);
            writer.WriteString("marketplaceId", getAssetListingsResponseDataInner.MarketplaceId);
            writer.WritePropertyName("nft");
            JsonSerializer.Serialize(writer, getAssetListingsResponseDataInner.Nft, jsonSerializerOptions);
            writer.WriteString("orderId", getAssetListingsResponseDataInner.OrderId);
            writer.WriteNumber("platformFee", getAssetListingsResponseDataInner.PlatformFee);
            writer.WriteNumber("quantityAvailable", getAssetListingsResponseDataInner.QuantityAvailable);
            writer.WriteNumber("quantityFilled", getAssetListingsResponseDataInner.QuantityFilled);
            writer.WriteNumber("quantityListed", getAssetListingsResponseDataInner.QuantityListed);
            writer.WriteNumber("royaltyFee", getAssetListingsResponseDataInner.RoyaltyFee);
            writer.WriteString("sellType", getAssetListingsResponseDataInner.SellType);
            writer.WriteString("sellerAddress", getAssetListingsResponseDataInner.SellerAddress);
            writer.WriteString("sellerEntityId", getAssetListingsResponseDataInner.SellerEntityId);
            writer.WriteString("endPrice", getAssetListingsResponseDataInner.EndPrice);
            writer.WriteString("endTime", getAssetListingsResponseDataInner.EndTime);
            writer.WriteString("price", getAssetListingsResponseDataInner.Price);
            writer.WriteString("startPrice", getAssetListingsResponseDataInner.StartPrice);
            writer.WriteString("startTime", getAssetListingsResponseDataInner.StartTime);
        }
    }
}
