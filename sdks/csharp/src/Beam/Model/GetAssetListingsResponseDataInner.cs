/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Beam.Client.FileParameter;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetListingsResponseDataInner
    /// </summary>
    [DataContract(Name = "GetAssetListingsResponse_data_inner")]
    public partial class GetAssetListingsResponseDataInner : IEquatable<GetAssetListingsResponseDataInner>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetListingsResponseDataInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAssetListingsResponseDataInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetListingsResponseDataInner" /> class.
        /// </summary>
        /// <param name="marketplaceId">marketplaceId (required).</param>
        /// <param name="price">price (required).</param>
        /// <param name="sellType">sellType (required).</param>
        /// <param name="startPrice">startPrice (required).</param>
        /// <param name="endPrice">endPrice (required).</param>
        /// <param name="platformFee">platformFee (required).</param>
        /// <param name="royaltyFee">royaltyFee (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="startTime">startTime (required).</param>
        /// <param name="endTime">endTime (required).</param>
        /// <param name="quantityListed">quantityListed (required).</param>
        /// <param name="quantityFilled">quantityFilled (required).</param>
        /// <param name="quantityAvailable">quantityAvailable (required).</param>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="expiresAt">expiresAt (required).</param>
        /// <param name="sellerAddress">sellerAddress (required).</param>
        /// <param name="sellerEntityId">sellerEntityId.</param>
        /// <param name="contractId">contractId (required).</param>
        /// <param name="nft">nft (required).</param>
        public GetAssetListingsResponseDataInner(string marketplaceId = default(string), string price = default(string), string sellType = default(string), string startPrice = default(string), string endPrice = default(string), decimal platformFee = default(decimal), decimal royaltyFee = default(decimal), string currency = default(string), string startTime = default(string), string endTime = default(string), decimal quantityListed = default(decimal), decimal quantityFilled = default(decimal), decimal quantityAvailable = default(decimal), string orderId = default(string), string expiresAt = default(string), string sellerAddress = default(string), string sellerEntityId = default(string), string contractId = default(string), GetAssetListingsResponseDataInnerNft nft = default(GetAssetListingsResponseDataInnerNft))
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.Price = price;
            // to ensure "sellType" is required (not null)
            if (sellType == null)
            {
                throw new ArgumentNullException("sellType is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.SellType = sellType;
            // to ensure "startPrice" is required (not null)
            if (startPrice == null)
            {
                throw new ArgumentNullException("startPrice is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.StartPrice = startPrice;
            // to ensure "endPrice" is required (not null)
            if (endPrice == null)
            {
                throw new ArgumentNullException("endPrice is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.EndPrice = endPrice;
            this.PlatformFee = platformFee;
            this.RoyaltyFee = royaltyFee;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.Currency = currency;
            // to ensure "startTime" is required (not null)
            if (startTime == null)
            {
                throw new ArgumentNullException("startTime is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.StartTime = startTime;
            // to ensure "endTime" is required (not null)
            if (endTime == null)
            {
                throw new ArgumentNullException("endTime is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.EndTime = endTime;
            this.QuantityListed = quantityListed;
            this.QuantityFilled = quantityFilled;
            this.QuantityAvailable = quantityAvailable;
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new ArgumentNullException("orderId is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.OrderId = orderId;
            // to ensure "expiresAt" is required (not null)
            if (expiresAt == null)
            {
                throw new ArgumentNullException("expiresAt is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.ExpiresAt = expiresAt;
            // to ensure "sellerAddress" is required (not null)
            if (sellerAddress == null)
            {
                throw new ArgumentNullException("sellerAddress is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.SellerAddress = sellerAddress;
            // to ensure "contractId" is required (not null)
            if (contractId == null)
            {
                throw new ArgumentNullException("contractId is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.ContractId = contractId;
            // to ensure "nft" is required (not null)
            if (nft == null)
            {
                throw new ArgumentNullException("nft is a required property for GetAssetListingsResponseDataInner and cannot be null");
            }
            this.Nft = nft;
            this.SellerEntityId = sellerEntityId;
        }

        /// <summary>
        /// Gets or Sets MarketplaceId
        /// </summary>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets SellType
        /// </summary>
        [DataMember(Name = "sellType", IsRequired = true, EmitDefaultValue = true)]
        public string SellType { get; set; }

        /// <summary>
        /// Gets or Sets StartPrice
        /// </summary>
        [DataMember(Name = "startPrice", IsRequired = true, EmitDefaultValue = true)]
        public string StartPrice { get; set; }

        /// <summary>
        /// Gets or Sets EndPrice
        /// </summary>
        [DataMember(Name = "endPrice", IsRequired = true, EmitDefaultValue = true)]
        public string EndPrice { get; set; }

        /// <summary>
        /// Gets or Sets PlatformFee
        /// </summary>
        [DataMember(Name = "platformFee", IsRequired = true, EmitDefaultValue = true)]
        public decimal PlatformFee { get; set; }

        /// <summary>
        /// Gets or Sets RoyaltyFee
        /// </summary>
        [DataMember(Name = "royaltyFee", IsRequired = true, EmitDefaultValue = true)]
        public decimal RoyaltyFee { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets QuantityListed
        /// </summary>
        [DataMember(Name = "quantityListed", IsRequired = true, EmitDefaultValue = true)]
        public decimal QuantityListed { get; set; }

        /// <summary>
        /// Gets or Sets QuantityFilled
        /// </summary>
        [DataMember(Name = "quantityFilled", IsRequired = true, EmitDefaultValue = true)]
        public decimal QuantityFilled { get; set; }

        /// <summary>
        /// Gets or Sets QuantityAvailable
        /// </summary>
        [DataMember(Name = "quantityAvailable", IsRequired = true, EmitDefaultValue = true)]
        public decimal QuantityAvailable { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name = "orderId", IsRequired = true, EmitDefaultValue = true)]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [DataMember(Name = "expiresAt", IsRequired = true, EmitDefaultValue = true)]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets SellerAddress
        /// </summary>
        [DataMember(Name = "sellerAddress", IsRequired = true, EmitDefaultValue = true)]
        public string SellerAddress { get; set; }

        /// <summary>
        /// Gets or Sets SellerEntityId
        /// </summary>
        [DataMember(Name = "sellerEntityId", EmitDefaultValue = false)]
        public string SellerEntityId { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [DataMember(Name = "contractId", IsRequired = true, EmitDefaultValue = true)]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets Nft
        /// </summary>
        [DataMember(Name = "nft", IsRequired = true, EmitDefaultValue = true)]
        public GetAssetListingsResponseDataInnerNft Nft { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetListingsResponseDataInner {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  SellType: ").Append(SellType).Append("\n");
            sb.Append("  StartPrice: ").Append(StartPrice).Append("\n");
            sb.Append("  EndPrice: ").Append(EndPrice).Append("\n");
            sb.Append("  PlatformFee: ").Append(PlatformFee).Append("\n");
            sb.Append("  RoyaltyFee: ").Append(RoyaltyFee).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  QuantityListed: ").Append(QuantityListed).Append("\n");
            sb.Append("  QuantityFilled: ").Append(QuantityFilled).Append("\n");
            sb.Append("  QuantityAvailable: ").Append(QuantityAvailable).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  SellerAddress: ").Append(SellerAddress).Append("\n");
            sb.Append("  SellerEntityId: ").Append(SellerEntityId).Append("\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Nft: ").Append(Nft).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAssetListingsResponseDataInner);
        }

        /// <summary>
        /// Returns true if GetAssetListingsResponseDataInner instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAssetListingsResponseDataInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAssetListingsResponseDataInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.SellType == input.SellType ||
                    (this.SellType != null &&
                    this.SellType.Equals(input.SellType))
                ) && 
                (
                    this.StartPrice == input.StartPrice ||
                    (this.StartPrice != null &&
                    this.StartPrice.Equals(input.StartPrice))
                ) && 
                (
                    this.EndPrice == input.EndPrice ||
                    (this.EndPrice != null &&
                    this.EndPrice.Equals(input.EndPrice))
                ) && 
                (
                    this.PlatformFee == input.PlatformFee ||
                    this.PlatformFee.Equals(input.PlatformFee)
                ) && 
                (
                    this.RoyaltyFee == input.RoyaltyFee ||
                    this.RoyaltyFee.Equals(input.RoyaltyFee)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.QuantityListed == input.QuantityListed ||
                    this.QuantityListed.Equals(input.QuantityListed)
                ) && 
                (
                    this.QuantityFilled == input.QuantityFilled ||
                    this.QuantityFilled.Equals(input.QuantityFilled)
                ) && 
                (
                    this.QuantityAvailable == input.QuantityAvailable ||
                    this.QuantityAvailable.Equals(input.QuantityAvailable)
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.ExpiresAt == input.ExpiresAt ||
                    (this.ExpiresAt != null &&
                    this.ExpiresAt.Equals(input.ExpiresAt))
                ) && 
                (
                    this.SellerAddress == input.SellerAddress ||
                    (this.SellerAddress != null &&
                    this.SellerAddress.Equals(input.SellerAddress))
                ) && 
                (
                    this.SellerEntityId == input.SellerEntityId ||
                    (this.SellerEntityId != null &&
                    this.SellerEntityId.Equals(input.SellerEntityId))
                ) && 
                (
                    this.ContractId == input.ContractId ||
                    (this.ContractId != null &&
                    this.ContractId.Equals(input.ContractId))
                ) && 
                (
                    this.Nft == input.Nft ||
                    (this.Nft != null &&
                    this.Nft.Equals(input.Nft))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                {
                    hashCode = (hashCode * 59) + this.MarketplaceId.GetHashCode();
                }
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.SellType != null)
                {
                    hashCode = (hashCode * 59) + this.SellType.GetHashCode();
                }
                if (this.StartPrice != null)
                {
                    hashCode = (hashCode * 59) + this.StartPrice.GetHashCode();
                }
                if (this.EndPrice != null)
                {
                    hashCode = (hashCode * 59) + this.EndPrice.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PlatformFee.GetHashCode();
                hashCode = (hashCode * 59) + this.RoyaltyFee.GetHashCode();
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.QuantityListed.GetHashCode();
                hashCode = (hashCode * 59) + this.QuantityFilled.GetHashCode();
                hashCode = (hashCode * 59) + this.QuantityAvailable.GetHashCode();
                if (this.OrderId != null)
                {
                    hashCode = (hashCode * 59) + this.OrderId.GetHashCode();
                }
                if (this.ExpiresAt != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiresAt.GetHashCode();
                }
                if (this.SellerAddress != null)
                {
                    hashCode = (hashCode * 59) + this.SellerAddress.GetHashCode();
                }
                if (this.SellerEntityId != null)
                {
                    hashCode = (hashCode * 59) + this.SellerEntityId.GetHashCode();
                }
                if (this.ContractId != null)
                {
                    hashCode = (hashCode * 59) + this.ContractId.GetHashCode();
                }
                if (this.Nft != null)
                {
                    hashCode = (hashCode * 59) + this.Nft.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
