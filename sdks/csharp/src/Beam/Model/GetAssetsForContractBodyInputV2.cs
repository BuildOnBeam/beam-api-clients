// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Beam.Client;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetsForContractBodyInputV2
    /// </summary>
    public partial class GetAssetsForContractBodyInputV2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetsForContractBodyInputV2" /> class.
        /// </summary>
        /// <param name="attributes">attributes</param>
        /// <param name="chainId">chainId (default to 13337M)</param>
        /// <param name="continuation">continuation</param>
        /// <param name="includeAttributes">includeAttributes (default to false)</param>
        /// <param name="limit">limit (default to 20M)</param>
        /// <param name="maxFloorAskPrice">maxFloorAskPrice</param>
        /// <param name="maxRarityRank">maxRarityRank</param>
        /// <param name="minFloorAskPrice">minFloorAskPrice</param>
        /// <param name="minRarityRank">minRarityRank</param>
        /// <param name="sortBy">sortBy (default to SortByEnum.FloorAskPrice)</param>
        /// <param name="sortDirection">sortDirection (default to SortDirectionEnum.Asc)</param>
        [JsonConstructor]
        public GetAssetsForContractBodyInputV2(Option<List<GetAssetsForContractBodyInputV2AttributesInner>> attributes = default, Option<decimal?> chainId = default, Option<string> continuation = default, Option<bool?> includeAttributes = default, Option<decimal?> limit = default, Option<decimal?> maxFloorAskPrice = default, Option<int?> maxRarityRank = default, Option<decimal?> minFloorAskPrice = default, Option<int?> minRarityRank = default, Option<SortByEnum?> sortBy = default, Option<SortDirectionEnum?> sortDirection = default)
        {
            AttributesOption = attributes;
            ChainIdOption = chainId;
            ContinuationOption = continuation;
            IncludeAttributesOption = includeAttributes;
            LimitOption = limit;
            MaxFloorAskPriceOption = maxFloorAskPrice;
            MaxRarityRankOption = maxRarityRank;
            MinFloorAskPriceOption = minFloorAskPrice;
            MinRarityRankOption = minRarityRank;
            SortByOption = sortBy;
            SortDirectionOption = sortDirection;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines SortBy
        /// </summary>
        public enum SortByEnum
        {
            /// <summary>
            /// Enum FloorAskPrice for value: floorAskPrice
            /// </summary>
            FloorAskPrice = 1,

            /// <summary>
            /// Enum TokenId for value: tokenId
            /// </summary>
            TokenId = 2,

            /// <summary>
            /// Enum Rarity for value: rarity
            /// </summary>
            Rarity = 3,

            /// <summary>
            /// Enum UpdatedAt for value: updatedAt
            /// </summary>
            UpdatedAt = 4
        }

        /// <summary>
        /// Returns a <see cref="SortByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SortByEnum SortByEnumFromString(string value)
        {
            if (value.Equals("floorAskPrice"))
                return SortByEnum.FloorAskPrice;

            if (value.Equals("tokenId"))
                return SortByEnum.TokenId;

            if (value.Equals("rarity"))
                return SortByEnum.Rarity;

            if (value.Equals("updatedAt"))
                return SortByEnum.UpdatedAt;

            throw new NotImplementedException($"Could not convert value to type SortByEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SortByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SortByEnum? SortByEnumFromStringOrDefault(string value)
        {
            if (value.Equals("floorAskPrice"))
                return SortByEnum.FloorAskPrice;

            if (value.Equals("tokenId"))
                return SortByEnum.TokenId;

            if (value.Equals("rarity"))
                return SortByEnum.Rarity;

            if (value.Equals("updatedAt"))
                return SortByEnum.UpdatedAt;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SortByEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SortByEnumToJsonValue(SortByEnum? value)
        {
            if (value == SortByEnum.FloorAskPrice)
                return "floorAskPrice";

            if (value == SortByEnum.TokenId)
                return "tokenId";

            if (value == SortByEnum.Rarity)
                return "rarity";

            if (value == SortByEnum.UpdatedAt)
                return "updatedAt";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SortBy
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortByEnum?> SortByOption { get; private set; }

        /// <summary>
        /// Gets or Sets SortBy
        /// </summary>
        [JsonPropertyName("sortBy")]
        public SortByEnum? SortBy { get { return this.SortByOption; } set { this.SortByOption = new(value); } }

        /// <summary>
        /// Defines SortDirection
        /// </summary>
        public enum SortDirectionEnum
        {
            /// <summary>
            /// Enum Asc for value: asc
            /// </summary>
            Asc = 1,

            /// <summary>
            /// Enum Desc for value: desc
            /// </summary>
            Desc = 2
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SortDirectionEnum SortDirectionEnumFromString(string value)
        {
            if (value.Equals("asc"))
                return SortDirectionEnum.Asc;

            if (value.Equals("desc"))
                return SortDirectionEnum.Desc;

            throw new NotImplementedException($"Could not convert value to type SortDirectionEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SortDirectionEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SortDirectionEnum? SortDirectionEnumFromStringOrDefault(string value)
        {
            if (value.Equals("asc"))
                return SortDirectionEnum.Asc;

            if (value.Equals("desc"))
                return SortDirectionEnum.Desc;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SortDirectionEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SortDirectionEnumToJsonValue(SortDirectionEnum? value)
        {
            if (value == SortDirectionEnum.Asc)
                return "asc";

            if (value == SortDirectionEnum.Desc)
                return "desc";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SortDirection
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortDirectionEnum?> SortDirectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets SortDirection
        /// </summary>
        [JsonPropertyName("sortDirection")]
        public SortDirectionEnum? SortDirection { get { return this.SortDirectionOption; } set { this.SortDirectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Attributes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetAssetsForContractBodyInputV2AttributesInner>> AttributesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [JsonPropertyName("attributes")]
        public List<GetAssetsForContractBodyInputV2AttributesInner> Attributes { get { return this. AttributesOption; } set { this.AttributesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChainId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public decimal? ChainId { get { return this. ChainIdOption; } set { this.ChainIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Continuation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContinuationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Continuation
        /// </summary>
        [JsonPropertyName("continuation")]
        public string Continuation { get { return this. ContinuationOption; } set { this.ContinuationOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncludeAttributes
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IncludeAttributesOption { get; private set; }

        /// <summary>
        /// Gets or Sets IncludeAttributes
        /// </summary>
        [JsonPropertyName("includeAttributes")]
        public bool? IncludeAttributes { get { return this. IncludeAttributesOption; } set { this.IncludeAttributesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LimitOption { get; private set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [JsonPropertyName("limit")]
        public decimal? Limit { get { return this. LimitOption; } set { this.LimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxFloorAskPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> MaxFloorAskPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaxFloorAskPrice
        /// </summary>
        [JsonPropertyName("maxFloorAskPrice")]
        public decimal? MaxFloorAskPrice { get { return this. MaxFloorAskPriceOption; } set { this.MaxFloorAskPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of MaxRarityRank
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MaxRarityRankOption { get; private set; }

        /// <summary>
        /// Gets or Sets MaxRarityRank
        /// </summary>
        [JsonPropertyName("maxRarityRank")]
        public int? MaxRarityRank { get { return this. MaxRarityRankOption; } set { this.MaxRarityRankOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinFloorAskPrice
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> MinFloorAskPriceOption { get; private set; }

        /// <summary>
        /// Gets or Sets MinFloorAskPrice
        /// </summary>
        [JsonPropertyName("minFloorAskPrice")]
        public decimal? MinFloorAskPrice { get { return this. MinFloorAskPriceOption; } set { this.MinFloorAskPriceOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinRarityRank
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> MinRarityRankOption { get; private set; }

        /// <summary>
        /// Gets or Sets MinRarityRank
        /// </summary>
        [JsonPropertyName("minRarityRank")]
        public int? MinRarityRank { get { return this. MinRarityRankOption; } set { this.MinRarityRankOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetsForContractBodyInputV2 {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Continuation: ").Append(Continuation).Append("\n");
            sb.Append("  IncludeAttributes: ").Append(IncludeAttributes).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  MaxFloorAskPrice: ").Append(MaxFloorAskPrice).Append("\n");
            sb.Append("  MaxRarityRank: ").Append(MaxRarityRank).Append("\n");
            sb.Append("  MinFloorAskPrice: ").Append(MinFloorAskPrice).Append("\n");
            sb.Append("  MinRarityRank: ").Append(MinRarityRank).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortDirection: ").Append(SortDirection).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Limit (decimal) maximum
            if (this.LimitOption.IsSet && this.LimitOption.Value > (decimal)100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value less than or equal to 100.", new [] { "Limit" });
            }

            // Limit (decimal) minimum
            if (this.LimitOption.IsSet && this.LimitOption.Value < (decimal)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Limit, must be a value greater than or equal to 1.", new [] { "Limit" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetsForContractBodyInputV2" />
    /// </summary>
    public class GetAssetsForContractBodyInputV2JsonConverter : JsonConverter<GetAssetsForContractBodyInputV2>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetsForContractBodyInputV2" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetsForContractBodyInputV2 Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<GetAssetsForContractBodyInputV2AttributesInner>> attributes = default;
            Option<decimal?> chainId = default;
            Option<string> continuation = default;
            Option<bool?> includeAttributes = default;
            Option<decimal?> limit = default;
            Option<decimal?> maxFloorAskPrice = default;
            Option<int?> maxRarityRank = default;
            Option<decimal?> minFloorAskPrice = default;
            Option<int?> minRarityRank = default;
            Option<GetAssetsForContractBodyInputV2.SortByEnum?> sortBy = default;
            Option<GetAssetsForContractBodyInputV2.SortDirectionEnum?> sortDirection = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attributes = new Option<List<GetAssetsForContractBodyInputV2AttributesInner>>(JsonSerializer.Deserialize<List<GetAssetsForContractBodyInputV2AttributesInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "continuation":
                            continuation = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "includeAttributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                includeAttributes = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "limit":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                limit = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "maxFloorAskPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxFloorAskPrice = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "maxRarityRank":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxRarityRank = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "minFloorAskPrice":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minFloorAskPrice = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "minRarityRank":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                minRarityRank = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "sortBy":
                            string sortByRawValue = utf8JsonReader.GetString();
                            if (sortByRawValue != null)
                                sortBy = new Option<GetAssetsForContractBodyInputV2.SortByEnum?>(GetAssetsForContractBodyInputV2.SortByEnumFromStringOrDefault(sortByRawValue));
                            break;
                        case "sortDirection":
                            string sortDirectionRawValue = utf8JsonReader.GetString();
                            if (sortDirectionRawValue != null)
                                sortDirection = new Option<GetAssetsForContractBodyInputV2.SortDirectionEnum?>(GetAssetsForContractBodyInputV2.SortDirectionEnumFromStringOrDefault(sortDirectionRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class GetAssetsForContractBodyInputV2.");

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class GetAssetsForContractBodyInputV2.");

            if (sortBy.IsSet && sortBy.Value == null)
                throw new ArgumentNullException(nameof(sortBy), "Property is not nullable for class GetAssetsForContractBodyInputV2.");

            if (sortDirection.IsSet && sortDirection.Value == null)
                throw new ArgumentNullException(nameof(sortDirection), "Property is not nullable for class GetAssetsForContractBodyInputV2.");

            return new GetAssetsForContractBodyInputV2(attributes, chainId, continuation, includeAttributes, limit, maxFloorAskPrice, maxRarityRank, minFloorAskPrice, minRarityRank, sortBy, sortDirection);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetsForContractBodyInputV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetsForContractBodyInputV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetsForContractBodyInputV2 getAssetsForContractBodyInputV2, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetsForContractBodyInputV2, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetsForContractBodyInputV2" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetsForContractBodyInputV2"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetsForContractBodyInputV2 getAssetsForContractBodyInputV2, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAssetsForContractBodyInputV2.AttributesOption.IsSet)
                if (getAssetsForContractBodyInputV2.AttributesOption.Value != null)
                {
                    writer.WritePropertyName("attributes");
                    JsonSerializer.Serialize(writer, getAssetsForContractBodyInputV2.Attributes, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("attributes");
            if (getAssetsForContractBodyInputV2.ChainIdOption.IsSet)
                writer.WriteNumber("chainId", getAssetsForContractBodyInputV2.ChainIdOption.Value.Value);

            if (getAssetsForContractBodyInputV2.ContinuationOption.IsSet)
                if (getAssetsForContractBodyInputV2.ContinuationOption.Value != null)
                    writer.WriteString("continuation", getAssetsForContractBodyInputV2.Continuation);
                else
                    writer.WriteNull("continuation");

            if (getAssetsForContractBodyInputV2.IncludeAttributesOption.IsSet)
                if (getAssetsForContractBodyInputV2.IncludeAttributesOption.Value != null)
                    writer.WriteBoolean("includeAttributes", getAssetsForContractBodyInputV2.IncludeAttributesOption.Value.Value);
                else
                    writer.WriteNull("includeAttributes");

            if (getAssetsForContractBodyInputV2.LimitOption.IsSet)
                writer.WriteNumber("limit", getAssetsForContractBodyInputV2.LimitOption.Value.Value);

            if (getAssetsForContractBodyInputV2.MaxFloorAskPriceOption.IsSet)
                if (getAssetsForContractBodyInputV2.MaxFloorAskPriceOption.Value != null)
                    writer.WriteNumber("maxFloorAskPrice", getAssetsForContractBodyInputV2.MaxFloorAskPriceOption.Value.Value);
                else
                    writer.WriteNull("maxFloorAskPrice");

            if (getAssetsForContractBodyInputV2.MaxRarityRankOption.IsSet)
                if (getAssetsForContractBodyInputV2.MaxRarityRankOption.Value != null)
                    writer.WriteNumber("maxRarityRank", getAssetsForContractBodyInputV2.MaxRarityRankOption.Value.Value);
                else
                    writer.WriteNull("maxRarityRank");

            if (getAssetsForContractBodyInputV2.MinFloorAskPriceOption.IsSet)
                if (getAssetsForContractBodyInputV2.MinFloorAskPriceOption.Value != null)
                    writer.WriteNumber("minFloorAskPrice", getAssetsForContractBodyInputV2.MinFloorAskPriceOption.Value.Value);
                else
                    writer.WriteNull("minFloorAskPrice");

            if (getAssetsForContractBodyInputV2.MinRarityRankOption.IsSet)
                if (getAssetsForContractBodyInputV2.MinRarityRankOption.Value != null)
                    writer.WriteNumber("minRarityRank", getAssetsForContractBodyInputV2.MinRarityRankOption.Value.Value);
                else
                    writer.WriteNull("minRarityRank");

            var sortByRawValue = GetAssetsForContractBodyInputV2.SortByEnumToJsonValue(getAssetsForContractBodyInputV2.SortByOption.Value.Value);
            writer.WriteString("sortBy", sortByRawValue);
            var sortDirectionRawValue = GetAssetsForContractBodyInputV2.SortDirectionEnumToJsonValue(getAssetsForContractBodyInputV2.SortDirectionOption.Value.Value);
            writer.WriteString("sortDirection", sortDirectionRawValue);
        }
    }
}
