// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetsResponseDataInnerAttributesInner
    /// </summary>
    public partial class GetAssetsResponseDataInnerAttributesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetsResponseDataInnerAttributesInner" /> class.
        /// </summary>
        /// <param name="displayType">displayType</param>
        /// <param name="maxValue">maxValue</param>
        /// <param name="rarity">rarity</param>
        /// <param name="type">type</param>
        /// <param name="value">value</param>
        [JsonConstructor]
        public GetAssetsResponseDataInnerAttributesInner(string displayType = default, decimal? maxValue = default, decimal? rarity = default, string type = default, string value = default)
        {
            DisplayType = displayType;
            MaxValue = maxValue;
            Rarity = rarity;
            Type = type;
            Value = value;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets DisplayType
        /// </summary>
        [JsonPropertyName("displayType")]
        public string DisplayType { get; set; }

        /// <summary>
        /// Gets or Sets MaxValue
        /// </summary>
        [JsonPropertyName("maxValue")]
        public decimal? MaxValue { get; set; }

        /// <summary>
        /// Gets or Sets Rarity
        /// </summary>
        [JsonPropertyName("rarity")]
        public decimal? Rarity { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetsResponseDataInnerAttributesInner {\n");
            sb.Append("  DisplayType: ").Append(DisplayType).Append("\n");
            sb.Append("  MaxValue: ").Append(MaxValue).Append("\n");
            sb.Append("  Rarity: ").Append(Rarity).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetsResponseDataInnerAttributesInner" />
    /// </summary>
    public class GetAssetsResponseDataInnerAttributesInnerJsonConverter : JsonConverter<GetAssetsResponseDataInnerAttributesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetsResponseDataInnerAttributesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetsResponseDataInnerAttributesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string displayType = default;
            decimal? maxValue = default;
            decimal? rarity = default;
            string type = default;
            string value = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "displayType":
                            displayType = utf8JsonReader.GetString();
                            break;
                        case "maxValue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                maxValue = utf8JsonReader.GetDecimal();
                            break;
                        case "rarity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rarity = utf8JsonReader.GetDecimal();
                            break;
                        case "type":
                            type = utf8JsonReader.GetString();
                            break;
                        case "value":
                            value = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new GetAssetsResponseDataInnerAttributesInner(displayType, maxValue, rarity, type, value);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetsResponseDataInnerAttributesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetsResponseDataInnerAttributesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetsResponseDataInnerAttributesInner getAssetsResponseDataInnerAttributesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetsResponseDataInnerAttributesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetsResponseDataInnerAttributesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetsResponseDataInnerAttributesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetsResponseDataInnerAttributesInner getAssetsResponseDataInnerAttributesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("displayType", getAssetsResponseDataInnerAttributesInner.DisplayType);

            if (getAssetsResponseDataInnerAttributesInner.MaxValue != null)
                writer.WriteNumber("maxValue", getAssetsResponseDataInnerAttributesInner.MaxValue.Value);
            else
                writer.WriteNull("maxValue");

            if (getAssetsResponseDataInnerAttributesInner.Rarity != null)
                writer.WriteNumber("rarity", getAssetsResponseDataInnerAttributesInner.Rarity.Value);
            else
                writer.WriteNull("rarity");

            writer.WriteString("type", getAssetsResponseDataInnerAttributesInner.Type);
            writer.WriteString("value", getAssetsResponseDataInnerAttributesInner.Value);
        }
    }
}
