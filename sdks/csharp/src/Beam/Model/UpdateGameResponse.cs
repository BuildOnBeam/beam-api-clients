// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// UpdateGameResponse
    /// </summary>
    public partial class UpdateGameResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateGameResponse" /> class.
        /// </summary>
        /// <param name="chainIds">chainIds</param>
        /// <param name="contracts">contracts</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="policies">policies</param>
        /// <param name="coverImageUrl">coverImageUrl</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="logoImageUrl">logoImageUrl</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public UpdateGameResponse(List<int> chainIds, List<GetGameResponseContractsInner> contracts, string id, string name, List<GetGameResponsePoliciesInner> policies, string coverImageUrl = default, Object createdAt = default, string description = default, string logoImageUrl = default, Object updatedAt = default)
        {
            ChainIds = chainIds;
            Contracts = contracts;
            Id = id;
            Name = name;
            Policies = policies;
            CoverImageUrl = coverImageUrl;
            CreatedAt = createdAt;
            Description = description;
            LogoImageUrl = logoImageUrl;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ChainIds
        /// </summary>
        [JsonPropertyName("chainIds")]
        public List<int> ChainIds { get; set; }

        /// <summary>
        /// Gets or Sets Contracts
        /// </summary>
        [JsonPropertyName("contracts")]
        public List<GetGameResponseContractsInner> Contracts { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Policies
        /// </summary>
        [JsonPropertyName("policies")]
        public List<GetGameResponsePoliciesInner> Policies { get; set; }

        /// <summary>
        /// Gets or Sets CoverImageUrl
        /// </summary>
        [JsonPropertyName("coverImageUrl")]
        public string CoverImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public Object CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LogoImageUrl
        /// </summary>
        [JsonPropertyName("logoImageUrl")]
        public string LogoImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public Object UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateGameResponse {\n");
            sb.Append("  ChainIds: ").Append(ChainIds).Append("\n");
            sb.Append("  Contracts: ").Append(Contracts).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Policies: ").Append(Policies).Append("\n");
            sb.Append("  CoverImageUrl: ").Append(CoverImageUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogoImageUrl: ").Append(LogoImageUrl).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateGameResponse" />
    /// </summary>
    public class UpdateGameResponseJsonConverter : JsonConverter<UpdateGameResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateGameResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateGameResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            List<int> chainIds = default;
            List<GetGameResponseContractsInner> contracts = default;
            string id = default;
            string name = default;
            List<GetGameResponsePoliciesInner> policies = default;
            string coverImageUrl = default;
            Object createdAt = default;
            string description = default;
            string logoImageUrl = default;
            Object updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "chainIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainIds = JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "contracts":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                contracts = JsonSerializer.Deserialize<List<GetGameResponseContractsInner>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "id":
                            id = utf8JsonReader.GetString();
                            break;
                        case "name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "policies":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                policies = JsonSerializer.Deserialize<List<GetGameResponsePoliciesInner>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "coverImageUrl":
                            coverImageUrl = utf8JsonReader.GetString();
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "description":
                            description = utf8JsonReader.GetString();
                            break;
                        case "logoImageUrl":
                            logoImageUrl = utf8JsonReader.GetString();
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (chainIds == null)
                throw new ArgumentNullException(nameof(chainIds), "Property is required for class UpdateGameResponse.");

            if (contracts == null)
                throw new ArgumentNullException(nameof(contracts), "Property is required for class UpdateGameResponse.");

            if (id == null)
                throw new ArgumentNullException(nameof(id), "Property is required for class UpdateGameResponse.");

            if (name == null)
                throw new ArgumentNullException(nameof(name), "Property is required for class UpdateGameResponse.");

            if (policies == null)
                throw new ArgumentNullException(nameof(policies), "Property is required for class UpdateGameResponse.");

            return new UpdateGameResponse(chainIds, contracts, id, name, policies, coverImageUrl, createdAt, description, logoImageUrl, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateGameResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateGameResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateGameResponse updateGameResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, updateGameResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateGameResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateGameResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, UpdateGameResponse updateGameResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WritePropertyName("chainIds");
            JsonSerializer.Serialize(writer, updateGameResponse.ChainIds, jsonSerializerOptions);
            writer.WritePropertyName("contracts");
            JsonSerializer.Serialize(writer, updateGameResponse.Contracts, jsonSerializerOptions);
            writer.WriteString("id", updateGameResponse.Id);
            writer.WriteString("name", updateGameResponse.Name);
            writer.WritePropertyName("policies");
            JsonSerializer.Serialize(writer, updateGameResponse.Policies, jsonSerializerOptions);
            writer.WriteString("coverImageUrl", updateGameResponse.CoverImageUrl);
            writer.WritePropertyName("createdAt");
            JsonSerializer.Serialize(writer, updateGameResponse.CreatedAt, jsonSerializerOptions);
            writer.WriteString("description", updateGameResponse.Description);
            writer.WriteString("logoImageUrl", updateGameResponse.LogoImageUrl);
            writer.WritePropertyName("updatedAt");
            JsonSerializer.Serialize(writer, updateGameResponse.UpdatedAt, jsonSerializerOptions);
        }
    }
}
