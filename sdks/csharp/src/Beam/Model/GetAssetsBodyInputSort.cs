// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Beam.Client;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetsBodyInputSort
    /// </summary>
    public partial class GetAssetsBodyInputSort : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetsBodyInputSort" /> class.
        /// </summary>
        /// <param name="createdAt">createdAt</param>
        /// <param name="end">end</param>
        /// <param name="endPriceNumber">endPriceNumber</param>
        /// <param name="fixedPriceNumber">fixedPriceNumber</param>
        /// <param name="rarityScore">rarityScore</param>
        /// <param name="start">start</param>
        /// <param name="startPriceNumber">startPriceNumber</param>
        [JsonConstructor]
        public GetAssetsBodyInputSort(Option<CreatedAtEnum?> createdAt = default, Option<EndEnum?> end = default, Option<EndPriceNumberEnum?> endPriceNumber = default, Option<FixedPriceNumberEnum?> fixedPriceNumber = default, Option<RarityScoreEnum?> rarityScore = default, Option<StartEnum?> start = default, Option<StartPriceNumberEnum?> startPriceNumber = default)
        {
            CreatedAtOption = createdAt;
            EndOption = end;
            EndPriceNumberOption = endPriceNumber;
            FixedPriceNumberOption = fixedPriceNumber;
            RarityScoreOption = rarityScore;
            StartOption = start;
            StartPriceNumberOption = startPriceNumber;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines CreatedAt
        /// </summary>
        public enum CreatedAtEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="CreatedAtEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CreatedAtEnum CreatedAtEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return CreatedAtEnum.ASC;

            if (value.Equals("DESC"))
                return CreatedAtEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type CreatedAtEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CreatedAtEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CreatedAtEnum? CreatedAtEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return CreatedAtEnum.ASC;

            if (value.Equals("DESC"))
                return CreatedAtEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CreatedAtEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CreatedAtEnumToJsonValue(CreatedAtEnum? value)
        {
            if (value == null)
                return null;

            if (value == CreatedAtEnum.ASC)
                return "ASC";

            if (value == CreatedAtEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of CreatedAt
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreatedAtEnum?> CreatedAtOption { get; private set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public CreatedAtEnum? CreatedAt { get { return this.CreatedAtOption; } set { this.CreatedAtOption = new(value); } }

        /// <summary>
        /// Defines End
        /// </summary>
        public enum EndEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="EndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EndEnum EndEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return EndEnum.ASC;

            if (value.Equals("DESC"))
                return EndEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type EndEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EndEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EndEnum? EndEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return EndEnum.ASC;

            if (value.Equals("DESC"))
                return EndEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EndEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EndEnumToJsonValue(EndEnum? value)
        {
            if (value == null)
                return null;

            if (value == EndEnum.ASC)
                return "ASC";

            if (value == EndEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of End
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EndEnum?> EndOption { get; private set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [JsonPropertyName("end")]
        public EndEnum? End { get { return this.EndOption; } set { this.EndOption = new(value); } }

        /// <summary>
        /// Defines EndPriceNumber
        /// </summary>
        public enum EndPriceNumberEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="EndPriceNumberEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EndPriceNumberEnum EndPriceNumberEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return EndPriceNumberEnum.ASC;

            if (value.Equals("DESC"))
                return EndPriceNumberEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type EndPriceNumberEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EndPriceNumberEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EndPriceNumberEnum? EndPriceNumberEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return EndPriceNumberEnum.ASC;

            if (value.Equals("DESC"))
                return EndPriceNumberEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EndPriceNumberEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EndPriceNumberEnumToJsonValue(EndPriceNumberEnum? value)
        {
            if (value == null)
                return null;

            if (value == EndPriceNumberEnum.ASC)
                return "ASC";

            if (value == EndPriceNumberEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of EndPriceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EndPriceNumberEnum?> EndPriceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndPriceNumber
        /// </summary>
        [JsonPropertyName("endPriceNumber")]
        public EndPriceNumberEnum? EndPriceNumber { get { return this.EndPriceNumberOption; } set { this.EndPriceNumberOption = new(value); } }

        /// <summary>
        /// Defines FixedPriceNumber
        /// </summary>
        public enum FixedPriceNumberEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="FixedPriceNumberEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FixedPriceNumberEnum FixedPriceNumberEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return FixedPriceNumberEnum.ASC;

            if (value.Equals("DESC"))
                return FixedPriceNumberEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type FixedPriceNumberEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FixedPriceNumberEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FixedPriceNumberEnum? FixedPriceNumberEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return FixedPriceNumberEnum.ASC;

            if (value.Equals("DESC"))
                return FixedPriceNumberEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FixedPriceNumberEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FixedPriceNumberEnumToJsonValue(FixedPriceNumberEnum? value)
        {
            if (value == null)
                return null;

            if (value == FixedPriceNumberEnum.ASC)
                return "ASC";

            if (value == FixedPriceNumberEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of FixedPriceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FixedPriceNumberEnum?> FixedPriceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets FixedPriceNumber
        /// </summary>
        [JsonPropertyName("fixedPriceNumber")]
        public FixedPriceNumberEnum? FixedPriceNumber { get { return this.FixedPriceNumberOption; } set { this.FixedPriceNumberOption = new(value); } }

        /// <summary>
        /// Defines RarityScore
        /// </summary>
        public enum RarityScoreEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="RarityScoreEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RarityScoreEnum RarityScoreEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return RarityScoreEnum.ASC;

            if (value.Equals("DESC"))
                return RarityScoreEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type RarityScoreEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RarityScoreEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RarityScoreEnum? RarityScoreEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return RarityScoreEnum.ASC;

            if (value.Equals("DESC"))
                return RarityScoreEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RarityScoreEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RarityScoreEnumToJsonValue(RarityScoreEnum? value)
        {
            if (value == null)
                return null;

            if (value == RarityScoreEnum.ASC)
                return "ASC";

            if (value == RarityScoreEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RarityScore
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RarityScoreEnum?> RarityScoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets RarityScore
        /// </summary>
        [JsonPropertyName("rarityScore")]
        public RarityScoreEnum? RarityScore { get { return this.RarityScoreOption; } set { this.RarityScoreOption = new(value); } }

        /// <summary>
        /// Defines Start
        /// </summary>
        public enum StartEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="StartEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StartEnum StartEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return StartEnum.ASC;

            if (value.Equals("DESC"))
                return StartEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type StartEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StartEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StartEnum? StartEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return StartEnum.ASC;

            if (value.Equals("DESC"))
                return StartEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StartEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StartEnumToJsonValue(StartEnum? value)
        {
            if (value == null)
                return null;

            if (value == StartEnum.ASC)
                return "ASC";

            if (value == StartEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Start
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StartEnum?> StartOption { get; private set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [JsonPropertyName("start")]
        public StartEnum? Start { get { return this.StartOption; } set { this.StartOption = new(value); } }

        /// <summary>
        /// Defines StartPriceNumber
        /// </summary>
        public enum StartPriceNumberEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            DESC = 2
        }

        /// <summary>
        /// Returns a <see cref="StartPriceNumberEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StartPriceNumberEnum StartPriceNumberEnumFromString(string value)
        {
            if (value.Equals("ASC"))
                return StartPriceNumberEnum.ASC;

            if (value.Equals("DESC"))
                return StartPriceNumberEnum.DESC;

            throw new NotImplementedException($"Could not convert value to type StartPriceNumberEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StartPriceNumberEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StartPriceNumberEnum? StartPriceNumberEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ASC"))
                return StartPriceNumberEnum.ASC;

            if (value.Equals("DESC"))
                return StartPriceNumberEnum.DESC;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StartPriceNumberEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StartPriceNumberEnumToJsonValue(StartPriceNumberEnum? value)
        {
            if (value == null)
                return null;

            if (value == StartPriceNumberEnum.ASC)
                return "ASC";

            if (value == StartPriceNumberEnum.DESC)
                return "DESC";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of StartPriceNumber
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StartPriceNumberEnum?> StartPriceNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartPriceNumber
        /// </summary>
        [JsonPropertyName("startPriceNumber")]
        public StartPriceNumberEnum? StartPriceNumber { get { return this.StartPriceNumberOption; } set { this.StartPriceNumberOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetsBodyInputSort {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  EndPriceNumber: ").Append(EndPriceNumber).Append("\n");
            sb.Append("  FixedPriceNumber: ").Append(FixedPriceNumber).Append("\n");
            sb.Append("  RarityScore: ").Append(RarityScore).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  StartPriceNumber: ").Append(StartPriceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetsBodyInputSort" />
    /// </summary>
    public class GetAssetsBodyInputSortJsonConverter : JsonConverter<GetAssetsBodyInputSort>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetsBodyInputSort" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetsBodyInputSort Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<GetAssetsBodyInputSort.CreatedAtEnum?> createdAt = default;
            Option<GetAssetsBodyInputSort.EndEnum?> end = default;
            Option<GetAssetsBodyInputSort.EndPriceNumberEnum?> endPriceNumber = default;
            Option<GetAssetsBodyInputSort.FixedPriceNumberEnum?> fixedPriceNumber = default;
            Option<GetAssetsBodyInputSort.RarityScoreEnum?> rarityScore = default;
            Option<GetAssetsBodyInputSort.StartEnum?> start = default;
            Option<GetAssetsBodyInputSort.StartPriceNumberEnum?> startPriceNumber = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "createdAt":
                            string createdAtRawValue = utf8JsonReader.GetString();
                            if (createdAtRawValue != null)
                                createdAt = new Option<GetAssetsBodyInputSort.CreatedAtEnum?>(GetAssetsBodyInputSort.CreatedAtEnumFromStringOrDefault(createdAtRawValue));
                            break;
                        case "end":
                            string endRawValue = utf8JsonReader.GetString();
                            if (endRawValue != null)
                                end = new Option<GetAssetsBodyInputSort.EndEnum?>(GetAssetsBodyInputSort.EndEnumFromStringOrDefault(endRawValue));
                            break;
                        case "endPriceNumber":
                            string endPriceNumberRawValue = utf8JsonReader.GetString();
                            if (endPriceNumberRawValue != null)
                                endPriceNumber = new Option<GetAssetsBodyInputSort.EndPriceNumberEnum?>(GetAssetsBodyInputSort.EndPriceNumberEnumFromStringOrDefault(endPriceNumberRawValue));
                            break;
                        case "fixedPriceNumber":
                            string fixedPriceNumberRawValue = utf8JsonReader.GetString();
                            if (fixedPriceNumberRawValue != null)
                                fixedPriceNumber = new Option<GetAssetsBodyInputSort.FixedPriceNumberEnum?>(GetAssetsBodyInputSort.FixedPriceNumberEnumFromStringOrDefault(fixedPriceNumberRawValue));
                            break;
                        case "rarityScore":
                            string rarityScoreRawValue = utf8JsonReader.GetString();
                            if (rarityScoreRawValue != null)
                                rarityScore = new Option<GetAssetsBodyInputSort.RarityScoreEnum?>(GetAssetsBodyInputSort.RarityScoreEnumFromStringOrDefault(rarityScoreRawValue));
                            break;
                        case "start":
                            string startRawValue = utf8JsonReader.GetString();
                            if (startRawValue != null)
                                start = new Option<GetAssetsBodyInputSort.StartEnum?>(GetAssetsBodyInputSort.StartEnumFromStringOrDefault(startRawValue));
                            break;
                        case "startPriceNumber":
                            string startPriceNumberRawValue = utf8JsonReader.GetString();
                            if (startPriceNumberRawValue != null)
                                startPriceNumber = new Option<GetAssetsBodyInputSort.StartPriceNumberEnum?>(GetAssetsBodyInputSort.StartPriceNumberEnumFromStringOrDefault(startPriceNumberRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new GetAssetsBodyInputSort(createdAt, end, endPriceNumber, fixedPriceNumber, rarityScore, start, startPriceNumber);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetsBodyInputSort" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetsBodyInputSort"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetsBodyInputSort getAssetsBodyInputSort, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetsBodyInputSort, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetsBodyInputSort" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetsBodyInputSort"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetsBodyInputSort getAssetsBodyInputSort, JsonSerializerOptions jsonSerializerOptions)
        {
            var createdAtRawValue = GetAssetsBodyInputSort.CreatedAtEnumToJsonValue(getAssetsBodyInputSort.CreatedAtOption.Value.Value);
            if (createdAtRawValue != null)
                writer.WriteString("createdAt", createdAtRawValue);
            else
                writer.WriteNull("createdAt");

            var endRawValue = GetAssetsBodyInputSort.EndEnumToJsonValue(getAssetsBodyInputSort.EndOption.Value.Value);
            if (endRawValue != null)
                writer.WriteString("end", endRawValue);
            else
                writer.WriteNull("end");

            var endPriceNumberRawValue = GetAssetsBodyInputSort.EndPriceNumberEnumToJsonValue(getAssetsBodyInputSort.EndPriceNumberOption.Value.Value);
            if (endPriceNumberRawValue != null)
                writer.WriteString("endPriceNumber", endPriceNumberRawValue);
            else
                writer.WriteNull("endPriceNumber");

            var fixedPriceNumberRawValue = GetAssetsBodyInputSort.FixedPriceNumberEnumToJsonValue(getAssetsBodyInputSort.FixedPriceNumberOption.Value.Value);
            if (fixedPriceNumberRawValue != null)
                writer.WriteString("fixedPriceNumber", fixedPriceNumberRawValue);
            else
                writer.WriteNull("fixedPriceNumber");

            var rarityScoreRawValue = GetAssetsBodyInputSort.RarityScoreEnumToJsonValue(getAssetsBodyInputSort.RarityScoreOption.Value.Value);
            if (rarityScoreRawValue != null)
                writer.WriteString("rarityScore", rarityScoreRawValue);
            else
                writer.WriteNull("rarityScore");

            var startRawValue = GetAssetsBodyInputSort.StartEnumToJsonValue(getAssetsBodyInputSort.StartOption.Value.Value);
            if (startRawValue != null)
                writer.WriteString("start", startRawValue);
            else
                writer.WriteNull("start");

            var startPriceNumberRawValue = GetAssetsBodyInputSort.StartPriceNumberEnumToJsonValue(getAssetsBodyInputSort.StartPriceNumberOption.Value.Value);
            if (startPriceNumberRawValue != null)
                writer.WriteString("startPriceNumber", startPriceNumberRawValue);
            else
                writer.WriteNull("startPriceNumber");
        }
    }
}
