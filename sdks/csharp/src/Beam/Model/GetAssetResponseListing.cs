// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetResponseListing
    /// </summary>
    public partial class GetAssetResponseListing : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetResponseListing" /> class.
        /// </summary>
        /// <param name="contractId">contractId</param>
        /// <param name="currency">currency</param>
        /// <param name="endTime">endTime</param>
        /// <param name="expiresAt">expiresAt</param>
        /// <param name="id">id</param>
        /// <param name="nftId">nftId</param>
        /// <param name="orderId">orderId</param>
        /// <param name="platformFee">platformFee</param>
        /// <param name="quantity">quantity</param>
        /// <param name="sellType">sellType</param>
        /// <param name="startTime">startTime</param>
        /// <param name="tokenAddress">tokenAddress</param>
        /// <param name="userId">userId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="endPrice">endPrice</param>
        /// <param name="price">price</param>
        /// <param name="startPrice">startPrice</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public GetAssetResponseListing(string contractId, CurrencyEnum currency, string endTime, string expiresAt, string id, string nftId, string orderId, decimal platformFee, decimal quantity, SellTypeEnum sellType, string startTime, string tokenAddress, string userId, string createdAt = default, string endPrice = default, string price = default, string startPrice = default, string updatedAt = default)
        {
            ContractId = contractId;
            Currency = currency;
            EndTime = endTime;
            ExpiresAt = expiresAt;
            Id = id;
            NftId = nftId;
            OrderId = orderId;
            PlatformFee = platformFee;
            Quantity = quantity;
            SellType = sellType;
            StartTime = startTime;
            TokenAddress = tokenAddress;
            UserId = userId;
            CreatedAt = createdAt;
            EndPrice = endPrice;
            Price = price;
            StartPrice = startPrice;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Currency
        /// </summary>
        public enum CurrencyEnum
        {
            /// <summary>
            /// Enum Avax for value: Avax
            /// </summary>
            Avax = 1,

            /// <summary>
            /// Enum Beam for value: Beam
            /// </summary>
            Beam = 2,

            /// <summary>
            /// Enum Eth for value: Eth
            /// </summary>
            Eth = 3,

            /// <summary>
            /// Enum Matic for value: Matic
            /// </summary>
            Matic = 4,

            /// <summary>
            /// Enum Mc for value: Mc
            /// </summary>
            Mc = 5,

            /// <summary>
            /// Enum Usdc for value: Usdc
            /// </summary>
            Usdc = 6,

            /// <summary>
            /// Enum Usdt for value: Usdt
            /// </summary>
            Usdt = 7,

            /// <summary>
            /// Enum Wavax for value: Wavax
            /// </summary>
            Wavax = 8,

            /// <summary>
            /// Enum Wbeam for value: Wbeam
            /// </summary>
            Wbeam = 9,

            /// <summary>
            /// Enum Weth for value: Weth
            /// </summary>
            Weth = 10,

            /// <summary>
            /// Enum Wmatic for value: Wmatic
            /// </summary>
            Wmatic = 11,

            /// <summary>
            /// Enum Wmc for value: Wmc
            /// </summary>
            Wmc = 12
        }

        /// <summary>
        /// Returns a <see cref="CurrencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static CurrencyEnum CurrencyEnumFromString(string value)
        {
            if (value.Equals("Avax"))
                return CurrencyEnum.Avax;

            if (value.Equals("Beam"))
                return CurrencyEnum.Beam;

            if (value.Equals("Eth"))
                return CurrencyEnum.Eth;

            if (value.Equals("Matic"))
                return CurrencyEnum.Matic;

            if (value.Equals("Mc"))
                return CurrencyEnum.Mc;

            if (value.Equals("Usdc"))
                return CurrencyEnum.Usdc;

            if (value.Equals("Usdt"))
                return CurrencyEnum.Usdt;

            if (value.Equals("Wavax"))
                return CurrencyEnum.Wavax;

            if (value.Equals("Wbeam"))
                return CurrencyEnum.Wbeam;

            if (value.Equals("Weth"))
                return CurrencyEnum.Weth;

            if (value.Equals("Wmatic"))
                return CurrencyEnum.Wmatic;

            if (value.Equals("Wmc"))
                return CurrencyEnum.Wmc;

            throw new NotImplementedException($"Could not convert value to type CurrencyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="CurrencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static CurrencyEnum? CurrencyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Avax"))
                return CurrencyEnum.Avax;

            if (value.Equals("Beam"))
                return CurrencyEnum.Beam;

            if (value.Equals("Eth"))
                return CurrencyEnum.Eth;

            if (value.Equals("Matic"))
                return CurrencyEnum.Matic;

            if (value.Equals("Mc"))
                return CurrencyEnum.Mc;

            if (value.Equals("Usdc"))
                return CurrencyEnum.Usdc;

            if (value.Equals("Usdt"))
                return CurrencyEnum.Usdt;

            if (value.Equals("Wavax"))
                return CurrencyEnum.Wavax;

            if (value.Equals("Wbeam"))
                return CurrencyEnum.Wbeam;

            if (value.Equals("Weth"))
                return CurrencyEnum.Weth;

            if (value.Equals("Wmatic"))
                return CurrencyEnum.Wmatic;

            if (value.Equals("Wmc"))
                return CurrencyEnum.Wmc;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="CurrencyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string CurrencyEnumToJsonValue(CurrencyEnum value)
        {

            if (value == CurrencyEnum.Avax)
                return "Avax";

            if (value == CurrencyEnum.Beam)
                return "Beam";

            if (value == CurrencyEnum.Eth)
                return "Eth";

            if (value == CurrencyEnum.Matic)
                return "Matic";

            if (value == CurrencyEnum.Mc)
                return "Mc";

            if (value == CurrencyEnum.Usdc)
                return "Usdc";

            if (value == CurrencyEnum.Usdt)
                return "Usdt";

            if (value == CurrencyEnum.Wavax)
                return "Wavax";

            if (value == CurrencyEnum.Wbeam)
                return "Wbeam";

            if (value == CurrencyEnum.Weth)
                return "Weth";

            if (value == CurrencyEnum.Wmatic)
                return "Wmatic";

            if (value == CurrencyEnum.Wmc)
                return "Wmc";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [JsonPropertyName("currency")]
        public CurrencyEnum Currency { get; set; }

        /// <summary>
        /// Defines SellType
        /// </summary>
        public enum SellTypeEnum
        {
            /// <summary>
            /// Enum AscendingAuction for value: AscendingAuction
            /// </summary>
            AscendingAuction = 1,

            /// <summary>
            /// Enum DescendingAuction for value: DescendingAuction
            /// </summary>
            DescendingAuction = 2,

            /// <summary>
            /// Enum FixedPrice for value: FixedPrice
            /// </summary>
            FixedPrice = 3,

            /// <summary>
            /// Enum NotForSale for value: NotForSale
            /// </summary>
            NotForSale = 4
        }

        /// <summary>
        /// Returns a <see cref="SellTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SellTypeEnum SellTypeEnumFromString(string value)
        {
            if (value.Equals("AscendingAuction"))
                return SellTypeEnum.AscendingAuction;

            if (value.Equals("DescendingAuction"))
                return SellTypeEnum.DescendingAuction;

            if (value.Equals("FixedPrice"))
                return SellTypeEnum.FixedPrice;

            if (value.Equals("NotForSale"))
                return SellTypeEnum.NotForSale;

            throw new NotImplementedException($"Could not convert value to type SellTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SellTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SellTypeEnum? SellTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("AscendingAuction"))
                return SellTypeEnum.AscendingAuction;

            if (value.Equals("DescendingAuction"))
                return SellTypeEnum.DescendingAuction;

            if (value.Equals("FixedPrice"))
                return SellTypeEnum.FixedPrice;

            if (value.Equals("NotForSale"))
                return SellTypeEnum.NotForSale;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SellTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SellTypeEnumToJsonValue(SellTypeEnum value)
        {

            if (value == SellTypeEnum.AscendingAuction)
                return "AscendingAuction";

            if (value == SellTypeEnum.DescendingAuction)
                return "DescendingAuction";

            if (value == SellTypeEnum.FixedPrice)
                return "FixedPrice";

            if (value == SellTypeEnum.NotForSale)
                return "NotForSale";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets SellType
        /// </summary>
        [JsonPropertyName("sellType")]
        public SellTypeEnum SellType { get; set; }

        /// <summary>
        /// Gets or Sets ContractId
        /// </summary>
        [JsonPropertyName("contractId")]
        public string ContractId { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public string EndTime { get; set; }

        /// <summary>
        /// Gets or Sets ExpiresAt
        /// </summary>
        [JsonPropertyName("expiresAt")]
        public string ExpiresAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets NftId
        /// </summary>
        [JsonPropertyName("nftId")]
        public string NftId { get; set; }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [JsonPropertyName("orderId")]
        public string OrderId { get; set; }

        /// <summary>
        /// Gets or Sets PlatformFee
        /// </summary>
        [JsonPropertyName("platformFee")]
        public decimal PlatformFee { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [JsonPropertyName("quantity")]
        public decimal Quantity { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets TokenAddress
        /// </summary>
        [JsonPropertyName("tokenAddress")]
        public string TokenAddress { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets EndPrice
        /// </summary>
        [JsonPropertyName("endPrice")]
        public string EndPrice { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [JsonPropertyName("price")]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets StartPrice
        /// </summary>
        [JsonPropertyName("startPrice")]
        public string StartPrice { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetResponseListing {\n");
            sb.Append("  ContractId: ").Append(ContractId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ExpiresAt: ").Append(ExpiresAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NftId: ").Append(NftId).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  PlatformFee: ").Append(PlatformFee).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  SellType: ").Append(SellType).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  TokenAddress: ").Append(TokenAddress).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EndPrice: ").Append(EndPrice).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  StartPrice: ").Append(StartPrice).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetResponseListing" />
    /// </summary>
    public class GetAssetResponseListingJsonConverter : JsonConverter<GetAssetResponseListing>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetResponseListing" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetResponseListing Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string contractId = default;
            GetAssetResponseListing.CurrencyEnum? currency = default;
            string endTime = default;
            string expiresAt = default;
            string id = default;
            string nftId = default;
            string orderId = default;
            decimal? platformFee = default;
            decimal? quantity = default;
            GetAssetResponseListing.SellTypeEnum? sellType = default;
            string startTime = default;
            string tokenAddress = default;
            string userId = default;
            string createdAt = default;
            string endPrice = default;
            string price = default;
            string startPrice = default;
            string updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contractId":
                            contractId = utf8JsonReader.GetString();
                            break;
                        case "currency":
                            string currencyRawValue = utf8JsonReader.GetString();
                            currency = currencyRawValue == null
                                ? null
                                : GetAssetResponseListing.CurrencyEnumFromStringOrDefault(currencyRawValue);
                            break;
                        case "endTime":
                            endTime = utf8JsonReader.GetString();
                            break;
                        case "expiresAt":
                            expiresAt = utf8JsonReader.GetString();
                            break;
                        case "_id":
                            id = utf8JsonReader.GetString();
                            break;
                        case "nftId":
                            nftId = utf8JsonReader.GetString();
                            break;
                        case "orderId":
                            orderId = utf8JsonReader.GetString();
                            break;
                        case "platformFee":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                platformFee = utf8JsonReader.GetDecimal();
                            break;
                        case "quantity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quantity = utf8JsonReader.GetDecimal();
                            break;
                        case "sellType":
                            string sellTypeRawValue = utf8JsonReader.GetString();
                            sellType = sellTypeRawValue == null
                                ? null
                                : GetAssetResponseListing.SellTypeEnumFromStringOrDefault(sellTypeRawValue);
                            break;
                        case "startTime":
                            startTime = utf8JsonReader.GetString();
                            break;
                        case "tokenAddress":
                            tokenAddress = utf8JsonReader.GetString();
                            break;
                        case "userId":
                            userId = utf8JsonReader.GetString();
                            break;
                        case "createdAt":
                            createdAt = utf8JsonReader.GetString();
                            break;
                        case "endPrice":
                            endPrice = utf8JsonReader.GetString();
                            break;
                        case "price":
                            price = utf8JsonReader.GetString();
                            break;
                        case "startPrice":
                            startPrice = utf8JsonReader.GetString();
                            break;
                        case "updatedAt":
                            updatedAt = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (contractId == null)
                throw new ArgumentNullException(nameof(contractId), "Property is required for class GetAssetResponseListing.");

            if (currency == null)
                throw new ArgumentNullException(nameof(currency), "Property is required for class GetAssetResponseListing.");

            if (endTime == null)
                throw new ArgumentNullException(nameof(endTime), "Property is required for class GetAssetResponseListing.");

            if (expiresAt == null)
                throw new ArgumentNullException(nameof(expiresAt), "Property is required for class GetAssetResponseListing.");

            if (id == null)
                throw new ArgumentNullException(nameof(id), "Property is required for class GetAssetResponseListing.");

            if (nftId == null)
                throw new ArgumentNullException(nameof(nftId), "Property is required for class GetAssetResponseListing.");

            if (orderId == null)
                throw new ArgumentNullException(nameof(orderId), "Property is required for class GetAssetResponseListing.");

            if (platformFee == null)
                throw new ArgumentNullException(nameof(platformFee), "Property is required for class GetAssetResponseListing.");

            if (quantity == null)
                throw new ArgumentNullException(nameof(quantity), "Property is required for class GetAssetResponseListing.");

            if (sellType == null)
                throw new ArgumentNullException(nameof(sellType), "Property is required for class GetAssetResponseListing.");

            if (startTime == null)
                throw new ArgumentNullException(nameof(startTime), "Property is required for class GetAssetResponseListing.");

            if (tokenAddress == null)
                throw new ArgumentNullException(nameof(tokenAddress), "Property is required for class GetAssetResponseListing.");

            if (userId == null)
                throw new ArgumentNullException(nameof(userId), "Property is required for class GetAssetResponseListing.");

            return new GetAssetResponseListing(contractId, currency.Value, endTime, expiresAt, id, nftId, orderId, platformFee.Value, quantity.Value, sellType.Value, startTime, tokenAddress, userId, createdAt, endPrice, price, startPrice, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetResponseListing" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponseListing"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetResponseListing getAssetResponseListing, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetResponseListing, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetResponseListing" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponseListing"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetResponseListing getAssetResponseListing, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("contractId", getAssetResponseListing.ContractId);

            var currencyRawValue = GetAssetResponseListing.CurrencyEnumToJsonValue(getAssetResponseListing.Currency);
            if (currencyRawValue != null)
                writer.WriteString("currency", currencyRawValue);
            else
                writer.WriteNull("currency");

            writer.WriteString("endTime", getAssetResponseListing.EndTime);
            writer.WriteString("expiresAt", getAssetResponseListing.ExpiresAt);
            writer.WriteString("_id", getAssetResponseListing.Id);
            writer.WriteString("nftId", getAssetResponseListing.NftId);
            writer.WriteString("orderId", getAssetResponseListing.OrderId);
            writer.WriteNumber("platformFee", getAssetResponseListing.PlatformFee);
            writer.WriteNumber("quantity", getAssetResponseListing.Quantity);

            var sellTypeRawValue = GetAssetResponseListing.SellTypeEnumToJsonValue(getAssetResponseListing.SellType);
            if (sellTypeRawValue != null)
                writer.WriteString("sellType", sellTypeRawValue);
            else
                writer.WriteNull("sellType");

            writer.WriteString("startTime", getAssetResponseListing.StartTime);
            writer.WriteString("tokenAddress", getAssetResponseListing.TokenAddress);
            writer.WriteString("userId", getAssetResponseListing.UserId);
            writer.WriteString("createdAt", getAssetResponseListing.CreatedAt);
            writer.WriteString("endPrice", getAssetResponseListing.EndPrice);
            writer.WriteString("price", getAssetResponseListing.Price);
            writer.WriteString("startPrice", getAssetResponseListing.StartPrice);
            writer.WriteString("updatedAt", getAssetResponseListing.UpdatedAt);
        }
    }
}
