// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetGameResponseContractsInner
    /// </summary>
    public partial class GetGameResponseContractsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetGameResponseContractsInner" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="chainId">chainId</param>
        /// <param name="externalId">externalId</param>
        /// <param name="id">id</param>
        /// <param name="type">type</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="gameId">gameId</param>
        /// <param name="name">name</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public GetGameResponseContractsInner(string address, int chainId, string externalId, string id, TypeEnum type, Object createdAt = default, string gameId = default, string name = default, Object updatedAt = default)
        {
            Address = address;
            ChainId = chainId;
            ExternalId = externalId;
            Id = id;
            Type = type;
            CreatedAt = createdAt;
            GameId = gameId;
            Name = name;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ERC20 for value: ERC20
            /// </summary>
            ERC20 = 1,

            /// <summary>
            /// Enum ERC721 for value: ERC721
            /// </summary>
            ERC721 = 2,

            /// <summary>
            /// Enum ERC1155 for value: ERC1155
            /// </summary>
            ERC1155 = 3,

            /// <summary>
            /// Enum SEAPORT for value: SEAPORT
            /// </summary>
            SEAPORT = 4,

            /// <summary>
            /// Enum UNISWAPV2 for value: UNISWAPV2
            /// </summary>
            UNISWAPV2 = 5,

            /// <summary>
            /// Enum WETH for value: WETH
            /// </summary>
            WETH = 6
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("ERC20"))
                return TypeEnum.ERC20;

            if (value.Equals("ERC721"))
                return TypeEnum.ERC721;

            if (value.Equals("ERC1155"))
                return TypeEnum.ERC1155;

            if (value.Equals("SEAPORT"))
                return TypeEnum.SEAPORT;

            if (value.Equals("UNISWAPV2"))
                return TypeEnum.UNISWAPV2;

            if (value.Equals("WETH"))
                return TypeEnum.WETH;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ERC20"))
                return TypeEnum.ERC20;

            if (value.Equals("ERC721"))
                return TypeEnum.ERC721;

            if (value.Equals("ERC1155"))
                return TypeEnum.ERC1155;

            if (value.Equals("SEAPORT"))
                return TypeEnum.SEAPORT;

            if (value.Equals("UNISWAPV2"))
                return TypeEnum.UNISWAPV2;

            if (value.Equals("WETH"))
                return TypeEnum.WETH;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {

            if (value == TypeEnum.ERC20)
                return "ERC20";

            if (value == TypeEnum.ERC721)
                return "ERC721";

            if (value == TypeEnum.ERC1155)
                return "ERC1155";

            if (value == TypeEnum.SEAPORT)
                return "SEAPORT";

            if (value == TypeEnum.UNISWAPV2)
                return "UNISWAPV2";

            if (value == TypeEnum.WETH)
                return "WETH";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public int ChainId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public Object CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets GameId
        /// </summary>
        [JsonPropertyName("gameId")]
        public string GameId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public Object UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetGameResponseContractsInner {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  GameId: ").Append(GameId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetGameResponseContractsInner" />
    /// </summary>
    public class GetGameResponseContractsInnerJsonConverter : JsonConverter<GetGameResponseContractsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetGameResponseContractsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetGameResponseContractsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string address = default;
            int? chainId = default;
            string externalId = default;
            string id = default;
            GetGameResponseContractsInner.TypeEnum? type = default;
            Object createdAt = default;
            string gameId = default;
            string name = default;
            Object updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = utf8JsonReader.GetString();
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = utf8JsonReader.GetInt32();
                            break;
                        case "externalId":
                            externalId = utf8JsonReader.GetString();
                            break;
                        case "id":
                            id = utf8JsonReader.GetString();
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            type = typeRawValue == null
                                ? null
                                : GetGameResponseContractsInner.TypeEnumFromStringOrDefault(typeRawValue);
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "gameId":
                            gameId = utf8JsonReader.GetString();
                            break;
                        case "name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address == null)
                throw new ArgumentNullException(nameof(address), "Property is required for class GetGameResponseContractsInner.");

            if (chainId == null)
                throw new ArgumentNullException(nameof(chainId), "Property is required for class GetGameResponseContractsInner.");

            if (externalId == null)
                throw new ArgumentNullException(nameof(externalId), "Property is required for class GetGameResponseContractsInner.");

            if (id == null)
                throw new ArgumentNullException(nameof(id), "Property is required for class GetGameResponseContractsInner.");

            if (type == null)
                throw new ArgumentNullException(nameof(type), "Property is required for class GetGameResponseContractsInner.");

            return new GetGameResponseContractsInner(address, chainId.Value, externalId, id, type.Value, createdAt, gameId, name, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="GetGameResponseContractsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGameResponseContractsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetGameResponseContractsInner getGameResponseContractsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getGameResponseContractsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetGameResponseContractsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getGameResponseContractsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetGameResponseContractsInner getGameResponseContractsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("address", getGameResponseContractsInner.Address);
            writer.WriteNumber("chainId", getGameResponseContractsInner.ChainId);
            writer.WriteString("externalId", getGameResponseContractsInner.ExternalId);
            writer.WriteString("id", getGameResponseContractsInner.Id);

            var typeRawValue = GetGameResponseContractsInner.TypeEnumToJsonValue(getGameResponseContractsInner.Type);
            if (typeRawValue != null)
                writer.WriteString("type", typeRawValue);
            else
                writer.WriteNull("type");

            writer.WritePropertyName("createdAt");
            JsonSerializer.Serialize(writer, getGameResponseContractsInner.CreatedAt, jsonSerializerOptions);
            writer.WriteString("gameId", getGameResponseContractsInner.GameId);
            writer.WriteString("name", getGameResponseContractsInner.Name);
            writer.WritePropertyName("updatedAt");
            JsonSerializer.Serialize(writer, getGameResponseContractsInner.UpdatedAt, jsonSerializerOptions);
        }
    }
}
