// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// AddContractRequestInputAbiInnerInputsInner
    /// </summary>
    public partial class AddContractRequestInputAbiInnerInputsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddContractRequestInputAbiInnerInputsInner" /> class.
        /// </summary>
        /// <param name="components">components</param>
        /// <param name="indexed">indexed</param>
        /// <param name="name">name</param>
        /// <param name="type">type</param>
        /// <param name="internalType">internalType</param>
        [JsonConstructor]
        public AddContractRequestInputAbiInnerInputsInner(List<Object> components, bool indexed, string name, string type, Object internalType = default)
        {
            Components = components;
            Indexed = indexed;
            Name = name;
            Type = type;
            InternalType = internalType;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Components
        /// </summary>
        [JsonPropertyName("components")]
        public List<Object> Components { get; set; }

        /// <summary>
        /// Gets or Sets Indexed
        /// </summary>
        [JsonPropertyName("indexed")]
        public bool Indexed { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets InternalType
        /// </summary>
        [JsonPropertyName("internalType")]
        public Object InternalType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddContractRequestInputAbiInnerInputsInner {\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  Indexed: ").Append(Indexed).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InternalType: ").Append(InternalType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddContractRequestInputAbiInnerInputsInner" />
    /// </summary>
    public class AddContractRequestInputAbiInnerInputsInnerJsonConverter : JsonConverter<AddContractRequestInputAbiInnerInputsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddContractRequestInputAbiInnerInputsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddContractRequestInputAbiInnerInputsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            List<Object> components = default;
            bool? indexed = default;
            string name = default;
            string type = default;
            Object internalType = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "components":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                components = JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "indexed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                indexed = utf8JsonReader.GetBoolean();
                            break;
                        case "name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "type":
                            type = utf8JsonReader.GetString();
                            break;
                        case "internalType":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                internalType = JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (components == null)
                throw new ArgumentNullException(nameof(components), "Property is required for class AddContractRequestInputAbiInnerInputsInner.");

            if (indexed == null)
                throw new ArgumentNullException(nameof(indexed), "Property is required for class AddContractRequestInputAbiInnerInputsInner.");

            if (name == null)
                throw new ArgumentNullException(nameof(name), "Property is required for class AddContractRequestInputAbiInnerInputsInner.");

            if (type == null)
                throw new ArgumentNullException(nameof(type), "Property is required for class AddContractRequestInputAbiInnerInputsInner.");

            return new AddContractRequestInputAbiInnerInputsInner(components, indexed.Value, name, type, internalType);
        }

        /// <summary>
        /// Serializes a <see cref="AddContractRequestInputAbiInnerInputsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addContractRequestInputAbiInnerInputsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddContractRequestInputAbiInnerInputsInner addContractRequestInputAbiInnerInputsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, addContractRequestInputAbiInnerInputsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddContractRequestInputAbiInnerInputsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addContractRequestInputAbiInnerInputsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AddContractRequestInputAbiInnerInputsInner addContractRequestInputAbiInnerInputsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WritePropertyName("components");
            JsonSerializer.Serialize(writer, addContractRequestInputAbiInnerInputsInner.Components, jsonSerializerOptions);
            writer.WriteBoolean("indexed", addContractRequestInputAbiInnerInputsInner.Indexed);
            writer.WriteString("name", addContractRequestInputAbiInnerInputsInner.Name);
            writer.WriteString("type", addContractRequestInputAbiInnerInputsInner.Type);
            writer.WritePropertyName("internalType");
            JsonSerializer.Serialize(writer, addContractRequestInputAbiInnerInputsInner.InternalType, jsonSerializerOptions);
        }
    }
}
