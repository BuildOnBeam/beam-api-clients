// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Beam.Client;

namespace Beam.Model
{
    /// <summary>
    /// UpdateGameRequestInput
    /// </summary>
    public partial class UpdateGameRequestInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateGameRequestInput" /> class.
        /// </summary>
        /// <param name="coverImageUrl">coverImageUrl</param>
        /// <param name="description">description</param>
        /// <param name="logoImageUrl">logoImageUrl</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public UpdateGameRequestInput(Option<string> coverImageUrl = default, Option<string> description = default, Option<string> logoImageUrl = default, Option<string> name = default)
        {
            CoverImageUrlOption = coverImageUrl;
            DescriptionOption = description;
            LogoImageUrlOption = logoImageUrl;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CoverImageUrl
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CoverImageUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets CoverImageUrl
        /// </summary>
        [JsonPropertyName("coverImageUrl")]
        public string CoverImageUrl { get { return this. CoverImageUrlOption; } set { this.CoverImageUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get { return this. DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of LogoImageUrl
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> LogoImageUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets LogoImageUrl
        /// </summary>
        [JsonPropertyName("logoImageUrl")]
        public string LogoImageUrl { get { return this. LogoImageUrlOption; } set { this.LogoImageUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get { return this. NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateGameRequestInput {\n");
            sb.Append("  CoverImageUrl: ").Append(CoverImageUrl).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogoImageUrl: ").Append(LogoImageUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateGameRequestInput" />
    /// </summary>
    public class UpdateGameRequestInputJsonConverter : JsonConverter<UpdateGameRequestInput>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateGameRequestInput" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateGameRequestInput Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> coverImageUrl = default;
            Option<string> description = default;
            Option<string> logoImageUrl = default;
            Option<string> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "coverImageUrl":
                            coverImageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "logoImageUrl":
                            logoImageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdateGameRequestInput.");

            return new UpdateGameRequestInput(coverImageUrl, description, logoImageUrl, name);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateGameRequestInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateGameRequestInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateGameRequestInput updateGameRequestInput, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, updateGameRequestInput, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateGameRequestInput" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateGameRequestInput"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, UpdateGameRequestInput updateGameRequestInput, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateGameRequestInput.NameOption.IsSet && updateGameRequestInput.Name == null)
                throw new ArgumentNullException(nameof(updateGameRequestInput.Name), "Property is required for class UpdateGameRequestInput.");

            if (updateGameRequestInput.CoverImageUrlOption.IsSet)
                if (updateGameRequestInput.CoverImageUrlOption.Value != null)
                    writer.WriteString("coverImageUrl", updateGameRequestInput.CoverImageUrl);
                else
                    writer.WriteNull("coverImageUrl");

            if (updateGameRequestInput.DescriptionOption.IsSet)
                if (updateGameRequestInput.DescriptionOption.Value != null)
                    writer.WriteString("description", updateGameRequestInput.Description);
                else
                    writer.WriteNull("description");

            if (updateGameRequestInput.LogoImageUrlOption.IsSet)
                if (updateGameRequestInput.LogoImageUrlOption.Value != null)
                    writer.WriteString("logoImageUrl", updateGameRequestInput.LogoImageUrl);
                else
                    writer.WriteNull("logoImageUrl");

            if (updateGameRequestInput.NameOption.IsSet)
                writer.WriteString("name", updateGameRequestInput.Name);
        }
    }
}
