// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Beam.Client;

namespace Beam.Model
{
    /// <summary>
    /// CreateWebhookForGame
    /// </summary>
    public partial class CreateWebhookForGame : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateWebhookForGame" /> class.
        /// </summary>
        /// <param name="contract">contract</param>
        /// <param name="events">events</param>
        /// <param name="url">url</param>
        /// <param name="chainId">chainId (default to 13337M)</param>
        [JsonConstructor]
        public CreateWebhookForGame(string contract, List<CreateWebhookForGame.EventsEnum> events, string url, Option<decimal?> chainId = default)
        {
            Contract = contract;
            Events = events;
            Url = url;
            ChainIdOption = chainId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Events
        /// </summary>
        public enum EventsEnum
        {
            /// <summary>
            /// Enum TokenTransfers for value: TokenTransfers
            /// </summary>
            TokenTransfers = 1
        }

        /// <summary>
        /// Returns a <see cref="EventsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static EventsEnum EventsEnumFromString(string value)
        {
            if (value.Equals("TokenTransfers"))
                return EventsEnum.TokenTransfers;

            throw new NotImplementedException($"Could not convert value to type EventsEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="EventsEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static EventsEnum? EventsEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TokenTransfers"))
                return EventsEnum.TokenTransfers;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="EventsEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string EventsEnumToJsonValue(EventsEnum value)
        {
            if (value == EventsEnum.TokenTransfers)
                return "TokenTransfers";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Contract
        /// </summary>
        [JsonPropertyName("contract")]
        public string Contract { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [JsonPropertyName("events")]
        public List<CreateWebhookForGame.EventsEnum> Events { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Used to track the state of ChainId
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ChainIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public decimal? ChainId { get { return this. ChainIdOption; } set { this.ChainIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateWebhookForGame {\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateWebhookForGame" />
    /// </summary>
    public class CreateWebhookForGameJsonConverter : JsonConverter<CreateWebhookForGame>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateWebhookForGame" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateWebhookForGame Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> contract = default;
            Option<List<CreateWebhookForGame.EventsEnum>> events = default;
            Option<string> url = default;
            Option<decimal?> chainId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "contract":
                            contract = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "events":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                events = new Option<List<CreateWebhookForGame.EventsEnum>>(JsonSerializer.Deserialize<List<CreateWebhookForGame.EventsEnum>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "url":
                            url = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!contract.IsSet)
                throw new ArgumentException("Property is required for class CreateWebhookForGame.", nameof(contract));

            if (!events.IsSet)
                throw new ArgumentException("Property is required for class CreateWebhookForGame.", nameof(events));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class CreateWebhookForGame.", nameof(url));

            if (contract.IsSet && contract.Value == null)
                throw new ArgumentNullException(nameof(contract), "Property is not nullable for class CreateWebhookForGame.");

            if (events.IsSet && events.Value == null)
                throw new ArgumentNullException(nameof(events), "Property is not nullable for class CreateWebhookForGame.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class CreateWebhookForGame.");

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class CreateWebhookForGame.");

            return new CreateWebhookForGame(contract.Value, events.Value, url.Value, chainId);
        }

        /// <summary>
        /// Serializes a <see cref="CreateWebhookForGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createWebhookForGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateWebhookForGame createWebhookForGame, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createWebhookForGame, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateWebhookForGame" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createWebhookForGame"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateWebhookForGame createWebhookForGame, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createWebhookForGame.Contract == null)
                throw new ArgumentNullException(nameof(createWebhookForGame.Contract), "Property is required for class CreateWebhookForGame.");

            if (createWebhookForGame.Events == null)
                throw new ArgumentNullException(nameof(createWebhookForGame.Events), "Property is required for class CreateWebhookForGame.");

            if (createWebhookForGame.Url == null)
                throw new ArgumentNullException(nameof(createWebhookForGame.Url), "Property is required for class CreateWebhookForGame.");

            writer.WriteString("contract", createWebhookForGame.Contract);

            writer.WritePropertyName("events");
            JsonSerializer.Serialize(writer, createWebhookForGame.Events, jsonSerializerOptions);
            writer.WriteString("url", createWebhookForGame.Url);

            if (createWebhookForGame.ChainIdOption.IsSet)
                writer.WriteNumber("chainId", createWebhookForGame.ChainIdOption.Value.Value);
        }
    }
}
