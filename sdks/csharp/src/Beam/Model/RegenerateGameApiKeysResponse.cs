// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Beam.Client;

namespace Beam.Model
{
    /// <summary>
    /// RegenerateGameApiKeysResponse
    /// </summary>
    public partial class RegenerateGameApiKeysResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegenerateGameApiKeysResponse" /> class.
        /// </summary>
        /// <param name="apiKeys">apiKeys</param>
        /// <param name="chainIds">chainIds</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="coverImageUrl">coverImageUrl</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="description">description</param>
        /// <param name="logoImageUrl">logoImageUrl</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public RegenerateGameApiKeysResponse(List<RegenerateGameApiKeysResponseApiKeysInner> apiKeys, List<int> chainIds, string id, string name, string coverImageUrl = default, Object createdAt = default, string description = default, string logoImageUrl = default, Object updatedAt = default)
        {
            ApiKeys = apiKeys;
            ChainIds = chainIds;
            Id = id;
            Name = name;
            CoverImageUrl = coverImageUrl;
            CreatedAt = createdAt;
            Description = description;
            LogoImageUrl = logoImageUrl;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ApiKeys
        /// </summary>
        [JsonPropertyName("apiKeys")]
        public List<RegenerateGameApiKeysResponseApiKeysInner> ApiKeys { get; set; }

        /// <summary>
        /// Gets or Sets ChainIds
        /// </summary>
        [JsonPropertyName("chainIds")]
        public List<int> ChainIds { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CoverImageUrl
        /// </summary>
        [JsonPropertyName("coverImageUrl")]
        public string CoverImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public Object CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LogoImageUrl
        /// </summary>
        [JsonPropertyName("logoImageUrl")]
        public string LogoImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public Object UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RegenerateGameApiKeysResponse {\n");
            sb.Append("  ApiKeys: ").Append(ApiKeys).Append("\n");
            sb.Append("  ChainIds: ").Append(ChainIds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CoverImageUrl: ").Append(CoverImageUrl).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LogoImageUrl: ").Append(LogoImageUrl).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RegenerateGameApiKeysResponse" />
    /// </summary>
    public class RegenerateGameApiKeysResponseJsonConverter : JsonConverter<RegenerateGameApiKeysResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="RegenerateGameApiKeysResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RegenerateGameApiKeysResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<RegenerateGameApiKeysResponseApiKeysInner>> apiKeys = default;
            Option<List<int>> chainIds = default;
            Option<string> id = default;
            Option<string> name = default;
            Option<string> coverImageUrl = default;
            Option<Object> createdAt = default;
            Option<string> description = default;
            Option<string> logoImageUrl = default;
            Option<Object> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "apiKeys":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                apiKeys = new Option<List<RegenerateGameApiKeysResponseApiKeysInner>>(JsonSerializer.Deserialize<List<RegenerateGameApiKeysResponseApiKeysInner>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "chainIds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainIds = new Option<List<int>>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "coverImageUrl":
                            coverImageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "logoImageUrl":
                            logoImageUrl = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!apiKeys.IsSet)
                throw new ArgumentException("Property is required for class RegenerateGameApiKeysResponse.", nameof(apiKeys));

            if (!chainIds.IsSet)
                throw new ArgumentException("Property is required for class RegenerateGameApiKeysResponse.", nameof(chainIds));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class RegenerateGameApiKeysResponse.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class RegenerateGameApiKeysResponse.", nameof(name));

            if (!coverImageUrl.IsSet)
                throw new ArgumentException("Property is required for class RegenerateGameApiKeysResponse.", nameof(coverImageUrl));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class RegenerateGameApiKeysResponse.", nameof(createdAt));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class RegenerateGameApiKeysResponse.", nameof(description));

            if (!logoImageUrl.IsSet)
                throw new ArgumentException("Property is required for class RegenerateGameApiKeysResponse.", nameof(logoImageUrl));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class RegenerateGameApiKeysResponse.", nameof(updatedAt));

            if (apiKeys.IsSet && apiKeys.Value == null)
                throw new ArgumentNullException(nameof(apiKeys), "Property is not nullable for class RegenerateGameApiKeysResponse.");

            if (chainIds.IsSet && chainIds.Value == null)
                throw new ArgumentNullException(nameof(chainIds), "Property is not nullable for class RegenerateGameApiKeysResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class RegenerateGameApiKeysResponse.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class RegenerateGameApiKeysResponse.");

            return new RegenerateGameApiKeysResponse(apiKeys.Value, chainIds.Value, id.Value, name.Value, coverImageUrl.Value, createdAt.Value, description.Value, logoImageUrl.Value, updatedAt.Value);
        }

        /// <summary>
        /// Serializes a <see cref="RegenerateGameApiKeysResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="regenerateGameApiKeysResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RegenerateGameApiKeysResponse regenerateGameApiKeysResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, regenerateGameApiKeysResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RegenerateGameApiKeysResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="regenerateGameApiKeysResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, RegenerateGameApiKeysResponse regenerateGameApiKeysResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (regenerateGameApiKeysResponse.ApiKeys == null)
                throw new ArgumentNullException(nameof(regenerateGameApiKeysResponse.ApiKeys), "Property is required for class RegenerateGameApiKeysResponse.");

            if (regenerateGameApiKeysResponse.ChainIds == null)
                throw new ArgumentNullException(nameof(regenerateGameApiKeysResponse.ChainIds), "Property is required for class RegenerateGameApiKeysResponse.");

            if (regenerateGameApiKeysResponse.Id == null)
                throw new ArgumentNullException(nameof(regenerateGameApiKeysResponse.Id), "Property is required for class RegenerateGameApiKeysResponse.");

            if (regenerateGameApiKeysResponse.Name == null)
                throw new ArgumentNullException(nameof(regenerateGameApiKeysResponse.Name), "Property is required for class RegenerateGameApiKeysResponse.");

            writer.WritePropertyName("apiKeys");
            JsonSerializer.Serialize(writer, regenerateGameApiKeysResponse.ApiKeys, jsonSerializerOptions);
            writer.WritePropertyName("chainIds");
            JsonSerializer.Serialize(writer, regenerateGameApiKeysResponse.ChainIds, jsonSerializerOptions);
            writer.WriteString("id", regenerateGameApiKeysResponse.Id);

            writer.WriteString("name", regenerateGameApiKeysResponse.Name);

            if (regenerateGameApiKeysResponse.CoverImageUrl != null)
                writer.WriteString("coverImageUrl", regenerateGameApiKeysResponse.CoverImageUrl);
            else
                writer.WriteNull("coverImageUrl");

            if (regenerateGameApiKeysResponse.CreatedAt != null)
            {
                writer.WritePropertyName("createdAt");
                JsonSerializer.Serialize(writer, regenerateGameApiKeysResponse.CreatedAt, jsonSerializerOptions);
            }
            else
                writer.WriteNull("createdAt");
            if (regenerateGameApiKeysResponse.Description != null)
                writer.WriteString("description", regenerateGameApiKeysResponse.Description);
            else
                writer.WriteNull("description");

            if (regenerateGameApiKeysResponse.LogoImageUrl != null)
                writer.WriteString("logoImageUrl", regenerateGameApiKeysResponse.LogoImageUrl);
            else
                writer.WriteNull("logoImageUrl");

            if (regenerateGameApiKeysResponse.UpdatedAt != null)
            {
                writer.WritePropertyName("updatedAt");
                JsonSerializer.Serialize(writer, regenerateGameApiKeysResponse.UpdatedAt, jsonSerializerOptions);
            }
            else
                writer.WriteNull("updatedAt");
        }
    }
}
