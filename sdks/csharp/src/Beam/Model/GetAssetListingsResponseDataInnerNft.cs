/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Beam.Client.FileParameter;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetListingsResponseDataInnerNft
    /// </summary>
    [DataContract(Name = "GetAssetListingsResponse_data_inner_nft")]
    public partial class GetAssetListingsResponseDataInnerNft : IEquatable<GetAssetListingsResponseDataInnerNft>, IValidatableObject
    {
        /// <summary>
        /// Defines Rarity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RarityEnum
        {
            /// <summary>
            /// Enum Common for value: Common
            /// </summary>
            [EnumMember(Value = "Common")]
            Common = 1,

            /// <summary>
            /// Enum ExtremelyRare for value: ExtremelyRare
            /// </summary>
            [EnumMember(Value = "ExtremelyRare")]
            ExtremelyRare = 2,

            /// <summary>
            /// Enum Rare for value: Rare
            /// </summary>
            [EnumMember(Value = "Rare")]
            Rare = 3,

            /// <summary>
            /// Enum Uncommon for value: Uncommon
            /// </summary>
            [EnumMember(Value = "Uncommon")]
            Uncommon = 4,

            /// <summary>
            /// Enum VeryRare for value: VeryRare
            /// </summary>
            [EnumMember(Value = "VeryRare")]
            VeryRare = 5
        }


        /// <summary>
        /// Gets or Sets Rarity
        /// </summary>
        [DataMember(Name = "rarity", EmitDefaultValue = true)]
        public RarityEnum? Rarity { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetListingsResponseDataInnerNft" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAssetListingsResponseDataInnerNft() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetListingsResponseDataInnerNft" /> class.
        /// </summary>
        /// <param name="marketplaceId">marketplaceId (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="imageUrl">imageUrl (required).</param>
        /// <param name="assetType">assetType (required).</param>
        /// <param name="assetAddress">assetAddress (required).</param>
        /// <param name="assetId">assetId (required).</param>
        /// <param name="rarity">rarity.</param>
        /// <param name="rarityScore">rarityScore.</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="chainId">chainId (default to 13337M).</param>
        public GetAssetListingsResponseDataInnerNft(string marketplaceId = default(string), string name = default(string), string imageUrl = default(string), string assetType = default(string), string assetAddress = default(string), string assetId = default(string), RarityEnum? rarity = default(RarityEnum?), decimal? rarityScore = default(decimal?), List<GetAssetsResponseDataInnerAttributesInner> attributes = default(List<GetAssetsResponseDataInnerAttributesInner>), decimal chainId = 13337M)
        {
            // to ensure "marketplaceId" is required (not null)
            if (marketplaceId == null)
            {
                throw new ArgumentNullException("marketplaceId is a required property for GetAssetListingsResponseDataInnerNft and cannot be null");
            }
            this.MarketplaceId = marketplaceId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for GetAssetListingsResponseDataInnerNft and cannot be null");
            }
            this.Name = name;
            // to ensure "imageUrl" is required (not null)
            if (imageUrl == null)
            {
                throw new ArgumentNullException("imageUrl is a required property for GetAssetListingsResponseDataInnerNft and cannot be null");
            }
            this.ImageUrl = imageUrl;
            // to ensure "assetType" is required (not null)
            if (assetType == null)
            {
                throw new ArgumentNullException("assetType is a required property for GetAssetListingsResponseDataInnerNft and cannot be null");
            }
            this.AssetType = assetType;
            // to ensure "assetAddress" is required (not null)
            if (assetAddress == null)
            {
                throw new ArgumentNullException("assetAddress is a required property for GetAssetListingsResponseDataInnerNft and cannot be null");
            }
            this.AssetAddress = assetAddress;
            // to ensure "assetId" is required (not null)
            if (assetId == null)
            {
                throw new ArgumentNullException("assetId is a required property for GetAssetListingsResponseDataInnerNft and cannot be null");
            }
            this.AssetId = assetId;
            this.Rarity = rarity;
            this.RarityScore = rarityScore;
            this.Attributes = attributes;
            this.ChainId = chainId;
        }

        /// <summary>
        /// Gets or Sets MarketplaceId
        /// </summary>
        [DataMember(Name = "marketplaceId", IsRequired = true, EmitDefaultValue = true)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "imageUrl", IsRequired = true, EmitDefaultValue = true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets AssetType
        /// </summary>
        [DataMember(Name = "assetType", IsRequired = true, EmitDefaultValue = true)]
        public string AssetType { get; set; }

        /// <summary>
        /// Gets or Sets AssetAddress
        /// </summary>
        [DataMember(Name = "assetAddress", IsRequired = true, EmitDefaultValue = true)]
        public string AssetAddress { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        [DataMember(Name = "assetId", IsRequired = true, EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets RarityScore
        /// </summary>
        [DataMember(Name = "rarityScore", EmitDefaultValue = true)]
        public decimal? RarityScore { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = true)]
        public List<GetAssetsResponseDataInnerAttributesInner> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", EmitDefaultValue = false)]
        public decimal ChainId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetListingsResponseDataInnerNft {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  AssetAddress: ").Append(AssetAddress).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  Rarity: ").Append(Rarity).Append("\n");
            sb.Append("  RarityScore: ").Append(RarityScore).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAssetListingsResponseDataInnerNft);
        }

        /// <summary>
        /// Returns true if GetAssetListingsResponseDataInnerNft instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAssetListingsResponseDataInnerNft to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAssetListingsResponseDataInnerNft input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MarketplaceId == input.MarketplaceId ||
                    (this.MarketplaceId != null &&
                    this.MarketplaceId.Equals(input.MarketplaceId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImageUrl == input.ImageUrl ||
                    (this.ImageUrl != null &&
                    this.ImageUrl.Equals(input.ImageUrl))
                ) && 
                (
                    this.AssetType == input.AssetType ||
                    (this.AssetType != null &&
                    this.AssetType.Equals(input.AssetType))
                ) && 
                (
                    this.AssetAddress == input.AssetAddress ||
                    (this.AssetAddress != null &&
                    this.AssetAddress.Equals(input.AssetAddress))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.Rarity == input.Rarity ||
                    this.Rarity.Equals(input.Rarity)
                ) && 
                (
                    this.RarityScore == input.RarityScore ||
                    (this.RarityScore != null &&
                    this.RarityScore.Equals(input.RarityScore))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    this.Attributes != null &&
                    input.Attributes != null &&
                    this.Attributes.SequenceEqual(input.Attributes)
                ) && 
                (
                    this.ChainId == input.ChainId ||
                    this.ChainId.Equals(input.ChainId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MarketplaceId != null)
                {
                    hashCode = (hashCode * 59) + this.MarketplaceId.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ImageUrl != null)
                {
                    hashCode = (hashCode * 59) + this.ImageUrl.GetHashCode();
                }
                if (this.AssetType != null)
                {
                    hashCode = (hashCode * 59) + this.AssetType.GetHashCode();
                }
                if (this.AssetAddress != null)
                {
                    hashCode = (hashCode * 59) + this.AssetAddress.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rarity.GetHashCode();
                if (this.RarityScore != null)
                {
                    hashCode = (hashCode * 59) + this.RarityScore.GetHashCode();
                }
                if (this.Attributes != null)
                {
                    hashCode = (hashCode * 59) + this.Attributes.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
