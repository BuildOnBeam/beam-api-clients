/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Beam.Client.FileParameter;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// GetProfileAssetsForGameSortParameter
    /// </summary>
    [DataContract(Name = "getProfileAssetsForGame_sort_parameter")]
    public partial class GetProfileAssetsForGameSortParameter : IEquatable<GetProfileAssetsForGameSortParameter>, IValidatableObject
    {
        /// <summary>
        /// Defines RarityScore
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RarityScoreEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Gets or Sets RarityScore
        /// </summary>
        [DataMember(Name = "rarityScore", EmitDefaultValue = true)]
        public RarityScoreEnum? RarityScore { get; set; }
        /// <summary>
        /// Defines Start
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StartEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = true)]
        public StartEnum? Start { get; set; }
        /// <summary>
        /// Defines End
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", EmitDefaultValue = true)]
        public EndEnum? End { get; set; }
        /// <summary>
        /// Defines CreatedAt
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CreatedAtEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = true)]
        public CreatedAtEnum? CreatedAt { get; set; }
        /// <summary>
        /// Defines FixedPriceNumber
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FixedPriceNumberEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Gets or Sets FixedPriceNumber
        /// </summary>
        [DataMember(Name = "fixedPriceNumber", EmitDefaultValue = true)]
        public FixedPriceNumberEnum? FixedPriceNumber { get; set; }
        /// <summary>
        /// Defines StartPriceNumber
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StartPriceNumberEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Gets or Sets StartPriceNumber
        /// </summary>
        [DataMember(Name = "startPriceNumber", EmitDefaultValue = true)]
        public StartPriceNumberEnum? StartPriceNumber { get; set; }
        /// <summary>
        /// Defines EndPriceNumber
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EndPriceNumberEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }


        /// <summary>
        /// Gets or Sets EndPriceNumber
        /// </summary>
        [DataMember(Name = "endPriceNumber", EmitDefaultValue = true)]
        public EndPriceNumberEnum? EndPriceNumber { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetProfileAssetsForGameSortParameter" /> class.
        /// </summary>
        /// <param name="rarityScore">rarityScore.</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="fixedPriceNumber">fixedPriceNumber.</param>
        /// <param name="startPriceNumber">startPriceNumber.</param>
        /// <param name="endPriceNumber">endPriceNumber.</param>
        public GetProfileAssetsForGameSortParameter(RarityScoreEnum? rarityScore = default(RarityScoreEnum?), StartEnum? start = default(StartEnum?), EndEnum? end = default(EndEnum?), CreatedAtEnum? createdAt = default(CreatedAtEnum?), FixedPriceNumberEnum? fixedPriceNumber = default(FixedPriceNumberEnum?), StartPriceNumberEnum? startPriceNumber = default(StartPriceNumberEnum?), EndPriceNumberEnum? endPriceNumber = default(EndPriceNumberEnum?))
        {
            this.RarityScore = rarityScore;
            this.Start = start;
            this.End = end;
            this.CreatedAt = createdAt;
            this.FixedPriceNumber = fixedPriceNumber;
            this.StartPriceNumber = startPriceNumber;
            this.EndPriceNumber = endPriceNumber;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetProfileAssetsForGameSortParameter {\n");
            sb.Append("  RarityScore: ").Append(RarityScore).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FixedPriceNumber: ").Append(FixedPriceNumber).Append("\n");
            sb.Append("  StartPriceNumber: ").Append(StartPriceNumber).Append("\n");
            sb.Append("  EndPriceNumber: ").Append(EndPriceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetProfileAssetsForGameSortParameter);
        }

        /// <summary>
        /// Returns true if GetProfileAssetsForGameSortParameter instances are equal
        /// </summary>
        /// <param name="input">Instance of GetProfileAssetsForGameSortParameter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProfileAssetsForGameSortParameter input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RarityScore == input.RarityScore ||
                    this.RarityScore.Equals(input.RarityScore)
                ) && 
                (
                    this.Start == input.Start ||
                    this.Start.Equals(input.Start)
                ) && 
                (
                    this.End == input.End ||
                    this.End.Equals(input.End)
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.FixedPriceNumber == input.FixedPriceNumber ||
                    this.FixedPriceNumber.Equals(input.FixedPriceNumber)
                ) && 
                (
                    this.StartPriceNumber == input.StartPriceNumber ||
                    this.StartPriceNumber.Equals(input.StartPriceNumber)
                ) && 
                (
                    this.EndPriceNumber == input.EndPriceNumber ||
                    this.EndPriceNumber.Equals(input.EndPriceNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.RarityScore.GetHashCode();
                hashCode = (hashCode * 59) + this.Start.GetHashCode();
                hashCode = (hashCode * 59) + this.End.GetHashCode();
                hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
                hashCode = (hashCode * 59) + this.FixedPriceNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.StartPriceNumber.GetHashCode();
                hashCode = (hashCode * 59) + this.EndPriceNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
