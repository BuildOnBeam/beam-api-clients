// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetResponseContract
    /// </summary>
    public partial class GetAssetResponseContract : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetResponseContract" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="avatar">avatar</param>
        /// <param name="chainId">chainId</param>
        /// <param name="header">header</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="network">network</param>
        /// <param name="slug">slug</param>
        /// <param name="symbol">symbol</param>
        /// <param name="type">type</param>
        /// <param name="description">description</param>
        /// <param name="royalty">royalty</param>
        /// <param name="royaltyAddress">royaltyAddress</param>
        [JsonConstructor]
        public GetAssetResponseContract(string address, GetAssetResponseContractAvatar avatar, decimal chainId, GetAssetResponseContractHeader header, string id, string name, NetworkEnum network, string slug, SymbolEnum symbol, TypeEnum type, string description = default, decimal? royalty = default, string royaltyAddress = default)
        {
            Address = address;
            Avatar = avatar;
            ChainId = chainId;
            Header = header;
            Id = id;
            Name = name;
            Network = network;
            Slug = slug;
            Symbol = symbol;
            Type = type;
            Description = description;
            Royalty = royalty;
            RoyaltyAddress = royaltyAddress;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Network
        /// </summary>
        public enum NetworkEnum
        {
            /// <summary>
            /// Enum Avalanche for value: Avalanche
            /// </summary>
            Avalanche = 1,

            /// <summary>
            /// Enum Beam for value: Beam
            /// </summary>
            Beam = 2,

            /// <summary>
            /// Enum Ethereum for value: Ethereum
            /// </summary>
            Ethereum = 3,

            /// <summary>
            /// Enum Polygon for value: Polygon
            /// </summary>
            Polygon = 4
        }

        /// <summary>
        /// Returns a <see cref="NetworkEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static NetworkEnum NetworkEnumFromString(string value)
        {
            if (value.Equals("Avalanche"))
                return NetworkEnum.Avalanche;

            if (value.Equals("Beam"))
                return NetworkEnum.Beam;

            if (value.Equals("Ethereum"))
                return NetworkEnum.Ethereum;

            if (value.Equals("Polygon"))
                return NetworkEnum.Polygon;

            throw new NotImplementedException($"Could not convert value to type NetworkEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="NetworkEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static NetworkEnum? NetworkEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Avalanche"))
                return NetworkEnum.Avalanche;

            if (value.Equals("Beam"))
                return NetworkEnum.Beam;

            if (value.Equals("Ethereum"))
                return NetworkEnum.Ethereum;

            if (value.Equals("Polygon"))
                return NetworkEnum.Polygon;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="NetworkEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string NetworkEnumToJsonValue(NetworkEnum value)
        {

            if (value == NetworkEnum.Avalanche)
                return "Avalanche";

            if (value == NetworkEnum.Beam)
                return "Beam";

            if (value == NetworkEnum.Ethereum)
                return "Ethereum";

            if (value == NetworkEnum.Polygon)
                return "Polygon";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [JsonPropertyName("network")]
        public NetworkEnum Network { get; set; }

        /// <summary>
        /// Defines Symbol
        /// </summary>
        public enum SymbolEnum
        {
            /// <summary>
            /// Enum Avax for value: Avax
            /// </summary>
            Avax = 1,

            /// <summary>
            /// Enum Beam for value: Beam
            /// </summary>
            Beam = 2,

            /// <summary>
            /// Enum Eth for value: Eth
            /// </summary>
            Eth = 3,

            /// <summary>
            /// Enum Matic for value: Matic
            /// </summary>
            Matic = 4,

            /// <summary>
            /// Enum Mc for value: Mc
            /// </summary>
            Mc = 5,

            /// <summary>
            /// Enum Usdc for value: Usdc
            /// </summary>
            Usdc = 6,

            /// <summary>
            /// Enum Usdt for value: Usdt
            /// </summary>
            Usdt = 7,

            /// <summary>
            /// Enum Wavax for value: Wavax
            /// </summary>
            Wavax = 8,

            /// <summary>
            /// Enum Wbeam for value: Wbeam
            /// </summary>
            Wbeam = 9,

            /// <summary>
            /// Enum Weth for value: Weth
            /// </summary>
            Weth = 10,

            /// <summary>
            /// Enum Wmatic for value: Wmatic
            /// </summary>
            Wmatic = 11,

            /// <summary>
            /// Enum Wmc for value: Wmc
            /// </summary>
            Wmc = 12
        }

        /// <summary>
        /// Returns a <see cref="SymbolEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SymbolEnum SymbolEnumFromString(string value)
        {
            if (value.Equals("Avax"))
                return SymbolEnum.Avax;

            if (value.Equals("Beam"))
                return SymbolEnum.Beam;

            if (value.Equals("Eth"))
                return SymbolEnum.Eth;

            if (value.Equals("Matic"))
                return SymbolEnum.Matic;

            if (value.Equals("Mc"))
                return SymbolEnum.Mc;

            if (value.Equals("Usdc"))
                return SymbolEnum.Usdc;

            if (value.Equals("Usdt"))
                return SymbolEnum.Usdt;

            if (value.Equals("Wavax"))
                return SymbolEnum.Wavax;

            if (value.Equals("Wbeam"))
                return SymbolEnum.Wbeam;

            if (value.Equals("Weth"))
                return SymbolEnum.Weth;

            if (value.Equals("Wmatic"))
                return SymbolEnum.Wmatic;

            if (value.Equals("Wmc"))
                return SymbolEnum.Wmc;

            throw new NotImplementedException($"Could not convert value to type SymbolEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SymbolEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SymbolEnum? SymbolEnumFromStringOrDefault(string value)
        {
            if (value.Equals("Avax"))
                return SymbolEnum.Avax;

            if (value.Equals("Beam"))
                return SymbolEnum.Beam;

            if (value.Equals("Eth"))
                return SymbolEnum.Eth;

            if (value.Equals("Matic"))
                return SymbolEnum.Matic;

            if (value.Equals("Mc"))
                return SymbolEnum.Mc;

            if (value.Equals("Usdc"))
                return SymbolEnum.Usdc;

            if (value.Equals("Usdt"))
                return SymbolEnum.Usdt;

            if (value.Equals("Wavax"))
                return SymbolEnum.Wavax;

            if (value.Equals("Wbeam"))
                return SymbolEnum.Wbeam;

            if (value.Equals("Weth"))
                return SymbolEnum.Weth;

            if (value.Equals("Wmatic"))
                return SymbolEnum.Wmatic;

            if (value.Equals("Wmc"))
                return SymbolEnum.Wmc;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SymbolEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SymbolEnumToJsonValue(SymbolEnum value)
        {

            if (value == SymbolEnum.Avax)
                return "Avax";

            if (value == SymbolEnum.Beam)
                return "Beam";

            if (value == SymbolEnum.Eth)
                return "Eth";

            if (value == SymbolEnum.Matic)
                return "Matic";

            if (value == SymbolEnum.Mc)
                return "Mc";

            if (value == SymbolEnum.Usdc)
                return "Usdc";

            if (value == SymbolEnum.Usdt)
                return "Usdt";

            if (value == SymbolEnum.Wavax)
                return "Wavax";

            if (value == SymbolEnum.Wbeam)
                return "Wbeam";

            if (value == SymbolEnum.Weth)
                return "Weth";

            if (value == SymbolEnum.Wmatic)
                return "Wmatic";

            if (value == SymbolEnum.Wmc)
                return "Wmc";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [JsonPropertyName("symbol")]
        public SymbolEnum Symbol { get; set; }

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ERC721 for value: ERC721
            /// </summary>
            ERC721 = 1,

            /// <summary>
            /// Enum ERC1155 for value: ERC1155
            /// </summary>
            ERC1155 = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("ERC721"))
                return TypeEnum.ERC721;

            if (value.Equals("ERC1155"))
                return TypeEnum.ERC1155;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ERC721"))
                return TypeEnum.ERC721;

            if (value.Equals("ERC1155"))
                return TypeEnum.ERC1155;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {

            if (value == TypeEnum.ERC721)
                return "ERC721";

            if (value == TypeEnum.ERC1155)
                return "ERC1155";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        [JsonPropertyName("avatar")]
        public GetAssetResponseContractAvatar Avatar { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public decimal ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [JsonPropertyName("header")]
        public GetAssetResponseContractHeader Header { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [JsonPropertyName("slug")]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Royalty
        /// </summary>
        [JsonPropertyName("royalty")]
        public decimal? Royalty { get; set; }

        /// <summary>
        /// Gets or Sets RoyaltyAddress
        /// </summary>
        [JsonPropertyName("royaltyAddress")]
        public string RoyaltyAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetResponseContract {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Royalty: ").Append(Royalty).Append("\n");
            sb.Append("  RoyaltyAddress: ").Append(RoyaltyAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetResponseContract" />
    /// </summary>
    public class GetAssetResponseContractJsonConverter : JsonConverter<GetAssetResponseContract>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetResponseContract" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetResponseContract Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string address = default;
            GetAssetResponseContractAvatar avatar = default;
            decimal? chainId = default;
            GetAssetResponseContractHeader header = default;
            string id = default;
            string name = default;
            GetAssetResponseContract.NetworkEnum? network = default;
            string slug = default;
            GetAssetResponseContract.SymbolEnum? symbol = default;
            GetAssetResponseContract.TypeEnum? type = default;
            string description = default;
            decimal? royalty = default;
            string royaltyAddress = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = utf8JsonReader.GetString();
                            break;
                        case "avatar":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                avatar = JsonSerializer.Deserialize<GetAssetResponseContractAvatar>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = utf8JsonReader.GetDecimal();
                            break;
                        case "header":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                header = JsonSerializer.Deserialize<GetAssetResponseContractHeader>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "_id":
                            id = utf8JsonReader.GetString();
                            break;
                        case "name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "network":
                            string networkRawValue = utf8JsonReader.GetString();
                            network = networkRawValue == null
                                ? null
                                : GetAssetResponseContract.NetworkEnumFromStringOrDefault(networkRawValue);
                            break;
                        case "slug":
                            slug = utf8JsonReader.GetString();
                            break;
                        case "symbol":
                            string symbolRawValue = utf8JsonReader.GetString();
                            symbol = symbolRawValue == null
                                ? null
                                : GetAssetResponseContract.SymbolEnumFromStringOrDefault(symbolRawValue);
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            type = typeRawValue == null
                                ? null
                                : GetAssetResponseContract.TypeEnumFromStringOrDefault(typeRawValue);
                            break;
                        case "description":
                            description = utf8JsonReader.GetString();
                            break;
                        case "royalty":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                royalty = utf8JsonReader.GetDecimal();
                            break;
                        case "royaltyAddress":
                            royaltyAddress = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address == null)
                throw new ArgumentNullException(nameof(address), "Property is required for class GetAssetResponseContract.");

            if (avatar == null)
                throw new ArgumentNullException(nameof(avatar), "Property is required for class GetAssetResponseContract.");

            if (chainId == null)
                throw new ArgumentNullException(nameof(chainId), "Property is required for class GetAssetResponseContract.");

            if (header == null)
                throw new ArgumentNullException(nameof(header), "Property is required for class GetAssetResponseContract.");

            if (id == null)
                throw new ArgumentNullException(nameof(id), "Property is required for class GetAssetResponseContract.");

            if (name == null)
                throw new ArgumentNullException(nameof(name), "Property is required for class GetAssetResponseContract.");

            if (network == null)
                throw new ArgumentNullException(nameof(network), "Property is required for class GetAssetResponseContract.");

            if (slug == null)
                throw new ArgumentNullException(nameof(slug), "Property is required for class GetAssetResponseContract.");

            if (symbol == null)
                throw new ArgumentNullException(nameof(symbol), "Property is required for class GetAssetResponseContract.");

            if (type == null)
                throw new ArgumentNullException(nameof(type), "Property is required for class GetAssetResponseContract.");

            return new GetAssetResponseContract(address, avatar, chainId.Value, header, id, name, network.Value, slug, symbol.Value, type.Value, description, royalty, royaltyAddress);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetResponseContract" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponseContract"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetResponseContract getAssetResponseContract, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetResponseContract, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetResponseContract" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponseContract"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetResponseContract getAssetResponseContract, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("address", getAssetResponseContract.Address);
            writer.WritePropertyName("avatar");
            JsonSerializer.Serialize(writer, getAssetResponseContract.Avatar, jsonSerializerOptions);
            writer.WriteNumber("chainId", getAssetResponseContract.ChainId);
            writer.WritePropertyName("header");
            JsonSerializer.Serialize(writer, getAssetResponseContract.Header, jsonSerializerOptions);
            writer.WriteString("_id", getAssetResponseContract.Id);
            writer.WriteString("name", getAssetResponseContract.Name);

            var networkRawValue = GetAssetResponseContract.NetworkEnumToJsonValue(getAssetResponseContract.Network);
            if (networkRawValue != null)
                writer.WriteString("network", networkRawValue);
            else
                writer.WriteNull("network");

            writer.WriteString("slug", getAssetResponseContract.Slug);

            var symbolRawValue = GetAssetResponseContract.SymbolEnumToJsonValue(getAssetResponseContract.Symbol);
            if (symbolRawValue != null)
                writer.WriteString("symbol", symbolRawValue);
            else
                writer.WriteNull("symbol");

            var typeRawValue = GetAssetResponseContract.TypeEnumToJsonValue(getAssetResponseContract.Type);
            if (typeRawValue != null)
                writer.WriteString("type", typeRawValue);
            else
                writer.WriteNull("type");

            writer.WriteString("description", getAssetResponseContract.Description);

            if (getAssetResponseContract.Royalty != null)
                writer.WriteNumber("royalty", getAssetResponseContract.Royalty.Value);
            else
                writer.WriteNull("royalty");

            writer.WriteString("royaltyAddress", getAssetResponseContract.RoyaltyAddress);
        }
    }
}
