// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// TransferTokenResponse
    /// </summary>
    public partial class TransferTokenResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransferTokenResponse" /> class.
        /// </summary>
        /// <param name="explorerUrl">explorerUrl</param>
        /// <param name="payloadToSign">payloadToSign</param>
        /// <param name="status">status</param>
        /// <param name="transactionHash">transactionHash</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public TransferTokenResponse(string explorerUrl, string payloadToSign, StatusEnum status, string transactionHash, TypeEnum type)
        {
            ExplorerUrl = explorerUrl;
            PayloadToSign = payloadToSign;
            Status = status;
            TransactionHash = transactionHash;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Status
        /// </summary>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 1,

            /// <summary>
            /// Enum Success for value: success
            /// </summary>
            Success = 2
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("success"))
                return StatusEnum.Success;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("success"))
                return StatusEnum.Success;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum value)
        {

            if (value == StatusEnum.Pending)
                return "pending";

            if (value == StatusEnum.Success)
                return "success";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Custodial for value: custodial
            /// </summary>
            Custodial = 1,

            /// <summary>
            /// Enum SelfCustodial for value: self-custodial
            /// </summary>
            SelfCustodial = 2
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("custodial"))
                return TypeEnum.Custodial;

            if (value.Equals("self-custodial"))
                return TypeEnum.SelfCustodial;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("custodial"))
                return TypeEnum.Custodial;

            if (value.Equals("self-custodial"))
                return TypeEnum.SelfCustodial;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {

            if (value == TypeEnum.Custodial)
                return "custodial";

            if (value == TypeEnum.SelfCustodial)
                return "self-custodial";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Gets or Sets ExplorerUrl
        /// </summary>
        [JsonPropertyName("explorerUrl")]
        public string ExplorerUrl { get; set; }

        /// <summary>
        /// Gets or Sets PayloadToSign
        /// </summary>
        [JsonPropertyName("payloadToSign")]
        public string PayloadToSign { get; set; }

        /// <summary>
        /// Gets or Sets TransactionHash
        /// </summary>
        [JsonPropertyName("transactionHash")]
        public string TransactionHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransferTokenResponse {\n");
            sb.Append("  ExplorerUrl: ").Append(ExplorerUrl).Append("\n");
            sb.Append("  PayloadToSign: ").Append(PayloadToSign).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TransferTokenResponse" />
    /// </summary>
    public class TransferTokenResponseJsonConverter : JsonConverter<TransferTokenResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="TransferTokenResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TransferTokenResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string explorerUrl = default;
            string payloadToSign = default;
            TransferTokenResponse.StatusEnum? status = default;
            string transactionHash = default;
            TransferTokenResponse.TypeEnum? type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "explorerUrl":
                            explorerUrl = utf8JsonReader.GetString();
                            break;
                        case "payloadToSign":
                            payloadToSign = utf8JsonReader.GetString();
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            status = statusRawValue == null
                                ? null
                                : TransferTokenResponse.StatusEnumFromStringOrDefault(statusRawValue);
                            break;
                        case "transactionHash":
                            transactionHash = utf8JsonReader.GetString();
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            type = typeRawValue == null
                                ? null
                                : TransferTokenResponse.TypeEnumFromStringOrDefault(typeRawValue);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (explorerUrl == null)
                throw new ArgumentNullException(nameof(explorerUrl), "Property is required for class TransferTokenResponse.");

            if (payloadToSign == null)
                throw new ArgumentNullException(nameof(payloadToSign), "Property is required for class TransferTokenResponse.");

            if (status == null)
                throw new ArgumentNullException(nameof(status), "Property is required for class TransferTokenResponse.");

            if (transactionHash == null)
                throw new ArgumentNullException(nameof(transactionHash), "Property is required for class TransferTokenResponse.");

            if (type == null)
                throw new ArgumentNullException(nameof(type), "Property is required for class TransferTokenResponse.");

            return new TransferTokenResponse(explorerUrl, payloadToSign, status.Value, transactionHash, type.Value);
        }

        /// <summary>
        /// Serializes a <see cref="TransferTokenResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transferTokenResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TransferTokenResponse transferTokenResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, transferTokenResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TransferTokenResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="transferTokenResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, TransferTokenResponse transferTokenResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("explorerUrl", transferTokenResponse.ExplorerUrl);
            writer.WriteString("payloadToSign", transferTokenResponse.PayloadToSign);

            var statusRawValue = TransferTokenResponse.StatusEnumToJsonValue(transferTokenResponse.Status);
            if (statusRawValue != null)
                writer.WriteString("status", statusRawValue);
            else
                writer.WriteNull("status");

            writer.WriteString("transactionHash", transferTokenResponse.TransactionHash);

            var typeRawValue = TransferTokenResponse.TypeEnumToJsonValue(transferTokenResponse.Type);
            if (typeRawValue != null)
                writer.WriteString("type", typeRawValue);
            else
                writer.WriteNull("type");
        }
    }
}
