// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// AddContractRequestInputAbiInner
    /// </summary>
    public partial class AddContractRequestInputAbiInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddContractRequestInputAbiInner" /> class.
        /// </summary>
        /// <param name="anonymous">anonymous</param>
        /// <param name="constant">constant</param>
        /// <param name="gas">gas</param>
        /// <param name="inputs">inputs</param>
        /// <param name="name">name</param>
        /// <param name="outputs">outputs</param>
        /// <param name="payable">payable</param>
        /// <param name="stateMutability">stateMutability</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        public AddContractRequestInputAbiInner(bool anonymous, bool constant, string gas, List<AddContractRequestInputAbiInnerInputsInner> inputs, string name, List<Object> outputs, bool payable, string stateMutability, string type)
        {
            Anonymous = anonymous;
            Constant = constant;
            Gas = gas;
            Inputs = inputs;
            Name = name;
            Outputs = outputs;
            Payable = payable;
            StateMutability = stateMutability;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Anonymous
        /// </summary>
        [JsonPropertyName("anonymous")]
        public bool Anonymous { get; set; }

        /// <summary>
        /// Gets or Sets Constant
        /// </summary>
        [JsonPropertyName("constant")]
        public bool Constant { get; set; }

        /// <summary>
        /// Gets or Sets Gas
        /// </summary>
        [JsonPropertyName("gas")]
        public string Gas { get; set; }

        /// <summary>
        /// Gets or Sets Inputs
        /// </summary>
        [JsonPropertyName("inputs")]
        public List<AddContractRequestInputAbiInnerInputsInner> Inputs { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Outputs
        /// </summary>
        [JsonPropertyName("outputs")]
        public List<Object> Outputs { get; set; }

        /// <summary>
        /// Gets or Sets Payable
        /// </summary>
        [JsonPropertyName("payable")]
        public bool Payable { get; set; }

        /// <summary>
        /// Gets or Sets StateMutability
        /// </summary>
        [JsonPropertyName("stateMutability")]
        public string StateMutability { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddContractRequestInputAbiInner {\n");
            sb.Append("  Anonymous: ").Append(Anonymous).Append("\n");
            sb.Append("  Constant: ").Append(Constant).Append("\n");
            sb.Append("  Gas: ").Append(Gas).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Payable: ").Append(Payable).Append("\n");
            sb.Append("  StateMutability: ").Append(StateMutability).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddContractRequestInputAbiInner" />
    /// </summary>
    public class AddContractRequestInputAbiInnerJsonConverter : JsonConverter<AddContractRequestInputAbiInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddContractRequestInputAbiInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddContractRequestInputAbiInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            bool? anonymous = default;
            bool? constant = default;
            string gas = default;
            List<AddContractRequestInputAbiInnerInputsInner> inputs = default;
            string name = default;
            List<Object> outputs = default;
            bool? payable = default;
            string stateMutability = default;
            string type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "anonymous":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                anonymous = utf8JsonReader.GetBoolean();
                            break;
                        case "constant":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                constant = utf8JsonReader.GetBoolean();
                            break;
                        case "gas":
                            gas = utf8JsonReader.GetString();
                            break;
                        case "inputs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inputs = JsonSerializer.Deserialize<List<AddContractRequestInputAbiInnerInputsInner>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "outputs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                outputs = JsonSerializer.Deserialize<List<Object>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "payable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                payable = utf8JsonReader.GetBoolean();
                            break;
                        case "stateMutability":
                            stateMutability = utf8JsonReader.GetString();
                            break;
                        case "type":
                            type = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (anonymous == null)
                throw new ArgumentNullException(nameof(anonymous), "Property is required for class AddContractRequestInputAbiInner.");

            if (constant == null)
                throw new ArgumentNullException(nameof(constant), "Property is required for class AddContractRequestInputAbiInner.");

            if (gas == null)
                throw new ArgumentNullException(nameof(gas), "Property is required for class AddContractRequestInputAbiInner.");

            if (inputs == null)
                throw new ArgumentNullException(nameof(inputs), "Property is required for class AddContractRequestInputAbiInner.");

            if (name == null)
                throw new ArgumentNullException(nameof(name), "Property is required for class AddContractRequestInputAbiInner.");

            if (outputs == null)
                throw new ArgumentNullException(nameof(outputs), "Property is required for class AddContractRequestInputAbiInner.");

            if (payable == null)
                throw new ArgumentNullException(nameof(payable), "Property is required for class AddContractRequestInputAbiInner.");

            if (stateMutability == null)
                throw new ArgumentNullException(nameof(stateMutability), "Property is required for class AddContractRequestInputAbiInner.");

            if (type == null)
                throw new ArgumentNullException(nameof(type), "Property is required for class AddContractRequestInputAbiInner.");

            return new AddContractRequestInputAbiInner(anonymous.Value, constant.Value, gas, inputs, name, outputs, payable.Value, stateMutability, type);
        }

        /// <summary>
        /// Serializes a <see cref="AddContractRequestInputAbiInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addContractRequestInputAbiInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddContractRequestInputAbiInner addContractRequestInputAbiInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, addContractRequestInputAbiInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddContractRequestInputAbiInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addContractRequestInputAbiInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, AddContractRequestInputAbiInner addContractRequestInputAbiInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteBoolean("anonymous", addContractRequestInputAbiInner.Anonymous);
            writer.WriteBoolean("constant", addContractRequestInputAbiInner.Constant);
            writer.WriteString("gas", addContractRequestInputAbiInner.Gas);
            writer.WritePropertyName("inputs");
            JsonSerializer.Serialize(writer, addContractRequestInputAbiInner.Inputs, jsonSerializerOptions);
            writer.WriteString("name", addContractRequestInputAbiInner.Name);
            writer.WritePropertyName("outputs");
            JsonSerializer.Serialize(writer, addContractRequestInputAbiInner.Outputs, jsonSerializerOptions);
            writer.WriteBoolean("payable", addContractRequestInputAbiInner.Payable);
            writer.WriteString("stateMutability", addContractRequestInputAbiInner.StateMutability);
            writer.WriteString("type", addContractRequestInputAbiInner.Type);
        }
    }
}
