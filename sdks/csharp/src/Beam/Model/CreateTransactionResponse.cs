// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using OpenAPIClientUtils = Beam.Client.ClientUtils;
using Beam.Client;

namespace Beam.Model
{
    /// <summary>
    /// CreateTransactionResponse
    /// </summary>
    public partial class CreateTransactionResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTransactionResponse" /> class.
        /// </summary>
        /// <param name="chainId">chainId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="id">id</param>
        /// <param name="updatedAt">updatedAt</param>
        /// <param name="interactions">interactions</param>
        /// <param name="response">response</param>
        /// <param name="userOperation">userOperation</param>
        /// <param name="userOperationHash">userOperationHash</param>
        [JsonConstructor]
        public CreateTransactionResponse(decimal chainId, decimal createdAt, string id, decimal updatedAt, Option<List<GetTransactionsResponseDataInnerInteractionsInner>?> interactions = default, Option<GetTransactionsResponseDataInnerResponse?> response = default, Option<Object?> userOperation = default, Option<string?> userOperationHash = default)
        {
            ChainId = chainId;
            CreatedAt = createdAt;
            Id = id;
            UpdatedAt = updatedAt;
            InteractionsOption = interactions;
            ResponseOption = response;
            UserOperationOption = userOperation;
            UserOperationHashOption = userOperationHash;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public decimal ChainId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public decimal CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public decimal UpdatedAt { get; set; }

        /// <summary>
        /// Used to track the state of Interactions
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GetTransactionsResponseDataInnerInteractionsInner>?> InteractionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Interactions
        /// </summary>
        [JsonPropertyName("interactions")]
        public List<GetTransactionsResponseDataInnerInteractionsInner>? Interactions { get { return this. InteractionsOption; } set { this.InteractionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Response
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetTransactionsResponseDataInnerResponse?> ResponseOption { get; private set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [JsonPropertyName("response")]
        public GetTransactionsResponseDataInnerResponse? Response { get { return this. ResponseOption; } set { this.ResponseOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserOperation
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> UserOperationOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserOperation
        /// </summary>
        [JsonPropertyName("userOperation")]
        public Object? UserOperation { get { return this. UserOperationOption; } set { this.UserOperationOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserOperationHash
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserOperationHashOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserOperationHash
        /// </summary>
        [JsonPropertyName("userOperationHash")]
        public string? UserOperationHash { get { return this. UserOperationHashOption; } set { this.UserOperationHashOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTransactionResponse {\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Interactions: ").Append(Interactions).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  UserOperation: ").Append(UserOperation).Append("\n");
            sb.Append("  UserOperationHash: ").Append(UserOperationHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTransactionResponse" />
    /// </summary>
    public class CreateTransactionResponseJsonConverter : JsonConverter<CreateTransactionResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateTransactionResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTransactionResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> chainId = default;
            Option<decimal?> createdAt = default;
            Option<string?> id = default;
            Option<decimal?> updatedAt = default;
            Option<List<GetTransactionsResponseDataInnerInteractionsInner>?> interactions = default;
            Option<GetTransactionsResponseDataInnerResponse?> response = default;
            Option<Object?> userOperation = default;
            Option<string?> userOperationHash = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<decimal?>(utf8JsonReader.GetDecimal());
                            break;
                        case "interactions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                interactions = new Option<List<GetTransactionsResponseDataInnerInteractionsInner>?>(JsonSerializer.Deserialize<List<GetTransactionsResponseDataInnerInteractionsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "response":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                response = new Option<GetTransactionsResponseDataInnerResponse?>(JsonSerializer.Deserialize<GetTransactionsResponseDataInnerResponse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "userOperation":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userOperation = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "userOperationHash":
                            userOperationHash = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!chainId.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionResponse.", nameof(chainId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionResponse.", nameof(createdAt));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionResponse.", nameof(id));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class CreateTransactionResponse.", nameof(updatedAt));

            if (chainId.IsSet && chainId.Value == null)
                throw new ArgumentNullException(nameof(chainId), "Property is not nullable for class CreateTransactionResponse.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class CreateTransactionResponse.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class CreateTransactionResponse.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class CreateTransactionResponse.");

            if (interactions.IsSet && interactions.Value == null)
                throw new ArgumentNullException(nameof(interactions), "Property is not nullable for class CreateTransactionResponse.");

            if (response.IsSet && response.Value == null)
                throw new ArgumentNullException(nameof(response), "Property is not nullable for class CreateTransactionResponse.");

            if (userOperationHash.IsSet && userOperationHash.Value == null)
                throw new ArgumentNullException(nameof(userOperationHash), "Property is not nullable for class CreateTransactionResponse.");

            return new CreateTransactionResponse(chainId.Value!.Value!, createdAt.Value!.Value!, id.Value!, updatedAt.Value!.Value!, interactions, response, userOperation, userOperationHash);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTransactionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTransactionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTransactionResponse createTransactionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createTransactionResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTransactionResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTransactionResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateTransactionResponse createTransactionResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createTransactionResponse.Id == null)
                throw new ArgumentNullException(nameof(createTransactionResponse.Id), "Property is required for class CreateTransactionResponse.");

            if (createTransactionResponse.InteractionsOption.IsSet && createTransactionResponse.Interactions == null)
                throw new ArgumentNullException(nameof(createTransactionResponse.Interactions), "Property is required for class CreateTransactionResponse.");

            if (createTransactionResponse.ResponseOption.IsSet && createTransactionResponse.Response == null)
                throw new ArgumentNullException(nameof(createTransactionResponse.Response), "Property is required for class CreateTransactionResponse.");

            if (createTransactionResponse.UserOperationHashOption.IsSet && createTransactionResponse.UserOperationHash == null)
                throw new ArgumentNullException(nameof(createTransactionResponse.UserOperationHash), "Property is required for class CreateTransactionResponse.");

            writer.WriteNumber("chainId", createTransactionResponse.ChainId);

            writer.WriteNumber("createdAt", createTransactionResponse.CreatedAt);

            writer.WriteString("id", createTransactionResponse.Id);

            writer.WriteNumber("updatedAt", createTransactionResponse.UpdatedAt);

            if (createTransactionResponse.InteractionsOption.IsSet)
            {
                writer.WritePropertyName("interactions");
                JsonSerializer.Serialize(writer, createTransactionResponse.Interactions, jsonSerializerOptions);
            }
            if (createTransactionResponse.ResponseOption.IsSet)
            {
                writer.WritePropertyName("response");
                JsonSerializer.Serialize(writer, createTransactionResponse.Response, jsonSerializerOptions);
            }
            if (createTransactionResponse.UserOperationOption.IsSet)
                if (createTransactionResponse.UserOperationOption.Value != null)
                {
                    writer.WritePropertyName("userOperation");
                    JsonSerializer.Serialize(writer, createTransactionResponse.UserOperation, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("userOperation");
            if (createTransactionResponse.UserOperationHashOption.IsSet)
                writer.WriteString("userOperationHash", createTransactionResponse.UserOperationHash);
        }
    }
}