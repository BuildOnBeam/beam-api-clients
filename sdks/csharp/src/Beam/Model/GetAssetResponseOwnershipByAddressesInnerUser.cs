// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Beam.Client;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetResponseOwnershipByAddressesInnerUser
    /// </summary>
    public partial class GetAssetResponseOwnershipByAddressesInnerUser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetResponseOwnershipByAddressesInnerUser" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="isCreator">isCreator</param>
        /// <param name="isRoyaltyOwner">isRoyaltyOwner</param>
        /// <param name="profile">profile</param>
        /// <param name="username">username</param>
        [JsonConstructor]
        public GetAssetResponseOwnershipByAddressesInnerUser(string id, bool isCreator, Option<bool?> isRoyaltyOwner = default, Option<GetAssetResponseOwnershipByAddressesInnerUserProfile> profile = default, Option<string> username = default)
        {
            Id = id;
            IsCreator = isCreator;
            IsRoyaltyOwnerOption = isRoyaltyOwner;
            ProfileOption = profile;
            UsernameOption = username;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("_id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IsCreator
        /// </summary>
        [JsonPropertyName("isCreator")]
        public bool IsCreator { get; set; }

        /// <summary>
        /// Used to track the state of IsRoyaltyOwner
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsRoyaltyOwnerOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsRoyaltyOwner
        /// </summary>
        [JsonPropertyName("isRoyaltyOwner")]
        public bool? IsRoyaltyOwner { get { return this. IsRoyaltyOwnerOption; } set { this.IsRoyaltyOwnerOption = new(value); } }

        /// <summary>
        /// Used to track the state of Profile
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GetAssetResponseOwnershipByAddressesInnerUserProfile> ProfileOption { get; private set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [JsonPropertyName("profile")]
        public GetAssetResponseOwnershipByAddressesInnerUserProfile Profile { get { return this. ProfileOption; } set { this.ProfileOption = new(value); } }

        /// <summary>
        /// Used to track the state of Username
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UsernameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [JsonPropertyName("username")]
        public string Username { get { return this. UsernameOption; } set { this.UsernameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetResponseOwnershipByAddressesInnerUser {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsCreator: ").Append(IsCreator).Append("\n");
            sb.Append("  IsRoyaltyOwner: ").Append(IsRoyaltyOwner).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetResponseOwnershipByAddressesInnerUser" />
    /// </summary>
    public class GetAssetResponseOwnershipByAddressesInnerUserJsonConverter : JsonConverter<GetAssetResponseOwnershipByAddressesInnerUser>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetResponseOwnershipByAddressesInnerUser" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetResponseOwnershipByAddressesInnerUser Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> id = default;
            Option<bool?> isCreator = default;
            Option<bool?> isRoyaltyOwner = default;
            Option<GetAssetResponseOwnershipByAddressesInnerUserProfile> profile = default;
            Option<string> username = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_id":
                            id = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isCreator":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isCreator = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "isRoyaltyOwner":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isRoyaltyOwner = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "profile":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                profile = new Option<GetAssetResponseOwnershipByAddressesInnerUserProfile>(JsonSerializer.Deserialize<GetAssetResponseOwnershipByAddressesInnerUserProfile>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "username":
                            username = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class GetAssetResponseOwnershipByAddressesInnerUser.", nameof(id));

            if (!isCreator.IsSet)
                throw new ArgumentException("Property is required for class GetAssetResponseOwnershipByAddressesInnerUser.", nameof(isCreator));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class GetAssetResponseOwnershipByAddressesInnerUser.");

            if (isCreator.IsSet && isCreator.Value == null)
                throw new ArgumentNullException(nameof(isCreator), "Property is not nullable for class GetAssetResponseOwnershipByAddressesInnerUser.");

            return new GetAssetResponseOwnershipByAddressesInnerUser(id.Value, isCreator.Value.Value, isRoyaltyOwner, profile, username);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetResponseOwnershipByAddressesInnerUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponseOwnershipByAddressesInnerUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetResponseOwnershipByAddressesInnerUser getAssetResponseOwnershipByAddressesInnerUser, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetResponseOwnershipByAddressesInnerUser, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetResponseOwnershipByAddressesInnerUser" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponseOwnershipByAddressesInnerUser"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetResponseOwnershipByAddressesInnerUser getAssetResponseOwnershipByAddressesInnerUser, JsonSerializerOptions jsonSerializerOptions)
        {
            if (getAssetResponseOwnershipByAddressesInnerUser.Id == null)
                throw new ArgumentNullException(nameof(getAssetResponseOwnershipByAddressesInnerUser.Id), "Property is required for class GetAssetResponseOwnershipByAddressesInnerUser.");

            writer.WriteString("_id", getAssetResponseOwnershipByAddressesInnerUser.Id);

            writer.WriteBoolean("isCreator", getAssetResponseOwnershipByAddressesInnerUser.IsCreator);

            if (getAssetResponseOwnershipByAddressesInnerUser.IsRoyaltyOwnerOption.IsSet)
                if (getAssetResponseOwnershipByAddressesInnerUser.IsRoyaltyOwnerOption.Value != null)
                    writer.WriteBoolean("isRoyaltyOwner", getAssetResponseOwnershipByAddressesInnerUser.IsRoyaltyOwnerOption.Value.Value);
                else
                    writer.WriteNull("isRoyaltyOwner");

            if (getAssetResponseOwnershipByAddressesInnerUser.ProfileOption.IsSet)
                if (getAssetResponseOwnershipByAddressesInnerUser.ProfileOption.Value != null)
                {
                    writer.WritePropertyName("profile");
                    JsonSerializer.Serialize(writer, getAssetResponseOwnershipByAddressesInnerUser.Profile, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("profile");
            if (getAssetResponseOwnershipByAddressesInnerUser.UsernameOption.IsSet)
                if (getAssetResponseOwnershipByAddressesInnerUser.UsernameOption.Value != null)
                    writer.WriteString("username", getAssetResponseOwnershipByAddressesInnerUser.Username);
                else
                    writer.WriteNull("username");
        }
    }
}
