/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Beam.Client.FileParameter;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetSortOptionsResponse
    /// </summary>
    [DataContract(Name = "GetAssetSortOptionsResponse")]
    public partial class GetAssetSortOptionsResponse : IEquatable<GetAssetSortOptionsResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines FieldNames
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FieldNamesEnum
        {
            /// <summary>
            /// Enum RarityScore for value: rarityScore
            /// </summary>
            [EnumMember(Value = "rarityScore")]
            RarityScore = 1,

            /// <summary>
            /// Enum Start for value: start
            /// </summary>
            [EnumMember(Value = "start")]
            Start = 2,

            /// <summary>
            /// Enum End for value: end
            /// </summary>
            [EnumMember(Value = "end")]
            End = 3,

            /// <summary>
            /// Enum CreatedAt for value: createdAt
            /// </summary>
            [EnumMember(Value = "createdAt")]
            CreatedAt = 4,

            /// <summary>
            /// Enum FixedPriceNumber for value: fixedPriceNumber
            /// </summary>
            [EnumMember(Value = "fixedPriceNumber")]
            FixedPriceNumber = 5,

            /// <summary>
            /// Enum StartPriceNumber for value: startPriceNumber
            /// </summary>
            [EnumMember(Value = "startPriceNumber")]
            StartPriceNumber = 6,

            /// <summary>
            /// Enum EndPriceNumber for value: endPriceNumber
            /// </summary>
            [EnumMember(Value = "endPriceNumber")]
            EndPriceNumber = 7
        }

        /// <summary>
        /// Defines Inner
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InnerEnum
        {
            /// <summary>
            /// Enum ASC for value: ASC
            /// </summary>
            [EnumMember(Value = "ASC")]
            ASC = 1,

            /// <summary>
            /// Enum DESC for value: DESC
            /// </summary>
            [EnumMember(Value = "DESC")]
            DESC = 2
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetSortOptionsResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAssetSortOptionsResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetSortOptionsResponse" /> class.
        /// </summary>
        /// <param name="fieldNames">fieldNames (required).</param>
        /// <param name="valueOptions">valueOptions (required).</param>
        public GetAssetSortOptionsResponse(List<FieldNamesEnum> fieldNames = default(List<FieldNamesEnum>), Dictionary<string, InnerEnum> valueOptions = default(Dictionary<string, InnerEnum>))
        {
            // to ensure "fieldNames" is required (not null)
            if (fieldNames == null)
            {
                throw new ArgumentNullException("fieldNames is a required property for GetAssetSortOptionsResponse and cannot be null");
            }
            this.FieldNames = fieldNames;
            // to ensure "valueOptions" is required (not null)
            if (valueOptions == null)
            {
                throw new ArgumentNullException("valueOptions is a required property for GetAssetSortOptionsResponse and cannot be null");
            }
            this.ValueOptions = valueOptions;
        }

        /// <summary>
        /// Gets or Sets FieldNames
        /// </summary>
        [DataMember(Name = "fieldNames", IsRequired = true, EmitDefaultValue = true)]
        public List<GetAssetSortOptionsResponse.FieldNamesEnum> FieldNames { get; set; }

        /// <summary>
        /// Gets or Sets ValueOptions
        /// </summary>
        [DataMember(Name = "valueOptions", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, GetAssetSortOptionsResponse.InnerEnum> ValueOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetSortOptionsResponse {\n");
            sb.Append("  FieldNames: ").Append(FieldNames).Append("\n");
            sb.Append("  ValueOptions: ").Append(ValueOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetAssetSortOptionsResponse);
        }

        /// <summary>
        /// Returns true if GetAssetSortOptionsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetAssetSortOptionsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetAssetSortOptionsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FieldNames == input.FieldNames ||
                    this.FieldNames != null &&
                    input.FieldNames != null &&
                    this.FieldNames.SequenceEqual(input.FieldNames)
                ) && 
                (
                    this.ValueOptions == input.ValueOptions ||
                    this.ValueOptions != null &&
                    input.ValueOptions != null &&
                    this.ValueOptions.SequenceEqual(input.ValueOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FieldNames != null)
                {
                    hashCode = (hashCode * 59) + this.FieldNames.GetHashCode();
                }
                if (this.ValueOptions != null)
                {
                    hashCode = (hashCode * 59) + this.ValueOptions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
