// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// CreateProfileResponseWalletsInner
    /// </summary>
    public partial class CreateProfileResponseWalletsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateProfileResponseWalletsInner" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="chainId">chainId</param>
        /// <param name="custodial">custodial</param>
        /// <param name="externalId">externalId</param>
        /// <param name="id">id</param>
        /// <param name="profileId">profileId</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="updatedAt">updatedAt</param>
        [JsonConstructor]
        public CreateProfileResponseWalletsInner(string address, int chainId, bool custodial, string externalId, string id, string profileId, Object createdAt = default, Object updatedAt = default)
        {
            Address = address;
            ChainId = chainId;
            Custodial = custodial;
            ExternalId = externalId;
            Id = id;
            ProfileId = profileId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [JsonPropertyName("chainId")]
        public int ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Custodial
        /// </summary>
        [JsonPropertyName("custodial")]
        public bool Custodial { get; set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ProfileId
        /// </summary>
        [JsonPropertyName("profileId")]
        public string ProfileId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public Object CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [JsonPropertyName("updatedAt")]
        public Object UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateProfileResponseWalletsInner {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Custodial: ").Append(Custodial).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ProfileId: ").Append(ProfileId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateProfileResponseWalletsInner" />
    /// </summary>
    public class CreateProfileResponseWalletsInnerJsonConverter : JsonConverter<CreateProfileResponseWalletsInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateProfileResponseWalletsInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateProfileResponseWalletsInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            string address = default;
            int? chainId = default;
            bool? custodial = default;
            string externalId = default;
            string id = default;
            string profileId = default;
            Object createdAt = default;
            Object updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = utf8JsonReader.GetString();
                            break;
                        case "chainId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                chainId = utf8JsonReader.GetInt32();
                            break;
                        case "custodial":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                custodial = utf8JsonReader.GetBoolean();
                            break;
                        case "externalId":
                            externalId = utf8JsonReader.GetString();
                            break;
                        case "id":
                            id = utf8JsonReader.GetString();
                            break;
                        case "profileId":
                            profileId = utf8JsonReader.GetString();
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (address == null)
                throw new ArgumentNullException(nameof(address), "Property is required for class CreateProfileResponseWalletsInner.");

            if (chainId == null)
                throw new ArgumentNullException(nameof(chainId), "Property is required for class CreateProfileResponseWalletsInner.");

            if (custodial == null)
                throw new ArgumentNullException(nameof(custodial), "Property is required for class CreateProfileResponseWalletsInner.");

            if (externalId == null)
                throw new ArgumentNullException(nameof(externalId), "Property is required for class CreateProfileResponseWalletsInner.");

            if (id == null)
                throw new ArgumentNullException(nameof(id), "Property is required for class CreateProfileResponseWalletsInner.");

            if (profileId == null)
                throw new ArgumentNullException(nameof(profileId), "Property is required for class CreateProfileResponseWalletsInner.");

            return new CreateProfileResponseWalletsInner(address, chainId.Value, custodial.Value, externalId, id, profileId, createdAt, updatedAt);
        }

        /// <summary>
        /// Serializes a <see cref="CreateProfileResponseWalletsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createProfileResponseWalletsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateProfileResponseWalletsInner createProfileResponseWalletsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createProfileResponseWalletsInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateProfileResponseWalletsInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createProfileResponseWalletsInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateProfileResponseWalletsInner createProfileResponseWalletsInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("address", createProfileResponseWalletsInner.Address);
            writer.WriteNumber("chainId", createProfileResponseWalletsInner.ChainId);
            writer.WriteBoolean("custodial", createProfileResponseWalletsInner.Custodial);
            writer.WriteString("externalId", createProfileResponseWalletsInner.ExternalId);
            writer.WriteString("id", createProfileResponseWalletsInner.Id);
            writer.WriteString("profileId", createProfileResponseWalletsInner.ProfileId);
            writer.WritePropertyName("createdAt");
            JsonSerializer.Serialize(writer, createProfileResponseWalletsInner.CreatedAt, jsonSerializerOptions);
            writer.WritePropertyName("updatedAt");
            JsonSerializer.Serialize(writer, createProfileResponseWalletsInner.UpdatedAt, jsonSerializerOptions);
        }
    }
}
