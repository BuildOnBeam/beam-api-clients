// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetTransactionsResponseDataInnerResponse
    /// </summary>
    public partial class GetTransactionsResponseDataInnerResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetTransactionsResponseDataInnerResponse" /> class.
        /// </summary>
        /// <param name="blockNumber">blockNumber</param>
        /// <param name="createdAt">createdAt</param>
        /// <param name="gasUsed">gasUsed</param>
        /// <param name="l1GasUsed">l1GasUsed</param>
        /// <param name="logs">logs</param>
        /// <param name="status">status</param>
        /// <param name="to">to</param>
        /// <param name="transactionHash">transactionHash</param>
        /// <param name="userOpHash">userOpHash</param>
        /// <param name="error">error</param>
        [JsonConstructor]
        public GetTransactionsResponseDataInnerResponse(decimal blockNumber, decimal createdAt, decimal gasUsed, string l1GasUsed, List<GetTransactionsResponseDataInnerResponseLogsInner> logs, decimal status, string to, string transactionHash, string userOpHash, Object error = default)
        {
            BlockNumber = blockNumber;
            CreatedAt = createdAt;
            GasUsed = gasUsed;
            L1GasUsed = l1GasUsed;
            Logs = logs;
            Status = status;
            To = to;
            TransactionHash = transactionHash;
            UserOpHash = userOpHash;
            Error = error;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets BlockNumber
        /// </summary>
        [JsonPropertyName("blockNumber")]
        public decimal BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [JsonPropertyName("createdAt")]
        public decimal CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets GasUsed
        /// </summary>
        [JsonPropertyName("gasUsed")]
        public decimal GasUsed { get; set; }

        /// <summary>
        /// Gets or Sets L1GasUsed
        /// </summary>
        [JsonPropertyName("l1GasUsed")]
        public string L1GasUsed { get; set; }

        /// <summary>
        /// Gets or Sets Logs
        /// </summary>
        [JsonPropertyName("logs")]
        public List<GetTransactionsResponseDataInnerResponseLogsInner> Logs { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public decimal Status { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [JsonPropertyName("to")]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets TransactionHash
        /// </summary>
        [JsonPropertyName("transactionHash")]
        public string TransactionHash { get; set; }

        /// <summary>
        /// Gets or Sets UserOpHash
        /// </summary>
        [JsonPropertyName("userOpHash")]
        public string UserOpHash { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [JsonPropertyName("error")]
        public Object Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetTransactionsResponseDataInnerResponse {\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  GasUsed: ").Append(GasUsed).Append("\n");
            sb.Append("  L1GasUsed: ").Append(L1GasUsed).Append("\n");
            sb.Append("  Logs: ").Append(Logs).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  TransactionHash: ").Append(TransactionHash).Append("\n");
            sb.Append("  UserOpHash: ").Append(UserOpHash).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetTransactionsResponseDataInnerResponse" />
    /// </summary>
    public class GetTransactionsResponseDataInnerResponseJsonConverter : JsonConverter<GetTransactionsResponseDataInnerResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetTransactionsResponseDataInnerResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetTransactionsResponseDataInnerResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            decimal? blockNumber = default;
            decimal? createdAt = default;
            decimal? gasUsed = default;
            string l1GasUsed = default;
            List<GetTransactionsResponseDataInnerResponseLogsInner> logs = default;
            decimal? status = default;
            string to = default;
            string transactionHash = default;
            string userOpHash = default;
            Object error = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "blockNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                blockNumber = utf8JsonReader.GetDecimal();
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = utf8JsonReader.GetDecimal();
                            break;
                        case "gasUsed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                gasUsed = utf8JsonReader.GetDecimal();
                            break;
                        case "l1GasUsed":
                            l1GasUsed = utf8JsonReader.GetString();
                            break;
                        case "logs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                logs = JsonSerializer.Deserialize<List<GetTransactionsResponseDataInnerResponseLogsInner>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "status":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                status = utf8JsonReader.GetDecimal();
                            break;
                        case "to":
                            to = utf8JsonReader.GetString();
                            break;
                        case "transactionHash":
                            transactionHash = utf8JsonReader.GetString();
                            break;
                        case "userOpHash":
                            userOpHash = utf8JsonReader.GetString();
                            break;
                        case "error":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                error = JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (blockNumber == null)
                throw new ArgumentNullException(nameof(blockNumber), "Property is required for class GetTransactionsResponseDataInnerResponse.");

            if (createdAt == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is required for class GetTransactionsResponseDataInnerResponse.");

            if (gasUsed == null)
                throw new ArgumentNullException(nameof(gasUsed), "Property is required for class GetTransactionsResponseDataInnerResponse.");

            if (l1GasUsed == null)
                throw new ArgumentNullException(nameof(l1GasUsed), "Property is required for class GetTransactionsResponseDataInnerResponse.");

            if (logs == null)
                throw new ArgumentNullException(nameof(logs), "Property is required for class GetTransactionsResponseDataInnerResponse.");

            if (status == null)
                throw new ArgumentNullException(nameof(status), "Property is required for class GetTransactionsResponseDataInnerResponse.");

            if (to == null)
                throw new ArgumentNullException(nameof(to), "Property is required for class GetTransactionsResponseDataInnerResponse.");

            if (transactionHash == null)
                throw new ArgumentNullException(nameof(transactionHash), "Property is required for class GetTransactionsResponseDataInnerResponse.");

            if (userOpHash == null)
                throw new ArgumentNullException(nameof(userOpHash), "Property is required for class GetTransactionsResponseDataInnerResponse.");

            return new GetTransactionsResponseDataInnerResponse(blockNumber.Value, createdAt.Value, gasUsed.Value, l1GasUsed, logs, status.Value, to, transactionHash, userOpHash, error);
        }

        /// <summary>
        /// Serializes a <see cref="GetTransactionsResponseDataInnerResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTransactionsResponseDataInnerResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetTransactionsResponseDataInnerResponse getTransactionsResponseDataInnerResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getTransactionsResponseDataInnerResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetTransactionsResponseDataInnerResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getTransactionsResponseDataInnerResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetTransactionsResponseDataInnerResponse getTransactionsResponseDataInnerResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteNumber("blockNumber", getTransactionsResponseDataInnerResponse.BlockNumber);
            writer.WriteNumber("createdAt", getTransactionsResponseDataInnerResponse.CreatedAt);
            writer.WriteNumber("gasUsed", getTransactionsResponseDataInnerResponse.GasUsed);
            writer.WriteString("l1GasUsed", getTransactionsResponseDataInnerResponse.L1GasUsed);
            writer.WritePropertyName("logs");
            JsonSerializer.Serialize(writer, getTransactionsResponseDataInnerResponse.Logs, jsonSerializerOptions);
            writer.WriteNumber("status", getTransactionsResponseDataInnerResponse.Status);
            writer.WriteString("to", getTransactionsResponseDataInnerResponse.To);
            writer.WriteString("transactionHash", getTransactionsResponseDataInnerResponse.TransactionHash);
            writer.WriteString("userOpHash", getTransactionsResponseDataInnerResponse.UserOpHash);
            writer.WritePropertyName("error");
            JsonSerializer.Serialize(writer, getTransactionsResponseDataInnerResponse.Error, jsonSerializerOptions);
        }
    }
}
