/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Beam.Client.FileParameter;
using OpenAPIDateConverter = Beam.Client.OpenAPIDateConverter;

namespace Beam.Model
{
    /// <summary>
    /// AddContractRequestInput
    /// </summary>
    [DataContract(Name = "AddContractRequestInput")]
    public partial class AddContractRequestInput : IEquatable<AddContractRequestInput>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ERC20 for value: ERC20
            /// </summary>
            [EnumMember(Value = "ERC20")]
            ERC20 = 1,

            /// <summary>
            /// Enum ERC721 for value: ERC721
            /// </summary>
            [EnumMember(Value = "ERC721")]
            ERC721 = 2,

            /// <summary>
            /// Enum ERC1155 for value: ERC1155
            /// </summary>
            [EnumMember(Value = "ERC1155")]
            ERC1155 = 3,

            /// <summary>
            /// Enum SEAPORT for value: SEAPORT
            /// </summary>
            [EnumMember(Value = "SEAPORT")]
            SEAPORT = 4,

            /// <summary>
            /// Enum UNISWAPV2 for value: UNISWAPV2
            /// </summary>
            [EnumMember(Value = "UNISWAPV2")]
            UNISWAPV2 = 5,

            /// <summary>
            /// Enum WETH for value: WETH
            /// </summary>
            [EnumMember(Value = "WETH")]
            WETH = 6
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddContractRequestInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddContractRequestInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddContractRequestInput" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="type">type (required).</param>
        /// <param name="chainId">chainId (required).</param>
        /// <param name="abi">abi (required).</param>
        /// <param name="name">name (required).</param>
        public AddContractRequestInput(string address = default(string), TypeEnum type = default(TypeEnum), int chainId = default(int), List<AddContractRequestInputAbiInner> abi = default(List<AddContractRequestInputAbiInner>), string name = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for AddContractRequestInput and cannot be null");
            }
            this.Address = address;
            this.Type = type;
            this.ChainId = chainId;
            // to ensure "abi" is required (not null)
            if (abi == null)
            {
                throw new ArgumentNullException("abi is a required property for AddContractRequestInput and cannot be null");
            }
            this.Abi = abi;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for AddContractRequestInput and cannot be null");
            }
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets ChainId
        /// </summary>
        [DataMember(Name = "chainId", IsRequired = true, EmitDefaultValue = true)]
        public int ChainId { get; set; }

        /// <summary>
        /// Gets or Sets Abi
        /// </summary>
        [DataMember(Name = "abi", IsRequired = true, EmitDefaultValue = true)]
        public List<AddContractRequestInputAbiInner> Abi { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddContractRequestInput {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Abi: ").Append(Abi).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddContractRequestInput);
        }

        /// <summary>
        /// Returns true if AddContractRequestInput instances are equal
        /// </summary>
        /// <param name="input">Instance of AddContractRequestInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddContractRequestInput input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.ChainId == input.ChainId ||
                    this.ChainId.Equals(input.ChainId)
                ) && 
                (
                    this.Abi == input.Abi ||
                    this.Abi != null &&
                    input.Abi != null &&
                    this.Abi.SequenceEqual(input.Abi)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                {
                    hashCode = (hashCode * 59) + this.Address.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.ChainId.GetHashCode();
                if (this.Abi != null)
                {
                    hashCode = (hashCode * 59) + this.Abi.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
