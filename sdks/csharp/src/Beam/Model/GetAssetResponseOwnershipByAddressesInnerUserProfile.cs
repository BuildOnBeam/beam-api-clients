// <auto-generated>
/*
 * Beam game development API
 *
 * The Beam game development API is a service to integrate your game with Beam
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;

namespace Beam.Model
{
    /// <summary>
    /// GetAssetResponseOwnershipByAddressesInnerUserProfile
    /// </summary>
    public partial class GetAssetResponseOwnershipByAddressesInnerUserProfile : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetResponseOwnershipByAddressesInnerUserProfile" /> class.
        /// </summary>
        /// <param name="isVerified">isVerified</param>
        /// <param name="bio">bio</param>
        /// <param name="profilePicture">profilePicture</param>
        /// <param name="profilePictureUrl">profilePictureUrl</param>
        /// <param name="telegram">telegram</param>
        /// <param name="twitter">twitter</param>
        /// <param name="website">website</param>
        [JsonConstructor]
        public GetAssetResponseOwnershipByAddressesInnerUserProfile(bool isVerified, string bio = default, string profilePicture = default, string profilePictureUrl = default, string telegram = default, string twitter = default, string website = default)
        {
            IsVerified = isVerified;
            Bio = bio;
            ProfilePicture = profilePicture;
            ProfilePictureUrl = profilePictureUrl;
            Telegram = telegram;
            Twitter = twitter;
            Website = website;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets IsVerified
        /// </summary>
        [JsonPropertyName("isVerified")]
        public bool IsVerified { get; set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        [JsonPropertyName("bio")]
        public string Bio { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePicture
        /// </summary>
        [JsonPropertyName("profilePicture")]
        public string ProfilePicture { get; set; }

        /// <summary>
        /// Gets or Sets ProfilePictureUrl
        /// </summary>
        [JsonPropertyName("profilePictureUrl")]
        public string ProfilePictureUrl { get; set; }

        /// <summary>
        /// Gets or Sets Telegram
        /// </summary>
        [JsonPropertyName("telegram")]
        public string Telegram { get; set; }

        /// <summary>
        /// Gets or Sets Twitter
        /// </summary>
        [JsonPropertyName("twitter")]
        public string Twitter { get; set; }

        /// <summary>
        /// Gets or Sets Website
        /// </summary>
        [JsonPropertyName("website")]
        public string Website { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAssetResponseOwnershipByAddressesInnerUserProfile {\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  ProfilePicture: ").Append(ProfilePicture).Append("\n");
            sb.Append("  ProfilePictureUrl: ").Append(ProfilePictureUrl).Append("\n");
            sb.Append("  Telegram: ").Append(Telegram).Append("\n");
            sb.Append("  Twitter: ").Append(Twitter).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GetAssetResponseOwnershipByAddressesInnerUserProfile" />
    /// </summary>
    public class GetAssetResponseOwnershipByAddressesInnerUserProfileJsonConverter : JsonConverter<GetAssetResponseOwnershipByAddressesInnerUserProfile>
    {
        /// <summary>
        /// Deserializes json to <see cref="GetAssetResponseOwnershipByAddressesInnerUserProfile" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GetAssetResponseOwnershipByAddressesInnerUserProfile Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            bool? isVerified = default;
            string bio = default;
            string profilePicture = default;
            string profilePictureUrl = default;
            string telegram = default;
            string twitter = default;
            string website = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "isVerified":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isVerified = utf8JsonReader.GetBoolean();
                            break;
                        case "bio":
                            bio = utf8JsonReader.GetString();
                            break;
                        case "profilePicture":
                            profilePicture = utf8JsonReader.GetString();
                            break;
                        case "profilePictureUrl":
                            profilePictureUrl = utf8JsonReader.GetString();
                            break;
                        case "telegram":
                            telegram = utf8JsonReader.GetString();
                            break;
                        case "twitter":
                            twitter = utf8JsonReader.GetString();
                            break;
                        case "website":
                            website = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isVerified == null)
                throw new ArgumentNullException(nameof(isVerified), "Property is required for class GetAssetResponseOwnershipByAddressesInnerUserProfile.");

            return new GetAssetResponseOwnershipByAddressesInnerUserProfile(isVerified.Value, bio, profilePicture, profilePictureUrl, telegram, twitter, website);
        }

        /// <summary>
        /// Serializes a <see cref="GetAssetResponseOwnershipByAddressesInnerUserProfile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponseOwnershipByAddressesInnerUserProfile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GetAssetResponseOwnershipByAddressesInnerUserProfile getAssetResponseOwnershipByAddressesInnerUserProfile, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, getAssetResponseOwnershipByAddressesInnerUserProfile, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GetAssetResponseOwnershipByAddressesInnerUserProfile" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="getAssetResponseOwnershipByAddressesInnerUserProfile"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GetAssetResponseOwnershipByAddressesInnerUserProfile getAssetResponseOwnershipByAddressesInnerUserProfile, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteBoolean("isVerified", getAssetResponseOwnershipByAddressesInnerUserProfile.IsVerified);
            writer.WriteString("bio", getAssetResponseOwnershipByAddressesInnerUserProfile.Bio);
            writer.WriteString("profilePicture", getAssetResponseOwnershipByAddressesInnerUserProfile.ProfilePicture);
            writer.WriteString("profilePictureUrl", getAssetResponseOwnershipByAddressesInnerUserProfile.ProfilePictureUrl);
            writer.WriteString("telegram", getAssetResponseOwnershipByAddressesInnerUserProfile.Telegram);
            writer.WriteString("twitter", getAssetResponseOwnershipByAddressesInnerUserProfile.Twitter);
            writer.WriteString("website", getAssetResponseOwnershipByAddressesInnerUserProfile.Website);
        }
    }
}
