{{>partial_header}}
{{#nrt}}
#nullable enable

{{/nrt}}
using System;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using {{packageName}}.{{clientPackage}};

namespace {{packageName}}.Extensions
{
    /// <summary>
    /// Extension methods for IServiceCollection
    /// </summary>
    {{>visibility}} static class IServiceCollectionExtensions
    {
        {{^hasAuthMethods}}
        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        public static void Add{{apiName}}(this IServiceCollection services)
        {
            {{classPrefix}}HostConfiguration config = new{{^net70OrLater}} {{classPrefix}}HostConfiguration{{/net70OrLater}}(services);
            Add{{apiName}}(services, config);
        }

        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        [Obsolete("Use Add{{apiName}}")]
        public static void AddApi(this IServiceCollection services)
        {
            {{classPrefix}}HostConfiguration config = new{{^net70OrLater}} {{classPrefix}}HostConfiguration{{/net70OrLater}}(services);
            Add{{apiName}}(services, config);
        }

        {{/hasAuthMethods}}
        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        public static void Add{{apiName}}(this IServiceCollection services, Action<{{classPrefix}}HostConfiguration> options)
        {
            {{classPrefix}}HostConfiguration config = new{{^net70OrLater}} {{classPrefix}}HostConfiguration{{/net70OrLater}}(services);
            options(config);
            Add{{apiName}}(services, config);
        }

        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        [Obsolete("Use Add{{apiName}}")]
        public static void AddApi(this IServiceCollection services, Action<{{classPrefix}}HostConfiguration> options)
        {
            {{classPrefix}}HostConfiguration config = new{{^net70OrLater}} {{classPrefix}}HostConfiguration{{/net70OrLater}}(services);
            options(config);
            Add{{apiName}}(services, config);
        }

        internal static void Add{{apiName}}(IServiceCollection services, {{classPrefix}}HostConfiguration host)
        {
            if (!host.HttpClientsAdded)
                host.Add{{apiName}}HttpClients();

            services.AddSingleton<CookieContainer>();

            services.AddSingleton<SimpleApiKeyTokenProvider<{{classPrefix}}ApiKeyToken>>();
            services.AddTransient(typeof(TokenProvider<>).MakeGenericType(typeof({{classPrefix}}ApiKeyToken)),
                        s => s.GetRequiredService(typeof(SimpleApiKeyTokenProvider<>).MakeGenericType(typeof({{classPrefix}}ApiKeyToken))));
        }
    }
}